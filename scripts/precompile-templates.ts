#!/usr/bin/env tsx
/**
 * Pre-compile all templates to JavaScript
 * This eliminates runtime compilation when users add templates
 */

import { TEMPLATES } from '../src/templates/registry';
import { compileSceneToJS } from '../src/server/utils/compile-scene';
import fs from 'fs/promises';
import path from 'path';

async function precompileTemplates() {
  console.log('üöÄ Pre-compiling templates to JavaScript...\n');
  
  const compiledTemplates: Record<string, { 
    jsCode: string | null; 
    compiledAt: Date | null;
    error?: string;
  }> = {};
  
  let successCount = 0;
  let failureCount = 0;
  
  for (const template of TEMPLATES) {
    console.log(`üì¶ Compiling template: ${template.name} (${template.id})`);
    
    try {
      // Get the TSX code
      const tsxCode = template.getCode();
      
      // Compile to JS
      const result = compileSceneToJS(tsxCode);
      
      if (result.success && result.jsCode) {
        compiledTemplates[template.id] = {
          jsCode: result.jsCode,
          compiledAt: result.compiledAt
        };
        console.log(`  ‚úÖ Success - ${result.jsCode.length} bytes`);
        successCount++;
      } else {
        compiledTemplates[template.id] = {
          jsCode: null,
          compiledAt: null,
          error: result.error
        };
        console.log(`  ‚ùå Failed: ${result.error}`);
        failureCount++;
      }
    } catch (error) {
      console.log(`  ‚ùå Error: ${error}`);
      compiledTemplates[template.id] = {
        jsCode: null,
        compiledAt: null,
        error: String(error)
      };
      failureCount++;
    }
  }
  
  // Save to a JSON file that can be imported
  const outputPath = path.join(process.cwd(), 'src/templates/compiled-templates.json');
  await fs.writeFile(
    outputPath,
    JSON.stringify(compiledTemplates, null, 2),
    'utf-8'
  );
  
  console.log('\nüìä Compilation Results:');
  console.log(`  ‚úÖ Successful: ${successCount}`);
  console.log(`  ‚ùå Failed: ${failureCount}`);
  console.log(`  üìÅ Output: ${outputPath}`);
  
  // Also generate a TypeScript module for type-safe access
  const tsOutput = `// Auto-generated by scripts/precompile-templates.ts
// DO NOT EDIT MANUALLY

export const COMPILED_TEMPLATES: Record<string, {
  jsCode: string | null;
  compiledAt: Date | null;
  error?: string;
}> = ${JSON.stringify(compiledTemplates, null, 2)};

export function getCompiledTemplate(templateId: string): string | null {
  return COMPILED_TEMPLATES[templateId]?.jsCode ?? null;
}
`;
  
  const tsOutputPath = path.join(process.cwd(), 'src/templates/compiled-templates.ts');
  await fs.writeFile(tsOutputPath, tsOutput, 'utf-8');
  console.log(`  üìÅ TypeScript: ${tsOutputPath}`);
}

// Run the script
precompileTemplates().catch(console.error);