{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TS...nly. Start with imports/const declarations and never add prose."},{"role":"user","content":"Dashboard onboarding tour"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig } = window.Remotion;\n\nconst script_ztiong4q = [\n  { type: \"window-in\", frames: 20 },\n  { type: \"panel-stagger\", frames: 36 },\n  { type: \"callouts\", frames: 120 },\n  { type: \"cta-outro\", frames: 24 }\n];\n\nconst sequences_ztiong4q = [];\nlet accumulatedFrames_ztiong4q = 0;\n\nscript_ztiong4q.forEach((segment) => {\n  sequences_ztiong4q.push({\n    ...segment,\n    start: accumulatedFrames_ztiong4q,\n    end: accumulatedFrames_ztiong4q + segment.frames\n  });\n  accumulatedFrames_ztiong4q += segment.frames;\n});\n\nconst totalFrames_ztiong4q = script_ztiong4q.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_ztiong4q = totalFrames_ztiong4q;\n\nexport default function TemplateScene() {\n  window.RemotionGoogleFonts?.loadFont?.(\"Inter\", { weights: [\"600\",\"500\",\"400\"] });\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  const seg = (t) => sequences_ztiong4q.find(s => s.type === t);\n  const inRange = (t) => frame >= seg(t).start && frame < seg(t).end;\n  const progress = (t) => interpolate(frame, [seg(t).start, seg(t).end], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" });\n\n  // Window entrance\n  const winScale = spring({ frame: frame - seg(\"window-in\").start, fps, config: { damping: 200, stiffness: 180 } });\n  const winY = interpolate(winScale, [0, 1], [40, 0]);\n\n  // Panel stagger (cards, chart, table)\n  const panelP = progress(\"panel-stagger\");\n  const card1 = spring({ frame: panelP * 30 - 0, fps, config: { damping: 200 } });\n  const card2 = spring({ frame: panelP * 30 - 6, fps, config: { damping: 200 } });\n  const card3 = spring({ frame: panelP * 30 - 12, fps, config: { damping: 200 } });\n  const chartIn = spring({ frame: panelP * 30 - 18, fps, config: { damping: 220 } });\n  const tableIn = spring({ frame: panelP * 30 - 22, fps, config: { damping: 220 } });\n\n  // Callout timings\n  const callP = progress(\"callouts\");\n  const pulse = 1 + 0.06 * Math.sin((frame - seg(\"callouts\").start) / (fps / Math.PI));\n  const callStep = Math.floor(callP * 3); // 0..3\n  const typingChars = Math.floor(interpolate(callP, [0.05, 0.35], [0, 34], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }));\n\n  // Outro CTA\n  const outroP = progress(\"cta-outro\");\n  const ctaUp = interpolate(outroP, [0, 1], [24, 0]);\n  const ctaOpacity = interpolate(outroP, [0, 0.2, 1], [0, 1, 1]);\n\n  return (\n    <AbsoluteFill style={{ background: \"linear-gradient(180deg, #0f172a, #0b1222)\" }}>\n      {/* Desktop window */}\n      <div\n        style={{\n          position: \"absolute\",\n          left: \"50%\",\n          top: \"50%\",\n          transform: `translate(-50%, -50%) translateY(${winY}px) scale(${winScale})`,\n          width: Math.min(width * 0.86, 1200) + \"px\",\n          height: Math.min(height * 0.78, 720) + \"px\",\n          borderRadius: \"16px\",\n          background: \"#0b1020\",\n          boxShadow: \"0 20px 80px rgba(0,0,0,0.45)\",\n          border: \"1px solid rgba(255,255,255,0.06)\",\n          overflow: \"hidden\"\n        }}\n      >\n        {/* Titlebar */}\n        <div style={{ height: \"56px\", background: \"rgba(255,255,255,0.04)\", display: \"flex\", alignItems: \"center\", padding: \"0 16px\", gap: \"10px\", borderBottom: \"1px solid rgba(255,255,255,0.06)\" }}>\n          <div style={{ display: \"flex\", gap: \"8px\" }}>\n            <div style={{ width: 12, height: 12, borderRadius: 6, background: \"#ff5f56\" }} />\n            <div style={{ width: 12, height: 12, borderRadius: 6, background: \"#ffbd2e\" }} />\n            <div style={{ width: 12, height: 12, borderRadius: 6, background: \"#27c93f\" }} />\n          </div>\n          <div style={{ marginLeft: 12, fontFamily: \"Inter\", fontSize: 14, color: \"rgba(255,255,255,0.7)\" }}>Acme Dashboard</div>\n        </div>\n\n        {/* Body */}\n        <div style={{ display: \"grid\", gridTemplateColumns: \"240px 1fr\", height: \"calc(100% - 56px)\" }}>\n          {/* Sidebar */}\n          <div style={{ padding: 16, borderRight: \"1px solid rgba(255,255,255,0.06)\", background: \"rgba(255,255,255,0.02)\" }}>\n            {Array.from({ length: 6 }).map((_, i) => {\n              const y = interpolate(i, [0, 5], [0, 10]);\n              const op = interpolate(i, [0, 5], [1, 0.6]);\n              return (\n                <div key={i} style={{ display: \"flex\", alignItems: \"center\", gap: 10, padding: \"10px 8px\", borderRadius: 8, marginBottom: 8, background: i === 0 ? \"rgba(74, 158, 255, 0.12)\" : \"transparent\", opacity: op }}>\n                  <div style={{ width: 22, height: 22, borderRadius: 6, background: \"rgba(255,255,255,0.12)\" }} />\n                  <div style={{ height: 8, width: 120 + i * 6 + \"px\", borderRadius: 4, background: \"rgba(255,255,255,0.18)\", transform: `translateY(${y}px)` }} />\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Main */}\n          <div style={{ padding: 16 }}>\n            {/* Stat cards */}\n            <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(3, 1fr)\", gap: 12, marginBottom: 12 }}>\n              {/* Card 1 */}\n              <div style={{ height: 86, borderRadius: 12, background: \"rgba(255,255,255,0.04)\", transform: `scale(${card1})`, opacity: card1 }} />\n              {/* Card 2 */}\n              <div style={{ height: 86, borderRadius: 12, background: \"rgba(255,255,255,0.04)\", transform: `scale(${card2})`, opacity: card2 }} />\n              {/* Card 3 */}\n              <div style={{ height: 86, borderRadius: 12, background: \"rgba(255,255,255,0.04)\", transform: `scale(${card3})`, opacity: card3 }} />\n            </div>\n\n            {/* Chart */}\n            <div style={{ height: 230, borderRadius: 14, background: \"rgba(255,255,255,0.04)\", overflow: \"hidden\", position: \"relative\", transform: `translateY(${(1-chartIn)*20}px)`, opacity: chartIn }}>\n              {/* Fake bars */}\n              <div style={{ position: \"absolute\", left: 14, right: 14, bottom: 14, display: \"flex\", gap: 10, alignItems: \"flex-end\" }}>\n                {Array.from({ length: 14 }).map((_, i) => {\n                  const h = 20 + Math.sin(i * 0.7) * 30 + (i%3)*10;\n                  const p = interpolate(frame, [seg(\"panel-stagger\").end, seg(\"callouts\").start + 30], [0.2, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" });\n                  return <div key={i} style={{ width: 16, height: `${Math.max(4, h*p)}px`, borderRadius: 6, background: \"rgba(74,158,255,0.6)\" }} />;\n                })}\n              </div>\n            </div>\n\n            {/* Table */}\n            <div style={{ marginTop: 12, borderRadius: 12, border: \"1px solid rgba(255,255,255,0.06)\", overflow: \"hidden\", transform: `translateY(${(1-tableIn)*20}px)`, opacity: tableIn }}>\n              <div style={{ background: \"rgba(255,255,255,0.04)\", display: \"grid\", gridTemplateColumns: \"1fr 1fr 1fr 80px\", gap: 8, padding: \"10px 12px\", fontFamily: \"Inter\", fontSize: 12, color: \"rgba(255,255,255,0.7)\" }}>\n                <div>Customer</div><div>Plan</div><div>Status</div><div>MRR</div>\n              </div>\n              {Array.from({ length: 5 }).map((_, i) => (\n                <div key={i} style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr 1fr 80px\", gap: 8, padding: \"12px 12px\", borderTop: \"1px solid rgba(255,255,255,0.06)\", background: i%2? \"rgba(255,255,255,0.02)\":\"transparent\" }}>\n                  <div style={{ display: \"flex\", gap: 8, alignItems: \"center\" }}>\n                    <div style={{ width: 24, height: 24, borderRadius: 6, background: \"rgba(255,255,255,0.12)\" }} />\n                    <div style={{ height: 8, width: 120, borderRadius: 4, background: \"rgba(255,255,255,0.18)\" }} />\n                  </div>\n                  <div style={{ height: 8, width: 80, borderRadius: 4, background: \"rgba(255,255,255,0.18)\" }} />\n                  <div style={{ height: 8, width: 70, borderRadius: 4, background: \"rgba(74,158,255,0.5)\" }} />\n                  <div style={{ height: 8, width: 60, borderRadius: 4, background: \"rgba(255,255,255,0.18)\" }} />\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Callouts */}\n        {inRange(\"callouts\") && (\n          <>\n            {/* highlight #1: Chart */}\n            <div style={{ position: \"absolute\", left: \"50%\", top: 56 + 86 + 16 + 115 + \"px\", transform: \"translateX(-10%)\", pointerEvents: \"none\" }}>\n              <div style={{ position: \"absolute\", left: -40, top: -60, width: 140, height: 140, borderRadius: 80, outline: \"2px solid rgba(74,158,255,0.9)\", transform: `scale(${callStep === 0 ? pulse : 0.7})`, opacity: callStep >= 0 ? 1 : 0 }} />\n              <div style={{ marginLeft: 120, marginTop: -18, padding: \"10px 12px\", background: \"#0a1530\", border: \"1px solid rgba(74,158,255,0.4)\", borderRadius: 10, maxWidth: 300, boxShadow: \"0 10px 30px rgba(0,0,0,0.3)\" }}>\n                <div style={{ fontFamily: \"Inter\", fontSize: 12, color: \"rgba(255,255,255,0.8)\" }}>\n                  Boost adoption with <b style={{ color: \"white\" }}>animated callouts</b> that guide the eye.\n                </div>\n              </div>\n            </div>\n\n            {/* highlight #2: First stat card */}\n            <div style={{ position: \"absolute\", left: \"50%\", top: 56 + 16 + 44 + \"px\", transform: \"translateX(-45%)\", pointerEvents: \"none\" }}>\n              <div style={{ position: \"absolute\", left: -30, top: -20, width: 100, height: 100, borderRadius: 60, outline: \"2px solid rgba(74,158,255,0.9)\", transform: `scale(${callStep === 1 ? pulse : 0.7})` }} />\n              <div style={{ marginLeft: 90, marginTop: -8, padding: \"10px 12px\", background: \"#0a1530\", border: \"1px solid rgba(74,158,255,0.4)\", borderRadius: 10 }}>\n                <div style={{ fontFamily: \"Inter\", fontSize: 12, color: \"rgba(255,255,255,0.8)\" }}>\n                  Micro motion makes metrics <b style={{ color: \"white\" }}>feel alive</b>.\n                </div>\n              </div>\n            </div>\n\n            {/* highlight #3: Table */}\n            <div style={{ position: \"absolute\", right: 24, bottom: 24, pointerEvents: \"none\" }}>\n              <div style={{ padding: \"12px 14px\", background: \"#0a1530\", border: \"1px solid rgba(74,158,255,0.4)\", borderRadius: 10, minWidth: 260 }}>\n                <div style={{ fontFamily: \"Inter\", fontSize: 12, color: \"rgba(255,255,255,0.85)\", whiteSpace: \"pre\" }}>\n                  {\n                    const text = \"Tip: Highlight the path to value →\";\n                    return text.slice(0, typingChars);\n                  }\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* Outro CTA */}\n        {inRange(\"cta-outro\") && (\n          <div style={{ position: \"absolute\", left: \"50%\", bottom: 24, transform: `translateX(-50%) translateY(${ctaUp}px)`, opacity: ctaOpacity }}>\n            <div style={{ padding: \"12px 16px\", borderRadius: 999, background: \"rgba(74,158,255,0.2)\", border: \"1px solid rgba(74,158,255,0.5)\", fontFamily: \"Inter\", fontSize: 14, color: \"white\" }}>\n              Get started — it takes 90 seconds\n            </div>\n          </div>\n        )}\n\n      </div>\n    </AbsoluteFill>\n  );\n}\n"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TS...nly. Start with imports/const declarations and never add prose."},{"role":"user","content":"Command palette search reveal"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig } = window.Remotion;\n\nconst script_6h42e9ro = [\n  { type: \"overlay-in\", frames: 12 },\n  { type: \"palette-in\", frames: 18 },\n  { type: \"typing\", frames: 72 },\n  { type: \"result-highlight\", frames: 36 }\n];\n\nconst sequences_6h42e9ro = [];\nlet accumulatedFrames_6h42e9ro = 0;\n\nscript_6h42e9ro.forEach((segment) => {\n  sequences_6h42e9ro.push({\n    ...segment,\n    start: accumulatedFrames_6h42e9ro,\n    end: accumulatedFrames_6h42e9ro + segment.frames\n  });\n  accumulatedFrames_6h42e9ro += segment.frames;\n});\n\nconst totalFrames_6h42e9ro = script_6h42e9ro.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_6h42e9ro = totalFrames_6h42e9ro;\n\nexport default function TemplateScene() {\n  window.RemotionGoogleFonts?.loadFont?.(\"Inter\", { weights: [\"700\",\"600\",\"500\"] });\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  const seg = (t) => sequences_6h42e9ro.find(s => s.type === t);\n  const p = (t) => interpolate(frame, [seg(t).start, seg(t).end], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" });\n\n  const overlayOpacity = interpolate(p(\"overlay-in\"), [0, 1], [0, 0.55]);\n  const paletteScale = spring({ frame: frame - seg(\"palette-in\").start, fps, config: { damping: 200, stiffness: 220 } });\n  const paletteY = interpolate(paletteScale, [0, 1], [20, 0]);\n\n  const typingP = p(\"typing\");\n  const placeholder = \"Search commands...\";\n  const query = \"invite teammate\";\n  const typed = query.slice(0, Math.floor(interpolate(typingP, [0.05, 0.85], [0, query.length])));\n  const caretBlink = Math.floor(frame / (fps / 2)) % 2;\n\n  const rows = [\n    { icon: \"ph:user-plus-bold\", label: \"Invite teammate\", shortcut: \"↩︎\" },\n    { icon: \"ph:link-bold\", label: \"Copy project link\", shortcut: \"⌘C\" },\n    { icon: \"ph:question-bold\", label: \"Open help\", shortcut: \"?\" },\n    { icon: \"ph:gear-six-bold\", label: \"Workspace settings\", shortcut: \"\" }\n  ];\n\n  const activeIndex = Math.min(1 + Math.floor(interpolate(typingP, [0.5, 1], [0, 1.9])), rows.length - 1);\n  const highlightY = interpolate(activeIndex, [0, 3], [0, 3]) * 52;\n\n  return (\n    <AbsoluteFill style={{ background: \"linear-gradient(180deg, #0b1222, #050912)\" }}>\n      {/* Dim overlay */}\n      <div style={{ position: \"absolute\", inset: 0, background: \"rgba(0,0,0,0.8)\", opacity: overlayOpacity }} />\n\n      {/* Key hint */}\n      <div style={{ position: \"absolute\", left: 24, top: 24, padding: \"8px 10px\", borderRadius: 999, background: \"rgba(255,255,255,0.08)\", fontFamily: \"Inter\", fontSize: 12, color: \"rgba(255,255,255,0.8)\", border: \"1px solid rgba(255,255,255,0.12)\" }}>\n        Press ⌘K\n      </div>\n\n      {/* Palette */}\n      <div\n        style={{\n          position: \"absolute\",\n          left: \"50%\",\n          top: \"30%\",\n          transform: `translate(-50%, -50%) translateY(${paletteY}px) scale(${paletteScale})`,\n          width: Math.min(width*0.7, 760) + \"px\",\n          borderRadius: 16,\n          background: \"#0c152e\",\n          border: \"1px solid rgba(74,158,255,0.4)\",\n          boxShadow: \"0 30px 120px rgba(0,0,0,0.5)\",\n          overflow: \"hidden\"\n        }}\n      >\n        {/* Input */}\n        <div style={{ display: \"flex\", alignItems: \"center\", gap: 12, padding: \"14px 16px\", borderBottom: \"1px solid rgba(255,255,255,0.06)\" }}>\n          <window.IconifyIcon icon=\"ph:magnifying-glass-bold\" style={{ fontSize: 18, color: \"rgba(255,255,255,0.8)\" }} />\n          <div style={{ fontFamily: \"Inter\", fontSize: 16, color: \"white\" }}>\n            {typed.length ? typed : <span style={{ color: \"rgba(255,255,255,0.45)\" }}>{placeholder}</span>}\n            <span style={{ opacity: caretBlink ? 0 : 1 }}>|</span>\n          </div>\n        </div>\n\n        {/* Results */}\n        <div style={{ position: \"relative\" }}>\n          {/* highlight */}\n          <div style={{\n            position: \"absolute\",\n            left: 8,\n            right: 8,\n            top: 8 + highlightY + \"px\",\n            height: 44,\n            borderRadius: 12,\n            background: \"rgba(74,158,255,0.15)\",\n            border: \"1px solid rgba(74,158,255,0.45)\",\n            boxShadow: \"0 6px 22px rgba(74,158,255,0.25)\",\n            transition: \"top 0.2s\"\n          }} />\n\n          {rows.map((r, i) => {\n            const y = 8 + i*52;\n            const op = interpolate(typingP, [0, 0.25 + i*0.06], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" });\n            return (\n              <div key={i} style={{ position: \"relative\", display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", padding: \"10px 12px 10px 14px\", margin: \"4px 8px\", borderRadius: 12, opacity: op }}>\n                <div style={{ display: \"flex\", alignItems: \"center\", gap: 12 }}>\n                  <div style={{ width: 28, height: 28, borderRadius: 8, background: \"rgba(255,255,255,0.1)\", display: \"grid\", placeItems: \"center\" }}>\n                    <window.IconifyIcon icon={r.icon} style={{ fontSize: 16, color: \"rgba(255,255,255,0.9)\" }} />\n                  </div>\n                  <div style={{ fontFamily: \"Inter\", fontSize: 14, color: \"rgba(255,255,255,0.92)\" }}>{r.label}</div>\n                </div>\n                <div style={{ fontFamily: \"Inter\", fontSize: 12, color: \"rgba(255,255,255,0.6)\" }}>{r.shortcut}</div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Result hint */}\n      <Sequence from={sequences_6h42e9ro.find(s=>s.type===\"result-highlight\").start} durationInFrames={sequences_6h42e9ro.find(s=>s.type===\"result-highlight\").frames}>\n        <div style={{ position: \"absolute\", left: \"50%\", top: \"72%\", transform: \"translateX(-50%)\", fontFamily: \"Inter\", fontSize: 14, color: \"rgba(255,255,255,0.75)\" }}>\n          Hit <b style={{ color: \"white\" }}>Enter</b> to invite\n        </div>\n      </Sequence>\n    </AbsoluteFill>\n  );\n}\n"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TS...nly. Start with imports/const declarations and never add prose."},{"role":"user","content":"Mobile quick actions bottom sheet"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig } = window.Remotion;\n\nconst script_nj95kf6a = [\n  { type: \"device-in\", frames: 18 },\n  { type: \"sheet-up\", frames: 36 },\n  { type: \"icons-bounce\", frames: 48 },\n  { type: \"select\", frames: 36 }\n];\n\nconst sequences_nj95kf6a = [];\nlet accumulatedFrames_nj95kf6a = 0;\n\nscript_nj95kf6a.forEach((segment) => {\n  sequences_nj95kf6a.push({\n    ...segment,\n    start: accumulatedFrames_nj95kf6a,\n    end: accumulatedFrames_nj95kf6a + segment.frames\n  });\n  accumulatedFrames_nj95kf6a += segment.frames;\n});\n\nconst totalFrames_nj95kf6a = script_nj95kf6a.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_nj95kf6a = totalFrames_nj95kf6a;\n\nexport default function TemplateScene() {\n  window.RemotionGoogleFonts?.loadFont?.(\"Inter\", { weights: [\"700\",\"600\",\"500\"] });\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  const seg = (t) => sequences_nj95kf6a.find(s => s.type === t);\n  const within = (t) => frame >= seg(t).start && frame < seg(t).end;\n  const prog = (t) => interpolate(frame, [seg(t).start, seg(t).end], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" });\n\n  // Phone frame\n  const phoneScale = spring({ frame: frame - seg(\"device-in\").start, fps, config: { damping: 210, stiffness: 190 } });\n  const phoneY = interpolate(phoneScale, [0,1], [30,0]);\n\n  // Sheet\n  const sheetP = prog(\"sheet-up\");\n  const sheetY = interpolate(sheetP, [0,1], [280, 0]);\n  const backdrop = interpolate(sheetP, [0,1], [0, 0.35]);\n\n  const icons = [\n    { icon: \"ph:paper-plane-tilt-bold\", label: \"Share\" },\n    { icon: \"ph:bookmark-simple-bold\", label: \"Save\" },\n    { icon: \"ph:pencil-simple-line-bold\", label: \"Edit\" },\n    { icon: \"ph:trash-bold\", label: \"Delete\" }\n  ];\n\n  const selectedIndex = within(\"select\") ? 2 : -1;\n  const bounce = (i) => 1 + 0.08 * Math.sin(((frame - seg(\"icons-bounce\").start)/fps) * Math.PI*2 + i*0.7);\n\n  return (\n    <AbsoluteFill style={{ background: \"linear-gradient(180deg, #03060f, #0b1222)\" }}>\n      {/* Phone */}\n      <div\n        style={{\n          position: \"absolute\",\n          left: \"50%\",\n          top: \"50%\",\n          transform: `translate(-50%, -50%) translateY(${phoneY}px) scale(${phoneScale})`,\n          width: 360,\n          height: 740,\n          borderRadius: 36,\n          boxShadow: \"0 30px 120px rgba(0,0,0,0.6)\",\n          background: \"#0e152e\",\n          border: \"1px solid rgba(255,255,255,0.08)\",\n          overflow: \"hidden\"\n        }}\n      >\n        {/* App header */}\n        <div style={{ height: 54, display: \"flex\", alignItems: \"center\", justifyContent: \"center\", fontFamily: \"Inter\", fontSize: 14, color: \"rgba(255,255,255,0.85)\", borderBottom: \"1px solid rgba(255,255,255,0.06)\", background: \"rgba(255,255,255,0.02)\" }}>\n          Project Aurora\n        </div>\n\n        {/* Content */}\n        <div style={{ padding: 16 }}>\n          {Array.from({ length: 4 }).map((_, i) => (\n            <div key={i} style={{ height: 72, borderRadius: 16, background: \"rgba(255,255,255,0.04)\", marginBottom: 10, border: \"1px solid rgba(255,255,255,0.06)\" }} />\n          ))}\n        </div>\n\n        {/* Backdrop */}\n        <div style={{ position: \"absolute\", inset: 0, background: \"black\", opacity: backdrop, transition: \"opacity 0.2s\" }} />\n\n        {/* Bottom sheet */}\n        <div style={{ position: \"absolute\", left: 0, right: 0, bottom: 0, transform: `translateY(${sheetY}px)`, background: \"#0b1532\", borderTopLeftRadius: 24, borderTopRightRadius: 24, borderTop: \"1px solid rgba(255,255,255,0.08)\", padding: \"14px 16px 26px\" }}>\n          <div style={{ width: 44, height: 5, borderRadius: 5, background: \"rgba(255,255,255,0.2)\", margin: \"0 auto 12px\" }} />\n          <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(4, 1fr)\", gap: 12 }}>\n            {icons.map((it, i) => {\n              const s = bounce(i);\n              const active = i === selectedIndex;\n              return (\n                <div key={i} style={{ textAlign: \"center\", transform: `scale(${s})` }}>\n                  <div style={{\n                    width: 66, height: 66, borderRadius: 18, margin: \"0 auto 8px\",\n                    background: active ? \"rgba(74,158,255,0.15)\" : \"rgba(255,255,255,0.06)\",\n                    border: `1px solid ${active ? \"rgba(74,158,255,0.5)\" : \"rgba(255,255,255,0.08)\"}`,\n                    display: \"grid\", placeItems: \"center\",\n                    boxShadow: active ? \"0 10px 30px rgba(74,158,255,0.35)\" : \"none\"\n                  }}>\n                    <window.IconifyIcon icon={it.icon} style={{ fontSize: 24, color: active ? \"white\" : \"rgba(255,255,255,0.9)\" }} />\n                  </div>\n                  <div style={{ fontFamily: \"Inter\", fontSize: 12, color: \"rgba(255,255,255,0.85)\" }}>{it.label}</div>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Confirmation */}\n          <Sequence from={sequences_nj95kf6a.find(s=>s.type===\"select\").start} durationInFrames={sequences_nj95kf6a.find(s=>s.type===\"select\").frames}>\n            <div style={{ marginTop: 14, padding: \"10px 12px\", borderRadius: 12, background: \"rgba(74,158,255,0.15)\", border: \"1px solid rgba(74,158,255,0.45)\", fontFamily: \"Inter\", fontSize: 12, color: \"white\", textAlign: \"center\" }}>\n              Editing enabled\n            </div>\n          </Sequence>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n}\n"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TS...nly. Start with imports/const declarations and never add prose."},{"role":"user","content":"Code editor diff review"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig } = window.Remotion;\n\nconst script_alh4i2ps = [\n  { type: \"editor-in\", frames: 18 },\n  { type: \"lines-reveal\", frames: 36 },\n  { type: \"diff-highlight\", frames: 72 },\n  { type: \"cursor-move\", frames: 36 }\n];\n\nconst sequences_alh4i2ps = [];\nlet accumulatedFrames_alh4i2ps = 0;\n\nscript_alh4i2ps.forEach((segment) => {\n  sequences_alh4i2ps.push({\n    ...segment,\n    start: accumulatedFrames_alh4i2ps,\n    end: accumulatedFrames_alh4i2ps + segment.frames\n  });\n  accumulatedFrames_alh4i2ps += segment.frames;\n});\n\nconst totalFrames_alh4i2ps = script_alh4i2ps.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_alh4i2ps = totalFrames_alh4i2ps;\n\nexport default function TemplateScene() {\n  window.RemotionGoogleFonts?.loadFont?.(\"JetBrains Mono\", { weights: [\"600\",\"500\"] });\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  const seg = (t) => sequences_alh4i2ps.find(s => s.type === t);\n  const p = (t) => interpolate(frame, [seg(t).start, seg(t).end], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" });\n\n  const winScale = spring({ frame: frame - seg(\"editor-in\").start, fps, config: { damping: 220, stiffness: 190 } });\n  const winY = interpolate(winScale, [0,1], [30,0]);\n\n  const lines = [\n`export function getUser(id) {`,\n`  const cacheHit = cache.get(id);`,\n`  if (cacheHit) return cacheHit;`,\n`  const res = await fetch('/api/user/' + id);`,\n`  if (!res.ok) throw new Error('Request failed');`,\n`  const data = await res.json();`,\n`  cache.set(id, data);`,\n`  return data;`,\n`}`\n  ];\n\n  const reveal = p(\"lines-reveal\");\n  const shown = Math.floor(interpolate(reveal, [0.1, 1], [1, lines.length]));\n  const highlightP = p(\"diff-highlight\");\n\n  // diff segments: line 2 replaced, new line after 3\n  const addOpacity = interpolate(highlightP, [0.4, 1], [0, 1]);\n  const delOpacity = interpolate(highlightP, [0.1, 0.6], [0, 1]);\n\n  // Caret\n  const cursorP = p(\"cursor-move\");\n  const caretX = interpolate(cursorP, [0, 1], [18, 360]);\n  const caretBlink = Math.floor((frame - seg(\"cursor-move\").start) / (fps / 2)) % 2;\n\n  return (\n    <AbsoluteFill style={{ background: \"linear-gradient(180deg, #0b1222, #080f1e)\" }}>\n      {/* Editor window */}\n      <div style={{\n        position: \"absolute\",\n        left: \"50%\",\n        top: \"50%\",\n        transform: `translate(-50%, -50%) translateY(${winY}px) scale(${winScale})`,\n        width: Math.min(width*0.82, 1100) + \"px\",\n        height: Math.min(height*0.72, 620) + \"px\",\n        borderRadius: 16,\n        border: \"1px solid rgba(255,255,255,0.08)\",\n        background: \"#0a0f1e\",\n        boxShadow: \"0 20px 80px rgba(0,0,0,0.45)\",\n        overflow: \"hidden\"\n      }}>\n        {/* Tab bar */}\n        <div style={{ height: 44, display: \"flex\", alignItems: \"center\", gap: 12, padding: \"0 12px\", background: \"rgba(255,255,255,0.04)\", borderBottom: \"1px solid rgba(255,255,255,0.06)\", fontFamily: \"Inter\", fontSize: 12, color: \"rgba(255,255,255,0.75)\" }}>\n          <div style={{ display: \"flex\", gap: 8 }}>\n            <div style={{ width: 10, height: 10, borderRadius: 6, background: \"#ff5f56\" }} />\n            <div style={{ width: 10, height: 10, borderRadius: 6, background: \"#ffbd2e\" }} />\n            <div style={{ width: 10, height: 10, borderRadius: 6, background: \"#27c93f\" }} />\n          </div>\n          get-user.ts\n        </div>\n\n        {/* Gutter + code */}\n        <div style={{ display: \"grid\", gridTemplateColumns: \"56px 1fr\", height: \"calc(100% - 44px)\" }}>\n          {/* gutter */}\n          <div style={{ background: \"rgba(255,255,255,0.02)\", borderRight: \"1px solid rgba(255,255,255,0.06)\" }}>\n            {Array.from({ length: 20 }).map((_, i) => (\n              <div key={i} style={{ height: 26, padding: \"0 12px\", display: \"flex\", alignItems: \"center\", fontFamily: \"Inter\", fontSize: 12, color: \"rgba(255,255,255,0.35)\" }}>{i+1}</div>\n            ))}\n          </div>\n          {/* code */}\n          <div style={{ position: \"relative\", padding: \"12px 16px\", fontFamily: \"'JetBrains Mono', monospace\", fontSize: 14, color: \"rgba(255,255,255,0.92)\" }}>\n            {lines.slice(0, shown).map((line, i) => {\n              const y = 6 + i*26;\n              const lineOp = interpolate(reveal, [0, 0.2 + i*0.05], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" });\n              return <div key={i} style={{ position: \"absolute\", left: 16, top: y + \"px\", opacity: lineOp, whiteSpace: \"pre\" }}>{line}</div>;\n            })}\n\n            {/* deleted line highlight */}\n            <div style={{ position: \"absolute\", left: 12, right: 12, top: 6 + 1*26 + \"px\", height: 24, borderRadius: 6, background: \"rgba(255, 99, 132, 0.15)\", border: \"1px solid rgba(255,99,132,0.35)\", opacity: delOpacity }} />\n\n            {/* added line highlight */}\n            <div style={{ position: \"absolute\", left: 12, right: 12, top: 6 + 4*26 + \"px\", height: 24, borderRadius: 6, background: \"rgba(74, 222, 128, 0.15)\", border: \"1px solid rgba(74,222,128,0.45)\", opacity: addOpacity }} />\n\n            {/* caret */}\n            <Sequence from={sequences_alh4i2ps.find(s=>s.type===\"cursor-move\").start} durationInFrames={sequences_alh4i2ps.find(s=>s.type===\"cursor-move\").frames}>\n              <div style={{ position: \"absolute\", left: 56 + caretX + \"px\", top: 6 + 4*26 + \"px\", width: 2, height: 20, background: \"white\", opacity: caretBlink ? 0 : 1 }} />\n            </Sequence>\n          </div>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n}\n"}]}