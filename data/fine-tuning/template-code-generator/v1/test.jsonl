{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Need a landscape (1920Ã—1080) Remotion scene for dual mobile screen showcase for profile and messaging ui. Dual phone mockup animation showing profile and messaging screens with ambient gradients. This should work well for mobile app landing page, product tour, and portfolio showcase. Include phone frame, profile card, and messages. Animate with phone entrance, gradient drift, and content fade. Keep the style ambient, soft, and product. Palette should lean on pastel gradients, violet, and cyan. Keep it around 7 seconds (210 frames)."},{"role":"assistant","content":"const {\n  AbsoluteFill,\n  interpolate,\n  useCurrentFrame,\n  spring,\n  Img,\n} = window.Remotion;\n\nconst GradientCircle = ({ x, y, size, color1, color2, opacity, direction }) => {\n  const frame = useCurrentFrame();\n  \n  // Slow drifting motion\n  const driftX = Math.sin(frame / 180) * direction.x;\n  const driftY = Math.cos(frame / 180) * direction.y;\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        left: x + driftX,\n        top: y + driftY,\n        width: size,\n        height: size,\n        borderRadius: \"50%\",\n        background: `radial-gradient(circle at 30% 30%, ${color1}, ${color2})`,\n        opacity: 0.6 * opacity,\n        filter: \"blur(60px)\",\n        transition: \"all 0.5s ease-out\",\n      }}\n    />\n  );\n};\n\nconst PhoneFrame = ({ opacity, children, x }) => {\n  const frame = useCurrentFrame();\n  \n  const timeProgress = spring({\n    frame,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  return (\n    <div\n      style={{\n        width: \"375px\",\n        height: \"812px\",\n        background: \"white\",\n        borderRadius: \"32px\",\n        position: \"relative\",\n        overflow: \"hidden\",\n        opacity,\n        boxShadow: \"0 24px 48px rgba(0, 0, 0, 0.15)\",\n      }}\n    >\n      <div\n        style={{\n          height: \"44px\",\n          padding: \"0 24px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          background: \"white\",\n          position: \"relative\",\n          zIndex: 2,\n          opacity: timeProgress,\n          transform: `translateY(${interpolate(timeProgress, [0, 1], [20, 0])}px)`,\n        }}\n      >\n        <div style={{ \n          fontSize: \"17px\",\n          fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n          fontWeight: 700,\n        }}>\n          9:41\n        </div>\n        <div style={{ fontSize: \"17px\", display: \"flex\", alignItems: \"center\", gap: \"6px\" }}>\n          <window.IconifyIcon icon=\"material-symbols:signal-cellular-4-bar\" width=\"18\" height=\"18\" />\n          <window.IconifyIcon icon=\"material-symbols:wifi\" width=\"18\" height=\"18\" />\n          <window.IconifyIcon icon=\"material-symbols:battery-full\" width=\"24\" height=\"12\" />\n        </div>\n      </div>\n\n      {children}\n    </div>\n  );\n};\n\nconst ProfileScreen = ({ delay }) => {\n  const frame = useCurrentFrame();\n  \n  const progress = spring({\n    frame: frame - delay,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        background: \"#F8F9FA\",\n        padding: \"24px\",\n      }}\n    >\n      <div\n        style={{\n          opacity: progress,\n          transform: `translateY(${interpolate(progress, [0, 1], [20, 0])}px)`,\n        }}\n      >\n        <div\n          style={{\n            fontSize: \"34px\",\n            fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n            fontWeight: 700,\n            color: \"#1A1A1A\",\n            marginBottom: \"32px\",\n          }}\n        >\n          Profile\n        </div>\n\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            gap: \"16px\",\n            marginBottom: \"48px\",\n          }}\n        >\n          <Img\n            src={window.BazaarAvatars['asian-woman']}\n            style={{\n              width: \"120px\",\n              height: \"120px\",\n              borderRadius: \"60px\",\n              objectFit: \"cover\",\n            }}\n          />\n          <div\n            style={{\n              fontSize: \"24px\",\n              fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n              fontWeight: 700,\n              color: \"#1A1A1A\",\n            }}\n          >\n            Sarah Wilson\n          </div>\n          <div\n            style={{\n              fontSize: \"17px\",\n              fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n              color: \"#666666\",\n            }}\n          >\n            Product Designer\n          </div>\n        </div>\n      </div>\n\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: \"16px\",\n        }}\n      >\n        {[\n          { icon: \"material-symbols:settings\", label: \"Account Settings\" },\n          { icon: \"material-symbols:notifications\", label: \"Notifications\" },\n          { icon: \"material-symbols:lock\", label: \"Privacy & Security\" },\n          { icon: \"material-symbols:credit-card\", label: \"Payment Methods\" },\n          { icon: \"material-symbols:help\", label: \"Help & Support\" },\n        ].map((item, i) => (\n          <div\n            key={i}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"16px\",\n              padding: \"16px\",\n              background: \"white\",\n              borderRadius: \"12px\",\n              opacity: spring({\n                frame: frame - delay - 15 - i * 5,\n                fps: 30,\n                config: { damping: 12, stiffness: 200 },\n              }),\n              transform: `translateX(${interpolate(\n                spring({\n                  frame: frame - delay - 15 - i * 5,\n                  fps: 30,\n                  config: { damping: 12, stiffness: 200 },\n                }),\n                [0, 1],\n                [50, 0]\n              )}px)`,\n            }}\n          >\n            <window.IconifyIcon \n              icon={item.icon} \n              width=\"24\" \n              height=\"24\" \n              style={{ color: \"#4A90E2\" }}\n            />\n            <div\n              style={{\n                fontSize: \"17px\",\n                fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n                fontWeight: 500,\n                color: \"#1A1A1A\",\n              }}\n            >\n              {item.label}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst MessagesScreen = ({ delay }) => {\n  const frame = useCurrentFrame();\n  \n  const progress = spring({\n    frame: frame - delay,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  const avatars = [\n    window.BazaarAvatars['black-man'],\n    window.BazaarAvatars['hispanic-man'],\n    window.BazaarAvatars['middle-eastern-man'],\n    window.BazaarAvatars['white-woman'],\n    window.BazaarAvatars['asian-woman'],\n    window.BazaarAvatars['black-man']\n  ];\n\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        background: \"#F8F9FA\",\n        padding: \"24px\",\n      }}\n    >\n      <div\n        style={{\n          opacity: progress,\n          transform: `translateY(${interpolate(progress, [0, 1], [20, 0])}px)`,\n        }}\n      >\n        <div\n          style={{\n            fontSize: \"34px\",\n            fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n            fontWeight: 700,\n            color: \"#1A1A1A\",\n            marginBottom: \"32px\",\n          }}\n        >\n          Messages\n        </div>\n\n        <div\n          style={{\n            background: \"white\",\n            borderRadius: \"12px\",\n            padding: \"16px\",\n            marginBottom: \"32px\",\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"16px\",\n          }}\n        >\n          <window.IconifyIcon \n            icon=\"material-symbols:search\" \n            width=\"24\" \n            height=\"24\" \n            style={{ color: \"#666666\" }}\n          />\n          <div\n            style={{\n              fontSize: \"17px\",\n              fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n              color: \"#666666\",\n              flex: 1,\n            }}\n          >\n            Search messages...\n          </div>\n        </div>\n      </div>\n\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: \"16px\",\n        }}\n      >\n        {[\n          { name: \"Alex Johnson\", message: \"Hey, how's the project going?\", time: \"2m ago\" },\n          { name: \"Maria Garcia\", message: \"Can we meet tomorrow?\", time: \"1h ago\" },\n          { name: \"David Chen\", message: \"The design looks great!\", time: \"3h ago\" },\n          { name: \"Emma Wilson\", message: \"Thanks for the feedback\", time: \"1d ago\" },\n          { name: \"Sarah Kim\", message: \"Let's schedule a call\", time: \"2d ago\" },\n          { name: \"Mike Rodriguez\", message: \"Perfect! See you then\", time: \"3d ago\" },\n        ].map((conversation, i) => (\n          <div\n            key={i}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"16px\",\n              padding: \"16px\",\n              background: \"white\",\n              borderRadius: \"12px\",\n              opacity: spring({\n                frame: frame - delay - 20 - i * 5,\n                fps: 30,\n                config: { damping: 12, stiffness: 200 },\n              }),\n              transform: `translateX(${interpolate(\n                spring({\n                  frame: frame - delay - 20 - i * 5,\n                  fps: 30,\n                  config: { damping: 12, stiffness: 200 },\n                }),\n                [0, 1],\n                [50, 0]\n              )}px)`,\n            }}\n          >\n            <Img\n              src={avatars[i]}\n              style={{\n                width: \"48px\",\n                height: \"48px\",\n                borderRadius: \"24px\",\n                objectFit: \"cover\",\n              }}\n            />\n            <div style={{ flex: 1 }}>\n              <div\n                style={{\n                  fontSize: \"17px\",\n                  fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n                  fontWeight: 600,\n                  color: \"#1A1A1A\",\n                  marginBottom: \"4px\",\n                }}\n              >\n                {conversation.name}\n              </div>\n              <div\n                style={{\n                  fontSize: \"15px\",\n                  fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n                  color: \"#666666\",\n                }}\n              >\n                {conversation.message}\n              </div>\n            </div>\n            <div\n              style={{\n                fontSize: \"13px\",\n                fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n                color: \"#999999\",\n              }}\n            >\n              {conversation.time}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default function DualScreenApp() {\n  const frame = useCurrentFrame();\n  \n  const mainProgress = spring({\n    frame,\n    fps: 30,\n    config: {\n      damping: 20,\n      stiffness: 80,\n    },\n  });\n\n  const rightScreenProgress = spring({\n    frame,\n    fps: 30,\n    config: {\n      damping: 20,\n      stiffness: 80,\n    },\n  });\n\n  return (\n    <AbsoluteFill\n      style={{\n        background: \"#F8F9FA\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <GradientCircle\n        x={200}\n        y={200}\n        size={600}\n        color1=\"#4A90E2\"\n        color2=\"#45B7D1\"\n        opacity={mainProgress}\n        direction={{ x: 100, y: 50 }}\n      />\n      <GradientCircle\n        x={1400}\n        y={200}\n        size={600}\n        color1=\"#45B7D1\"\n        color2=\"#4A90E2\"\n        opacity={mainProgress}\n        direction={{ x: -80, y: 120 }}\n      />\n      <GradientCircle\n        x={800}\n        y={800}\n        size={600}\n        color1=\"#4A90E2\"\n        color2=\"#45B7D1\"\n        opacity={mainProgress}\n        direction={{ x: 60, y: -90 }}\n      />\n\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          gap: \"120px\",\n          position: \"relative\",\n          zIndex: 1,\n        }}\n      >\n        <PhoneFrame opacity={mainProgress} x={0}>\n          <ProfileScreen delay={15} />\n        </PhoneFrame>\n\n        <PhoneFrame opacity={rightScreenProgress} x={0}>\n          <MessagesScreen delay={15} />\n        </PhoneFrame>\n      </div>\n    </AbsoluteFill>\n  );\n}\n\nexport const durationInFrames_scene1 = 180;"}],"meta":{"templateId":"profile-message-screens","dbId":"0256d007-70e7-4104-9c16-0dd8bd70a6b1","duration":210,"supportedFormats":["landscape"],"promptVariant":"base"}}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Need a landscape (1920Ã—1080) Remotion scene for bold welcome animation for bazaar brand intro. Brand welcome animation introducing Bazaar with bold headlines. This should work well for company intro, product onboarding, and hero section. Include headline text, subheadline, and accent shapes. Animate with fade, scale, and accent lines. Keep the style bold, confident, and modern. Palette should lean on brand palette and purple. Keep it around 4 seconds (120 frames)."},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nexport default function DarkBGGradientText_me44v5an() {\n  window.RemotionGoogleFonts.loadFont(\"Inter\", { weights: [\"800\"] });\n  \n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  // Format detection for responsive sizing\n  const aspectRatio = width / height;\n  const isPortrait = aspectRatio < 1;\n  const isSquare = Math.abs(aspectRatio - 1) < 0.2;\n  \n  // Responsive font sizing\n  const baseFontSize = Math.min(width, height) * 0.12;\n  const fontSize = isPortrait ? baseFontSize * 0.8 : isSquare ? baseFontSize * 0.9 : baseFontSize;\n  \n  const gradientPosition = interpolate(\n    frame,\n    [0, fps * 3],\n    [-200, 200],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n  \n  const textScale = interpolate(\n    frame,\n    [0, 8],\n    [0.8, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n  \n  // Split text into words for individual animation\n  const words = \"Welcome to Bazaar\".split(\" \");\n  \n  return (\n    <AbsoluteFill\n      style={{\n        background: \"black\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        padding: \"40px\"\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${textScale})`,\n          fontSize: `${fontSize}px`,\n          fontFamily: \"Inter\",\n          fontWeight: \"800\",\n          textAlign: \"center\",\n          whiteSpace: isPortrait ? \"normal\" : \"nowrap\",\n          display: \"flex\",\n          gap: \"0.3em\",\n          flexDirection: isPortrait ? \"column\" : \"row\",\n          lineHeight: 1.1\n        }}\n      >\n        {words.map((word, index) => {\n          // Stagger each word by 8 frames (faster)\n          const wordStartFrame = index * 8;\n          const wordEndFrame = wordStartFrame + 15;\n          \n          // Slide up animation for each word\n          const wordY = interpolate(\n            frame,\n            [wordStartFrame, wordEndFrame],\n            [100, 0],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\"\n            }\n          );\n          \n          // Opacity animation for each word\n          const wordOpacity = interpolate(\n            frame,\n            [wordStartFrame, wordEndFrame],\n            [0, 1],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\"\n            }\n          );\n          \n          return (\n            <div\n              key={index}\n              style={{\n                position: \"relative\",\n                transform: `translateY(${wordY}px)`,\n                opacity: wordOpacity\n              }}\n            >\n              <div\n                style={{\n                  color: index < 2 ? \"white\" : \"transparent\",\n                  userSelect: \"none\"\n                }}\n              >\n                {word}\n              </div>\n              \n              {index === 2 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"0\",\n                    left: \"0\",\n                    width: \"100%\",\n                    height: \"100%\",\n                    background: `linear-gradient(90deg, #ff5f6d 0%, #ffc371 25%, #a18cd1 50%, #fbc2eb 75%, #ff5f6d 100%)`,\n                    backgroundPosition: `${gradientPosition}px 0`,\n                    backgroundSize: \"400px 100%\",\n                    backgroundRepeat: \"repeat-x\",\n                    backgroundClip: \"text\",\n                    WebkitBackgroundClip: \"text\",\n                    color: \"transparent\",\n                    WebkitTextFillColor: \"transparent\"\n                  }}\n                >\n                  {word}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </AbsoluteFill>\n  );\n}\n\nexport const durationInFrames_me44v5an = 120;"}],"meta":{"templateId":"welcome-to-bazaar","dbId":"7174c9ea-4240-479a-a0f9-36e65f64681a","duration":120,"supportedFormats":["landscape"],"promptVariant":"base"}}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Need a landscape (1920Ã—1080) Remotion scene for analytics card with animated bar chart and kpi number. Analytics card with animated bar heights, key metric, and mini chart annotations. This should work well for product analytics section, KPI dashboard, and investor report. Include bars, labels, primary metric, and icon. Animate with bar grow, number counter, and fade in. Keep the style modern, clean, and professional. Palette should lean on brand accent and neutral. Keep it around 4 seconds (120 frames)."},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Img } = window.Remotion;\n\n// Auto-generated defaults for undefined variables\nconst padding = 16;\nconst gap = 12;\n\nconst TemplateScene = () => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Card entrance animation\n  const cardScale = spring({ frame, fps,\n    config: {\n      damping: 12,\n      stiffness: 100,\n      mass: 0.5,\n    },\n  });\n\n  const cardOpacity = interpolate(frame, [0, 20], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // All elements animate simultaneously from frame 20-80\n  const elementsProgress = interpolate(frame, [20, 80], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // Main number animation - starts with other elements\n  const animatedNumber = Math.floor(56 * elementsProgress);\n\n  // NEW APPROACH: Direct height interpolation for bars growing from bottom\n  const maxBarHeight = 180; // Maximum height in pixels\n  \n  const bar1Height = interpolate(frame, [30, 70], [0, 47 * maxBarHeight / 100], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const bar2Height = interpolate(frame, [35, 75], [0, 98 * maxBarHeight / 100], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const bar3Height = interpolate(frame, [40, 80], [0, 69 * maxBarHeight / 100], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const bar4Height = interpolate(frame, [45, 85], [0, 84 * maxBarHeight / 100], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const bar5Height = interpolate(frame, [50, 90], [0, 56 * maxBarHeight / 100], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const bar6Height = interpolate(frame, [55, 95], [0, 77 * maxBarHeight / 100], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // Button animation - also starts with other elements\n  const buttonOpacity = interpolate(frame, [20, 80], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const buttonScale = spring({\n    frame: frame - 20,\n    fps,\n    config: {\n      damping: 10,\n      stiffness: 200,\n    },\n  });\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#e5e5e5\" }}>\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${cardScale})`,\n          opacity: cardOpacity,\n          width: \"600px\",\n          height: \"650px\",\n          backgroundColor: \"#f4e976\",\n          borderRadius: \"24px\",\n          padding: \"60px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          fontFamily: \"Inter\",\n        }}\n      >\n        {/* Header */}\n        <div\n          style={{\n            fontSize: \"18px\",\n            fontWeight: \"600\",\n            color: \"#4a4a4a\",\n            marginBottom: \"20px\",\n            letterSpacing: \"1px\",\n          }}\n        >\n          ENGAGEMENT\n        </div>\n\n        {/* Main Number */}\n        <div\n          style={{\n            fontSize: \"72px\",\n            fontWeight: \"800\",\n            color: \"#2d2d2d\",\n            marginBottom: \"60px\",\n            lineHeight: \"1\",\n          }}\n        >\n          +{animatedNumber}%\n        </div>\n\n        {/* Chart Container - NEW APPROACH */}\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            height: `${maxBarHeight}px`,\n            marginBottom: \"60px\",\n            gap: \"8px\",\n            position: \"relative\",\n          }}\n        >\n          {/* Bar 1 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${bar1Height}px`,\n                backgroundColor: \"#3d3d3d\",\n                borderRadius: \"4px 4px 0 0\",\n                transition: \"height 0.3s ease-out\",\n              }}\n            >\n              {bar1Height > 60 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>47%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 2 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${bar2Height}px`,\n                backgroundColor: \"#6b6b3d\",\n                borderRadius: \"4px 4px 0 0\",\n                transition: \"height 0.3s ease-out\",\n              }}\n            >\n              {bar2Height > 140 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>98%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 3 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${bar3Height}px`,\n                backgroundColor: \"#8b8b5d\",\n                borderRadius: \"4px 4px 0 0\",\n                transition: \"height 0.3s ease-out\",\n              }}\n            >\n              {bar3Height > 90 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>69%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 4 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${bar4Height}px`,\n                backgroundColor: \"#abab7d\",\n                borderRadius: \"4px 4px 0 0\",\n                transition: \"height 0.3s ease-out\",\n              }}\n            >\n              {bar4Height > 120 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>84%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 5 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${bar5Height}px`,\n                backgroundColor: \"#cbcb9d\",\n                borderRadius: \"4px 4px 0 0\",\n                transition: \"height 0.3s ease-out\",\n              }}\n            >\n              {bar5Height > 70 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>56%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 6 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${bar6Height}px`,\n                backgroundColor: \"#ebebbd\",\n                borderRadius: \"4px 4px 0 0\",\n                transition: \"height 0.3s ease-out\",\n              }}\n            >\n              {bar6Height > 100 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>77%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Button */}\n        <div\n          style={{\n            opacity: buttonOpacity,\n            transform: `scale(${buttonScale})`,\n            alignSelf: \"flex-start\",\n          }}\n        >\n          <div\n            style={{\n              backgroundColor: \"#2d2d2d\",\n              color: \"white\",\n              padding: \"16px 32px\",\n              borderRadius: \"24px\",\n              fontSize: \"14px\",\n              fontWeight: \"600\",\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"8px\",\n            }}\n          >\n            <div\n              style={{\n                width: \"8px\",\n                height: \"8px\",\n                backgroundColor: \"white\",\n                borderRadius: \"50%\",\n              }}\n            />\n            SEE MORE INSIGHTS\n          </div>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n};\n\nexport const durationInFrames_A7B9C2E1 = 120;\nexport default TemplateScene;"}],"meta":{"templateId":"bar-chart-db","dbId":"9ccb415b-0396-4a57-b649-169a90b5d83f","duration":120,"supportedFormats":["landscape"],"promptVariant":"base"}}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Responsive text animation in landscape (1920Ã—1080). Leaning into a clean and minimal look. Make sure we show headline text and subheadline. Use stagger and scale for motion. Target duration: 1 seconds (30 frames)."},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, interpolate } = window.Remotion;\n\nconst script_mf165pbn = [\n  { text: \"My name is Jeff\", frames: 30 }\n];\n\nconst sequences_mf165pbn = [];\nlet accumulatedFrames_mf165pbn = 0;\n\nscript_mf165pbn.forEach((item, index) => {\n  sequences_mf165pbn.push({\n    start: accumulatedFrames_mf165pbn,\n    duration: item.frames,\n    text: item.text\n  });\n  accumulatedFrames_mf165pbn += item.frames;\n});\n\nconst totalFrames_mf165pbn = script_mf165pbn.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_mf165pbn = totalFrames_mf165pbn;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  \n  const words = [\"My\", \"name\", \"is\", \"Jeff\"];\n  const animationFrames = 4; // Faster animation per word\n  const pauseFrames = 10; // Pause on final word\n  const totalAnimationTime = 30 - pauseFrames; // 20 frames for all animations\n  const framesPerWord = totalAnimationTime / words.length; // 5 frames per word\n  \n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: \"white\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        gap: \"20px\"\n      }}\n    >\n      {words.map((word, index) => {\n        const startFrame = index * framesPerWord;\n        const endFrame = startFrame + animationFrames;\n        \n        const opacity = interpolate(\n          frame,\n          [startFrame, endFrame],\n          [0, 1],\n          {\n            extrapolateLeft: \"clamp\",\n            extrapolateRight: \"clamp\"\n          }\n        );\n        \n        const translateY = interpolate(\n          frame,\n          [startFrame, endFrame],\n          [30, 0],\n          {\n            extrapolateLeft: \"clamp\",\n            extrapolateRight: \"clamp\"\n          }\n        );\n        \n        return (\n          <div\n            key={index}\n            style={{\n              fontSize: \"80px\",\n              fontFamily: \"Inter\",\n              fontWeight: \"700\",\n              color: \"black\",\n              opacity: opacity,\n              transform: `translateY(${translateY}px)`,\n            }}\n          >\n            {word}\n          </div>\n        );\n      })}\n    </AbsoluteFill>\n  );\n}"}],"meta":{"templateId":"text-animation-db","dbId":"00404900-c51c-401a-a36e-ae3234deb4d4","duration":30,"supportedFormats":["landscape","portrait","square"],"promptVariant":"phrase-1"}}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Need a landscape (1920Ã—1080) Remotion scene for sparkling text animation with glittering particle trails. Headline text with animated sparkles dancing across the letters. This should work well for event promo, holiday greeting, and celebration intro. Include headline text and sparkle particles. Animate with particle sparkle, trail, and fade. Keep the style magical, playful, and elegant. Palette should lean on gold and white. Keep it around 3.6 seconds (108 frames)."},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_A8B9C2D1 = [\n  { type: \"sparkleText\", text: \"Sparkles\", frames: 120 }\n];\n\nlet accumulatedFrames_A8B9C2D1 = 0;\nconst sequences_A8B9C2D1 = [];\n\nscript_A8B9C2D1.forEach((item, index) => {\n  sequences_A8B9C2D1.push({\n    ...item,\n    start: accumulatedFrames_A8B9C2D1,\n    end: accumulatedFrames_A8B9C2D1 + item.frames\n  });\n  accumulatedFrames_A8B9C2D1 += item.frames;\n});\n\nconst totalFrames_A8B9C2D1 = script_A8B9C2D1.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_A8B9C2D1 = totalFrames_A8B9C2D1;\n\nconst Sparkle = ({ x, y, color, delay, scale, frame, fps }) => {\n  const sparkleProgress = spring({\n    frame: frame - delay,\n    fps,\n    config: { damping: 15, stiffness: 200 }\n  });\n\n  const opacity = interpolate(\n    frame - delay,\n    [0, 15, 45, 60],\n    [0, 1, 1, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const sparkleScale = interpolate(\n    sparkleProgress,\n    [0, 1],\n    [0, scale * 2],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const rotation = interpolate(\n    frame - delay,\n    [0, 60],\n    [75, 225],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        left: x,\n        top: y,\n        opacity,\n        transform: `scale(${sparkleScale}) rotate(${rotation}deg)`,\n        pointerEvents: \"none\",\n        zIndex: 20\n      }}\n    >\n      <svg width=\"28\" height=\"28\" viewBox=\"0 0 21 21\">\n        <path\n          d=\"M9.82531 0.843845C10.0553 0.215178 10.9446 0.215178 11.1746 0.843845L11.8618 2.72026C12.4006 4.19229 12.3916 6.39157 13.5 7.5C14.6084 8.60843 16.8077 8.59935 18.2797 9.13822L20.1561 9.82534C20.7858 10.0553 20.7858 10.9447 20.1561 11.1747L18.2797 11.8618C16.8077 12.4007 14.6084 12.3916 13.5 13.5C12.3916 14.6084 12.4006 16.8077 11.8618 18.2798L11.1746 20.1562C10.9446 20.7858 10.0553 20.7858 9.82531 20.1562L9.13819 18.2798C8.59932 16.8077 8.60843 14.6084 7.5 13.5C6.39157 12.3916 4.19225 12.4007 2.72023 11.8618L0.843814 11.1747C0.215148 10.9447 0.215148 10.0553 0.843814 9.82534L2.72023 9.13822C4.19225 8.59935 6.39157 8.60843 7.5 7.5C8.60843 6.39157 8.59932 4.19229 9.13819 2.72026L9.82531 0.843845Z\"\n          fill={color}\n        />\n      </svg>\n    </div>\n  );\n};\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  const sparkles = [\n    { id: \"1\", x: \"20%\", y: \"30%\", color: \"#9E7AFF\", delay: 10, scale: 1.0 },\n    { id: \"2\", x: \"80%\", y: \"25%\", color: \"#FE8BBB\", delay: 20, scale: 1.5 },\n    { id: \"3\", x: \"25%\", y: \"70%\", color: \"#9E7AFF\", delay: 30, scale: 0.8 },\n    { id: \"4\", x: \"75%\", y: \"75%\", color: \"#FE8BBB\", delay: 15, scale: 1.2 },\n    { id: \"5\", x: \"50%\", y: \"20%\", color: \"#9E7AFF\", delay: 25, scale: 1.1 },\n    { id: \"6\", x: \"15%\", y: \"50%\", color: \"#FE8BBB\", delay: 35, scale: 0.9 },\n    { id: \"7\", x: \"85%\", y: \"55%\", color: \"#9E7AFF\", delay: 40, scale: 1.4 },\n    { id: \"8\", x: \"55%\", y: \"85%\", color: \"#FE8BBB\", delay: 18, scale: 1.0 }\n  ];\n\n  const textProgress = spring({\n    frame: frame - 5,\n    fps,\n    config: { damping: 12, stiffness: 100 }\n  });\n\n  const textOpacity = interpolate(\n    textProgress,\n    [0, 1],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const textScale = interpolate(\n    textProgress,\n    [0, 1],\n    [1.6, 2],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Calculate responsive font size based on viewport width\n  const responsiveFontSize = Math.min(width * 0.12, height * 0.15);\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#ffffff\" }}>\n      {frame >= 0 && frame < 120 && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: `translate(-50%, -50%) scale(${textScale})`,\n            opacity: textOpacity\n          }}\n        >\n          <div style={{ position: \"relative\", display: \"inline-block\" }}>\n            {sparkles.map((sparkle) => (\n              <Sparkle\n                key={sparkle.id}\n                x={sparkle.x}\n                y={sparkle.y}\n                color={sparkle.color}\n                delay={sparkle.delay}\n                scale={sparkle.scale}\n                frame={frame}\n                fps={fps}\n              />\n            ))}\n            <div\n              style={{\n                fontFamily: \"Inter\",\n                fontWeight: \"900\",\n                fontSize: `${responsiveFontSize}px`,\n                color: \"#000000\",\n                textAlign: \"center\",\n                letterSpacing: \"-0.02em\",\n                whiteSpace: \"nowrap\"\n              }}\n            >\n              Sparkles\n            </div>\n          </div>\n        </div>\n      )}\n    </AbsoluteFill>\n  );\n}"}],"meta":{"templateId":"text-sparkles","dbId":"f6444a90-fbcf-4c97-9b6c-fb43c506de6e","duration":108,"supportedFormats":["landscape"],"promptVariant":"base"}}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Vibe coded finance animation in landscape (1920Ã—1080). Leaning into a neon and futuristic look. Make sure we show cards, charts, and balance widgets. Use glow and slide for motion. Target duration: 7 seconds (210 frames)."},{"role":"assistant","content":"const {\nAbsoluteFill,\ninterpolate,\nuseCurrentFrame,\nspring,\nuseVideoConfig,\n} = window.Remotion;\n\nconst { IconifyIcon } = window;\n\nconst ChatMessage = ({ text, isUser, delay }) => {\nconst frame = useCurrentFrame();\nconst progress = spring({ frame: frame - delay, fps: 30, config: { damping: 12, stiffness: 200 } });\n\nreturn (\n  <div\n    style={{\n      display: \"flex\",\n      justifyContent: isUser ? \"flex-end\" : \"flex-start\",\n      opacity: progress,\n      transform: `translateY(${interpolate(progress, [0, 1], [20, 0])}px)`,\n      marginBottom: 24,\n    }}\n  >\n    <div\n      style={{\n        maxWidth: \"80%\",\n        padding: \"16px 20px\",\n        borderRadius: 20,\n        background: isUser ? \"#007AFF\" : \"#E9ECEF\",\n        color: isUser ? \"white\" : \"#212529\",\n        fontFamily: \"sans-serif\",\n        fontSize: 16,\n        boxShadow: \"0 2px 8px rgba(0, 0, 0, 0.05)\",\n        lineHeight: 1.5,\n      }}\n    >\n      {text}\n    </div>\n  </div>\n);\n};\n\nconst InputBar = ({ opacity }) => {\nconst frame = useCurrentFrame();\nconst text = \"This dashboard looks perfect for freelancers!\";\nconst charCount = Math.floor(interpolate(frame, [0, 150], [0, text.length], { extrapolateRight: \"clamp\" }));\n\nreturn (\n  <div\n    style={{\n      minHeight: 100,\n      background: \"white\",\n      borderRadius: 20,\n      display: \"flex\",\n      flexDirection: \"column\",\n      padding: 16,\n      opacity,\n      transform: `translateY(${interpolate(opacity, [0, 1], [20, 0])}px)`,\n      boxShadow: \"0 4px 24px rgba(0, 0, 0, 0.1)\",\n      border: \"1px solid #E5E5E5\",\n      position: \"relative\",\n    }}\n  >\n    <div\n      style={{\n        flex: 1,\n        color: \"#212529\",\n        fontFamily: \"sans-serif\",\n        fontSize: 16,\n        lineHeight: 1.5,\n        display: \"flex\",\n        alignItems: \"flex-start\",\n        paddingTop: 4,\n      }}\n    >\n      <span>{text.slice(0, charCount)}</span>\n    </div>\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        marginTop: 8,\n      }}\n    >\n      <button\n        style={{\n          background: \"#000000\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: 8,\n          padding: \"8px 16px\",\n          fontSize: 14,\n          fontWeight: \"600\",\n          cursor: \"pointer\",\n          fontFamily: \"sans-serif\",\n        }}\n      >\n        Send\n      </button>\n    </div>\n  </div>\n);\n};\n\nconst AnimatedValue = ({ start, end, prefix = \"\", suffix = \"\", delay = 0 }) => {\nconst frame = useCurrentFrame();\nconst value = Math.floor(interpolate(frame - delay, [0, 60], [start, end], { extrapolateRight: \"clamp\" }));\nreturn <span style={{ fontWeight: \"600\", fontFamily: \"sans-serif\", color: \"#1a1a1a\" }}>{prefix}{value.toLocaleString()}{suffix}</span>;\n};\n\nconst ProgressBar = ({ percentage, color, delay = 0 }) => {\nconst frame = useCurrentFrame();\nconst progress = interpolate(frame - delay, [0, 60], [0, percentage], { extrapolateRight: \"clamp\" });\n\nreturn (\n  <div style={{ width: \"100%\", height: \"8px\", background: \"#F3F4F6\", borderRadius: \"4px\", overflow: \"hidden\" }}>\n    <div style={{\n      width: `${progress}%`,\n      height: \"100%\",\n      background: color,\n      borderRadius: \"4px\"\n    }} />\n  </div>\n);\n};\n\nconst MyWalletSection = ({ opacity }) => {\n  const frame = useCurrentFrame();\n  const anim = (delay) => spring({ frame: frame - delay, fps: 30, config: { damping: 12, stiffness: 200 } });\n  \n  const currencies = [\n    { code: 'USD', flag: 'ðŸ‡ºðŸ‡¸', amount: '$342.50', limit: 'Limit is $10k a month', status: 'Active', statusColor: '#10B981' },\n    { code: 'EUR', flag: 'ðŸ‡©ðŸ‡ª', amount: 'â‚¬287.30', limit: 'Limit is â‚¬8k a month', status: 'Active', statusColor: '#10B981' },\n    { code: 'BDT', flag: 'ðŸ‡§ðŸ‡©', amount: 'à§³41,890.00', limit: 'Limit is à§³10k a month', status: 'Active', statusColor: '#10B981' },\n    { code: 'GBP', flag: 'ðŸ‡¬ðŸ‡§', amount: 'Â£198.75', limit: 'Limit is Â£7.5k a month', status: 'Inactive', statusColor: '#EF4444' }\n  ];\n  \n  return (\n    <div style={{ \n      opacity: anim(45),\n      background: \"#F9FAFB\",\n      border: \"1px solid #E5E7EB\",\n      borderRadius: \"12px\",\n      padding: \"20px\"\n    }}>\n      <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", marginBottom: 16 }}>\n        <h3 style={{ fontSize: 18, fontWeight: \"600\", margin: 0 }}>My Wallet</h3>\n        <button style={{\n          background: \"white\",\n          border: \"1px solid #E5E7EB\",\n          borderRadius: \"8px\",\n          padding: \"8px 16px\",\n          fontSize: 14,\n          fontWeight: \"500\",\n          cursor: \"pointer\",\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: 6,\n          color: \"#374151\"\n        }}>\n          <IconifyIcon icon=\"mdi:plus\" style={{ fontSize: 14 }} />\n          Add New\n        </button>\n      </div>\n      <div style={{ fontSize: 14, color: \"#6B7280\", marginBottom: 20 }}>Today 1 USD = 122.20 BDT</div>\n      \n      <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: 16 }}>\n        {currencies.map((currency, i) => (\n          <div key={i} style={{\n            background: \"white\",\n            border: \"1px solid #E5E7EB\",\n            borderRadius: \"12px\",\n            padding: \"16px\",\n            position: \"relative\"\n          }}>\n            <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"flex-start\", marginBottom: 12 }}>\n              <div style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n                <span style={{ fontSize: 20 }}>{currency.flag}</span>\n                <span style={{ fontSize: 16, fontWeight: \"600\" }}>{currency.code}</span>\n              </div>\n              <IconifyIcon icon=\"mdi:dots-vertical\" style={{ fontSize: 16, color: \"#9CA3AF\" }} />\n            </div>\n            \n            <div style={{ fontSize: 24, fontWeight: \"700\", marginBottom: 4 }}>\n              {currency.amount}\n            </div>\n            \n            <div style={{ fontSize: 12, color: \"#6B7280\", marginBottom: 8 }}>\n              {currency.limit}\n            </div>\n            \n            <div style={{ \n              fontSize: 12, \n              fontWeight: \"500\",\n              color: currency.statusColor\n            }}>\n              {currency.status}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst SavingsGoalsSection = ({ opacity }) => {\n  const frame = useCurrentFrame();\n  const anim = (delay) => spring({ frame: frame - delay, fps: 30, config: { damping: 12, stiffness: 200 } });\n  \n  return (\n    <div style={{ \n      opacity: anim(55),\n      background: \"#F9FAFB\",\n      border: \"1px solid #E5E7EB\",\n      borderRadius: \"12px\",\n      padding: \"20px\"\n    }}>\n      <h3 style={{ fontSize: 18, fontWeight: \"600\", marginBottom: 16 }}>Savings Goals</h3>\n      \n      <div style={{ display: \"flex\", gap: 16 }}>\n        <div style={{ flex: 1 }}>\n          <div style={{ fontSize: 16, fontWeight: \"600\", marginBottom: 8, color: \"#4F46E5\", display: \"flex\", alignItems: \"center\", gap: 6 }}>\n            <IconifyIcon icon=\"mdi:home\" style={{ fontSize: 16 }} />\n            Dream House\n          </div>\n          <div style={{ fontSize: 12, color: \"#6B7280\", marginBottom: 4 }}>Target: $75,849.00</div>\n          <div style={{ fontSize: 18, fontWeight: \"600\", marginBottom: 8 }}>$84,857.00</div>\n          <div style={{ fontSize: 12, color: \"#6B7280\", marginBottom: 8 }}>72%</div>\n          <ProgressBar percentage={72} color=\"#4F46E5\" delay={65} />\n        </div>\n        \n        <div style={{ flex: 1 }}>\n          <div style={{ fontSize: 16, fontWeight: \"600\", marginBottom: 8, color: \"#F59E0B\", display: \"flex\", alignItems: \"center\", gap: 6 }}>\n            <IconifyIcon icon=\"mdi:school\" style={{ fontSize: 16 }} />\n            Education\n          </div>\n          <div style={{ fontSize: 12, color: \"#6B7280\", marginBottom: 4 }}>Target: $65,445.00</div>\n          <div style={{ fontSize: 18, fontWeight: \"600\", marginBottom: 8 }}>$53,949.00</div>\n          <div style={{ fontSize: 12, color: \"#6B7280\", marginBottom: 8 }}>84%</div>\n          <ProgressBar percentage={84} color=\"#F59E0B\" delay={70} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst PreviewPanel = ({ opacity }) => {\nconst frame = useCurrentFrame();\nconst { width, height } = useVideoConfig();\nconst anim = (delay) => spring({ frame: frame - delay, fps: 30, config: { damping: 12, stiffness: 200 } });\n\nreturn (\n  <div style={{ \n    flex: 1, \n    background: \"white\", \n    borderRadius: 16, \n    opacity, \n    position: \"relative\", \n    overflow: \"hidden\", \n    padding: 32,\n    color: \"#1a1a1a\", \n    fontFamily: \"sans-serif\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\"\n  }}>\n    {/* Header */}\n    <div style={{ \n      display: \"flex\", \n      justifyContent: \"space-between\", \n      alignItems: \"center\", \n      marginBottom: 32,\n      opacity: anim(0)\n    }}>\n      <div style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n        <h1 style={{ fontSize: 28, fontWeight: \"600\", margin: 0 }}>Welcome, Jerry</h1>\n        <IconifyIcon icon=\"mdi:fire\" style={{ fontSize: 24, color: \"#FF6B35\" }} />\n      </div>\n      <div style={{ \n        display: \"flex\", \n        alignItems: \"center\", \n        gap: 16,\n        fontSize: 16,\n        color: \"#6B7280\"\n      }}>\n        <div style={{ display: \"flex\", alignItems: \"center\", gap: 6 }}>\n          <IconifyIcon icon=\"mdi:calendar\" style={{ fontSize: 16 }} />\n          <span>16 May 2024</span>\n        </div>\n        <button style={{\n          background: \"#4F46E5\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"8px\",\n          padding: \"8px 16px\",\n          fontSize: 14,\n          fontWeight: \"600\",\n          cursor: \"pointer\",\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: 6\n        }}>\n          <IconifyIcon icon=\"mdi:export\" style={{ fontSize: 14 }} />\n          Share\n        </button>\n      </div>\n    </div>\n\n    {/* Top Stats Row with Containers */}\n    <div style={{ \n      display: \"grid\", \n      gridTemplateColumns: \"1fr 1fr 1fr 1fr\", \n      gap: 20, \n      marginBottom: 32,\n      opacity: anim(15)\n    }}>\n      {/* Cash Balance Container */}\n      <div style={{\n        background: \"#F9FAFB\",\n        border: \"1px solid #E5E7EB\",\n        borderRadius: \"12px\",\n        padding: \"20px\"\n      }}>\n        <div style={{ display: \"flex\", alignItems: \"center\", gap: 8, marginBottom: 8 }}>\n          <h3 style={{ fontSize: 16, color: \"#6B7280\", margin: 0, fontWeight: \"500\" }}>Cash Balance</h3>\n          <IconifyIcon icon=\"mdi:information-outline\" style={{ fontSize: 16, color: \"#9CA3AF\" }} />\n        </div>\n        <div style={{ fontSize: 32, fontWeight: \"700\", marginBottom: 4 }}>\n          $<AnimatedValue start={20000} end={24847} prefix=\"\" suffix=\"\" delay={20} />\n        </div>\n        <div style={{ fontSize: 14, color: \"#10B981\", display: \"flex\", alignItems: \"center\", gap: 4 }}>\n          <IconifyIcon icon=\"mdi:trending-up\" style={{ fontSize: 14 }} />\n          16.8%\n        </div>\n      </div>\n      \n      {/* Savings Container */}\n      <div style={{\n        background: \"#F9FAFB\",\n        border: \"1px solid #E5E7EB\",\n        borderRadius: \"12px\",\n        padding: \"20px\"\n      }}>\n        <div style={{ display: \"flex\", alignItems: \"center\", gap: 8, marginBottom: 8 }}>\n          <h3 style={{ fontSize: 16, color: \"#6B7280\", margin: 0, fontWeight: \"500\" }}>Total Savings</h3>\n          <IconifyIcon icon=\"mdi:information-outline\" style={{ fontSize: 16, color: \"#9CA3AF\" }} />\n        </div>\n        <div style={{ fontSize: 32, fontWeight: \"700\", marginBottom: 4 }}>\n          $<AnimatedValue start={85000} end={93845} prefix=\"\" suffix=\"\" delay={25} />\n        </div>\n        <div style={{ fontSize: 14, color: \"#10B981\", display: \"flex\", alignItems: \"center\", gap: 4 }}>\n          <IconifyIcon icon=\"mdi:trending-up\" style={{ fontSize: 14 }} />\n          16.8%\n        </div>\n      </div>\n      \n      <div style={{\n        background: \"#F9FAFB\",\n        border: \"1px solid #E5E7EB\",\n        borderRadius: \"12px\",\n        padding: \"20px\"\n      }}>\n        <div style={{ display: \"flex\", alignItems: \"center\", gap: 8, marginBottom: 8 }}>\n          <h3 style={{ fontSize: 16, color: \"#6B7280\", margin: 0, fontWeight: \"500\" }}>Monthly Spent</h3>\n          <IconifyIcon icon=\"mdi:information-outline\" style={{ fontSize: 16, color: \"#9CA3AF\" }} />\n        </div>\n        <div style={{ fontSize: 32, fontWeight: \"700\", marginBottom: 4 }}>\n          $<AnimatedValue start={40000} end={4562} prefix=\"\" suffix=\"\" delay={30} />\n        </div>\n        <div style={{ fontSize: 14, color: \"#10B981\", display: \"flex\", alignItems: \"center\", gap: 4 }}>\n          <IconifyIcon icon=\"mdi:trending-up\" style={{ fontSize: 14 }} />\n          16.5%\n        </div>\n      </div>\n      \n      <div style={{\n        background: \"#F9FAFB\",\n        border: \"1px solid #E5E7EB\",\n        borderRadius: \"12px\",\n        padding: \"20px\"\n      }}>\n        <div style={{ display: \"flex\", alignItems: \"center\", gap: 8, marginBottom: 8 }}>\n          <h3 style={{ fontSize: 16, color: \"#6B7280\", margin: 0, fontWeight: \"500\" }}>Monthly Income</h3>\n          <IconifyIcon icon=\"mdi:information-outline\" style={{ fontSize: 16, color: \"#9CA3AF\" }} />\n        </div>\n        <div style={{ fontSize: 32, fontWeight: \"700\", marginBottom: 4 }}>\n          $<AnimatedValue start={80000} end={8488} prefix=\"\" suffix=\"\" delay={35} />\n        </div>\n        <div style={{ fontSize: 14, color: \"#EF4444\", display: \"flex\", alignItems: \"center\", gap: 4 }}>\n          <IconifyIcon icon=\"mdi:trending-down\" style={{ fontSize: 14 }} />\n          12.8%\n        </div>\n      </div>\n    </div>\n\n    {/* Main Content Grid */}\n    <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: 32, flex: 1 }}>\n      {/* Left Column */}\n      <div style={{ display: \"flex\", flexDirection: \"column\", gap: 24 }}>\n        {/* Recent Activity Section */}\n        <div style={{ opacity: anim(40), flex: 1, display: \"flex\", flexDirection: \"column\" }}>\n          <h3 style={{ fontSize: 18, fontWeight: \"600\", marginBottom: 16 }}>Recent Activity</h3>\n          <div style={{ display: \"flex\", flexDirection: \"column\", gap: 12, flex: 1 }}>\n            {[\n              { name: \"PayPal\", date: \"16 Jul 2024\", amount: \"+848.84\", color: \"#003087\", icon: \"mdi:paypal\" },\n              { name: \"Wise\", date: \"15 Jul 2024\", amount: \"-665.56\", color: \"#00B9FF\", icon: \"mdi:bank-transfer\" },\n              { name: \"Atlassian\", date: \"14 Jul 2024\", amount: \"+546.84\", color: \"#0052CC\", icon: \"mdi:atlassian\" },\n              { name: \"Dropbox\", date: \"13 Jul 2024\", amount: \"-738.59\", color: \"#0061FF\", icon: \"mdi:dropbox\" },\n              { name: \"Spotify\", date: \"12 Jul 2024\", amount: \"-15.99\", color: \"#1DB954\", icon: \"mdi:spotify\" },\n              { name: \"Amazon\", date: \"11 Jul 2024\", amount: \"-234.67\", color: \"#FF9900\", icon: \"mdi:amazon\" },\n              { name: \"Netflix\", date: \"10 Jul 2024\", amount: \"-12.99\", color: \"#E50914\", icon: \"mdi:netflix\" },\n              { name: \"Uber\", date: \"09 Jul 2024\", amount: \"-28.45\", color: \"#000000\", icon: \"mdi:car\" },\n              { name: \"Starbucks\", date: \"08 Jul 2024\", amount: \"-6.75\", color: \"#00704A\", icon: \"mdi:coffee\" },\n              { name: \"Apple\", date: \"07 Jul 2024\", amount: \"-99.99\", color: \"#007AFF\", icon: \"mdi:apple\" }\n            ].map((item, i) => (\n              <div key={i} style={{ \n                display: \"flex\", \n                alignItems: \"center\", \n                justifyContent: \"space-between\",\n                background: \"#F9FAFB\",\n                border: \"1px solid #E5E7EB\",\n                borderRadius: \"8px\",\n                padding: \"12px 16px\"\n              }}>\n                <div style={{ display: \"flex\", alignItems: \"center\", gap: 12 }}>\n                  <div style={{\n                    width: \"32px\",\n                    height: \"32px\",\n                    borderRadius: \"50%\",\n                    background: item.color,\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    color: \"white\"\n                  }}>\n                    <IconifyIcon icon={item.icon} style={{ fontSize: 16 }} />\n                  </div>\n                  <div>\n                    <div style={{ fontSize: 14, fontWeight: \"500\" }}>{item.name}</div>\n                    <div style={{ fontSize: 12, color: \"#6B7280\" }}>{item.date}</div>\n                  </div>\n                </div>\n                <div style={{ \n                  fontSize: 14, \n                  fontWeight: \"600\",\n                  color: item.amount.startsWith(\"+\") ? \"#10B981\" : \"#EF4444\"\n                }}>\n                  {item.amount}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      {/* Right Column */}\n      <div style={{ display: \"flex\", flexDirection: \"column\", gap: 24 }}>\n        {/* My Wallet Section */}\n        <MyWalletSection opacity={anim(45)} />\n        \n        {/* Savings Goals */}\n        <SavingsGoalsSection opacity={anim(55)} />\n      </div>\n    </div>\n  </div>\n);\n};\n\nexport default function FintechUI() {\nconst frame = useCurrentFrame();\nconst progress = spring({ frame, fps: 30, config: { damping: 20, stiffness: 80 } });\nconst messages = [\n  { text: \"I need a finance dashboard for my freelance business.\", isUser: true, delay: 0 },\n  { text: \"Perfect! What features would help you manage your freelance finances?\", isUser: false, delay: 15 },\n  { text: \"Income tracking, expense monitoring, savings goals, and client payment history.\", isUser: true, delay: 30 },\n  { text: \"Great! Here's a freelancer-focused finance dashboard with all those features.\", isUser: false, delay: 45 },\n  { text: \"This is exactly what I need! The multi-currency support is perfect for international clients.\", isUser: true, delay: 60 },\n  { text: \"Should we add project-based budgeting and tax preparation features?\", isUser: false, delay: 75 },\n  { text: \"Yes! And maybe quarterly earnings reports for tax filing.\", isUser: true, delay: 90 },\n  { text: \"Excellent idea! I'll add those freelancer-specific financial tools.\", isUser: false, delay: 105 },\n];\n\nreturn (\n  <AbsoluteFill style={{ background: \"#F8F9FA\" }}>\n    <div style={{ display: \"flex\", height: \"100%\", padding: 32, gap: 32 }}>\n      <div style={{ width: \"30%\", display: \"flex\", flexDirection: \"column\" }}>\n        <div style={{ flex: 1, overflowY: \"auto\", paddingRight: 20 }}>\n          {messages.map((msg, i) => <ChatMessage key={i} {...msg} />)}\n        </div>\n        <InputBar opacity={progress} />\n      </div>\n      <div style={{ width: \"70%\" }}>\n        <PreviewPanel opacity={progress} />\n      </div>\n    </div>\n  </AbsoluteFill>\n);\n}\n\nexport const durationInFrames_fintech = 210;"}],"meta":{"templateId":"vibe-coded-finance-app","dbId":"7305f6c3-a0af-4125-a511-a14afe955bf3","duration":210,"supportedFormats":["landscape"],"promptVariant":"phrase-1"}}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Dashboard growth card in landscape (1920Ã—1080). Leaning into a modern and clean look. Make sure we show line graph, percentage badge, and supporting stats. Use line draw and number counter for motion. Target duration: 4 seconds (120 frames)."},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Img } = window.Remotion;\n\n// Auto-generated defaults for undefined variables\nconst padding = 16;\nconst gap = 12;\n\nconst TemplateScene = () => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Card entrance animation\n  const cardScale = spring({ frame, fps,\n    config: {\n      damping: 12,\n      stiffness: 100,\n      mass: 0.5,\n    },\n  });\n\n  const cardOpacity = interpolate(frame, [0, 20], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // Growth percentage animation\n  const growthProgress = interpolate(frame, [20, 80], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const currentGrowth = interpolate(growthProgress, [0, 1], [0, 24.15], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // Yellow line animation with slow in slow out easing - starts from first frame\n  const lineProgressRaw = interpolate(frame, [0, 120], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n  \n  // Apply slow in slow out easing (ease-in-out cubic)\n  const lineProgress = lineProgressRaw < 0.5 \n    ? 2 * lineProgressRaw * lineProgressRaw \n    : 1 - Math.pow(-2 * lineProgressRaw + 2, 2) / 2;\n\n  // Chart bars animation - visible from start\n  const barsOpacity = 1;\n\n  // Button animation - visible from start\n  const buttonOpacity = 1;\n  const buttonScale = 1;\n\n  // Chart data with custom height sequence - removed final drop, ends at steady level\n  const chartData = [\n    0.3, 0.32, 0.35, 0.38, 0.4, 0.38, 0.35, 0.32, 0.3, 0.32, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.58, 0.55, 0.5, 0.45,\n    0.42, 0.4, 0.38, 0.36, 0.34, 0.32, 0.3, 0.32, 0.35, 0.38, 0.42, 0.46, 0.5, 0.54, 0.58, 0.6, 0.6\n  ];\n\n  // Enhanced smooth interpolation with better curve flattening\n  const getSmoothedValue = (progress) => {\n    const totalPoints = chartData.length - 1;\n    const exactIndex = progress * totalPoints;\n    const lowerIndex = Math.floor(exactIndex);\n    const upperIndex = Math.min(lowerIndex + 1, totalPoints);\n    const fraction = exactIndex - lowerIndex;\n    \n    // Enhanced smoothstep for flatter peaks and smoother curves\n    const easedFraction = fraction * fraction * fraction * (fraction * (fraction * 6 - 15) + 10); // smootherstep\n    \n    const lowerValue = chartData[lowerIndex] || 0;\n    const upperValue = chartData[upperIndex] || 0;\n    \n    return lowerValue + (upperValue - lowerValue) * easedFraction;\n  };\n\n  // Calculate current smoothed value based on line position - updated range to 15-40%\n  const currentValue = getSmoothedValue(lineProgress);\n  const displayValue = interpolate(currentValue, [0, 1], [15, 40], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#f0f0f0\" }}>\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${cardScale})`,\n          opacity: cardOpacity,\n          width: \"400px\",\n          height: \"500px\",\n          backgroundColor: \"#b8a7d9\",\n          borderRadius: \"24px\",\n          padding: \"40px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          fontFamily: \"Inter\",\n        }}\n      >\n        {/* Header */}\n        <div style={{ marginBottom: \"30px\" }}>\n          <div\n            style={{\n              fontSize: \"16px\",\n              fontWeight: \"600\",\n              color: \"#4a4a4a\",\n              marginBottom: \"20px\",\n              letterSpacing: \"1px\",\n            }}\n          >\n            GROWTH\n          </div>\n          <div\n            style={{\n              fontSize: \"48px\",\n              fontWeight: \"800\",\n              color: \"#2d2d2d\",\n              lineHeight: \"1\",\n            }}\n          >\n            +{displayValue.toFixed(0)}%\n          </div>\n        </div>\n\n        {/* Chart Container */}\n        <div\n          style={{\n            flex: 1,\n            position: \"relative\",\n            marginBottom: \"40px\",\n            opacity: barsOpacity,\n          }}\n        >\n          {/* Chart Bars */}\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"flex-end\",\n              height: \"200px\",\n              gap: \"3px\",\n              paddingBottom: \"20px\",\n            }}\n          >\n            {chartData.map((height, index) => (\n              <div\n                key={index}\n                style={{\n                  flex: 1,\n                  backgroundColor: \"#9d8bc9\",\n                  height: `${height * 100}%`,\n                  borderRadius: \"1px\",\n                  opacity: 0.8,\n                }}\n              />\n            ))}\n          </div>\n\n          {/* Yellow Line and Dot */}\n          <div\n            style={{\n              position: \"absolute\",\n              bottom: \"20px\",\n              left: `${lineProgress * 100}%`,\n              transform: \"translateX(-50%)\",\n              height: \"200px\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              justifyContent: \"flex-end\",\n            }}\n          >\n            {/* Yellow Line - increased stroke and height matches current value */}\n            <div\n              style={{\n                width: \"4px\", // Increased from 2px\n                height: `${currentValue * 180}px`, // Height matches current value\n                backgroundColor: \"#f4d03f\",\n                boxShadow: \"0 0 8px rgba(244, 208, 63, 0.3)\",\n                position: \"relative\",\n              }}\n            >\n              {/* Yellow Dot positioned at the top of the line */}\n              <div\n                style={{\n                  position: \"absolute\",\n                  top: \"-6px\", // Position at top of line\n                  left: \"50%\",\n                  transform: \"translateX(-50%)\",\n                  width: \"12px\",\n                  height: \"12px\",\n                  backgroundColor: \"#f4d03f\",\n                  borderRadius: \"50%\",\n                  boxShadow: \"0 2px 8px rgba(244, 208, 63, 0.4)\",\n                }}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Button */}\n        <div\n          style={{\n            opacity: buttonOpacity,\n            transform: `scale(${buttonScale})`,\n          }}\n        >\n          <div\n            style={{\n              backgroundColor: \"#2d2d2d\",\n              color: \"white\",\n              padding: \"16px 24px\",\n              borderRadius: \"8px\",\n              fontSize: \"14px\",\n              fontWeight: \"600\",\n              textAlign: \"center\",\n              cursor: \"pointer\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              gap: \"8px\",\n            }}\n          >\n            <div\n              style={{\n                width: \"6px\",\n                height: \"6px\",\n                backgroundColor: \"white\",\n                borderRadius: \"50%\",\n              }}\n            />\n            SEE MORE INSIGHTS\n          </div>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n};\n\nexport const durationInFrames_A7K9M3P2 = 150;\nexport default TemplateScene;"}],"meta":{"templateId":"line-chart-db","dbId":"c2bac307-3ae3-44f5-ba5f-6109ac8abe24","duration":120,"supportedFormats":["landscape"],"promptVariant":"phrase-2"}}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Need a landscape (1920Ã—1080) Remotion scene for animated testimonial carousel with avatars and customer quotes. Scrolling testimonial carousel with avatars, names, and roles. This should work well for website testimonial section, case study intro, and marketing deck. Include quote text, avatar, name, and role. Animate with fade, slide, and stagger. Keep the style clean, professional, and trust-building. Palette should lean on neutral and accent highlight. Keep it around 7 seconds (210 frames)."},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst testimonials_8a7f2b3c = [\n  {\n    text: \"The support team is exceptional, guiding us through setup and providing ongoing assistance, ensuring our satisfaction.\",\n    name: \"Saman Malik\",\n    role: \"Customer Support Lead\",\n    avatar: window.BazaarAvatars['asian-woman']\n  },\n  {\n    text: \"Its robust features and quick support have transformed our workflow, making us significantly more efficient.\",\n    name: \"Zainab Hussain\", \n    role: \"Project Manager\",\n    avatar: window.BazaarAvatars['middle-eastern-man']\n  },\n  {\n    text: \"Using this ERP, our online presence and conversions significantly improved, boosting business performance.\",\n    name: \"Hassan Ali\",\n    role: \"E-commerce Manager\", \n    avatar: window.BazaarAvatars['black-man']\n  },\n  {\n    text: \"This ERP revolutionized our operations, streamlining finance and inventory. The cloud-based platform keeps us productive, even remotely.\",\n    name: \"Briana Patton\",\n    role: \"Operations Manager\",\n    avatar: window.BazaarAvatars['white-woman']\n  },\n  {\n    text: \"The smooth implementation exceeded expectations. It streamlined processes, improving overall business performance.\",\n    name: \"Aliza Khan\",\n    role: \"Business Analyst\",\n    avatar: window.BazaarAvatars['hispanic-man']\n  },\n  {\n    text: \"Our business functions improved with a user-friendly design and positive customer feedback.\",\n    name: \"Farhan Siddiqui\",\n    role: \"Marketing Director\",\n    avatar: window.BazaarAvatars['asian-woman']\n  }\n];\n\nconst script_8a7f2b3c = [\n  { type: \"header\", frames: 360 },\n  { type: \"testimonials\", frames: 360 }\n];\n\nlet accumulatedFrames_8a7f2b3c = 0;\nconst sequences_8a7f2b3c = script_8a7f2b3c.map(item => {\n  const sequence = { ...item, start: accumulatedFrames_8a7f2b3c };\n  accumulatedFrames_8a7f2b3c += item.frames;\n  return sequence;\n});\n\nconst totalFrames_8a7f2b3c = script_8a7f2b3c.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_8a7f2b3c = totalFrames_8a7f2b3c;\n\nconst TestimonialCard = ({ testimonial, delay, speed }) => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n  \n  const cardSpring = spring({\n    frame: frame - delay,\n    fps,\n    config: { damping: 12, stiffness: 100 }\n  });\n\n  const translateY = interpolate(\n    frame,\n    [0, 600],\n    [0, -2000],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"extend\" }\n  ) * speed;\n\n  const opacity = interpolate(cardSpring, [0, 1], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" });\n  const scale = interpolate(cardSpring, [0, 1], [0.8, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" });\n\n  return (\n    <div\n      style={{\n        backgroundColor: \"white\",\n        borderRadius: \"24px\",\n        padding: \"40px\",\n        marginBottom: \"24px\",\n        maxWidth: \"320px\",\n        width: \"100%\",\n        boxShadow: \"0 10px 25px rgba(0,0,0,0.1)\",\n        border: \"1px solid rgba(0,0,0,0.05)\",\n        opacity,\n        transform: `translateY(${translateY}px) scale(${scale})`,\n        transformOrigin: \"center\"\n      }}\n    >\n      <div\n        style={{\n          fontSize: \"16px\",\n          lineHeight: \"1.5\",\n          color: \"#374151\",\n          marginBottom: \"20px\",\n          fontFamily: \"Inter\",\n          fontWeight: \"400\"\n        }}\n      >\n        {testimonial.text}\n      </div>\n      <div style={{ display: \"flex\", alignItems: \"center\", gap: \"12px\" }}>\n        <img\n          src={testimonial.avatar}\n          style={{\n            width: \"40px\",\n            height: \"40px\",\n            borderRadius: \"50%\",\n            objectFit: \"cover\"\n          }}\n        />\n        <div>\n          <div\n            style={{\n              fontFamily: \"Inter\",\n              fontWeight: \"600\",\n              fontSize: \"14px\",\n              color: \"#111827\",\n              lineHeight: \"1.2\"\n            }}\n          >\n            {testimonial.name}\n          </div>\n          <div\n            style={{\n              fontFamily: \"Inter\",\n              fontWeight: \"400\",\n              fontSize: \"14px\",\n              color: \"#6B7280\",\n              lineHeight: \"1.2\"\n            }}\n          >\n            {testimonial.role}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst TestimonialColumn = ({ testimonials, speed, delay }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n      {[...testimonials, ...testimonials, ...testimonials].map((testimonial, index) => (\n        <TestimonialCard\n          key={index}\n          testimonial={testimonial}\n          delay={delay}\n          speed={speed}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  const headerSequence = sequences_8a7f2b3c.find(s => s.type === \"header\");\n  const testimonialsSequence = sequences_8a7f2b3c.find(s => s.type === \"testimonials\");\n\n  return (\n    <AbsoluteFill\n      style={{\n        background: \"linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)\",\n        fontFamily: \"Inter\"\n      }}\n    >\n      {/* Header Section */}\n      {frame >= headerSequence.start && frame < headerSequence.start + headerSequence.frames && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"80px\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\",\n            textAlign: \"center\",\n            zIndex: 10\n          }}\n        >\n          <h1\n            style={{\n              fontSize: \"48px\",\n              fontWeight: \"800\",\n              color: \"#111827\",\n              marginBottom: \"16px\",\n              fontFamily: \"Inter\",\n              opacity: interpolate(\n                spring({\n                  frame: frame - headerSequence.start,\n                  fps,\n                  config: { damping: 12, stiffness: 100 }\n                }),\n                [0, 1],\n                [0, 1],\n                { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n              ),\n              transform: `translateY(${interpolate(\n                spring({\n                  frame: frame - headerSequence.start,\n                  fps,\n                  config: { damping: 12, stiffness: 100 }\n                }),\n                [0, 1],\n                [30, 0],\n                { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n              )}px)`\n            }}\n          >\n            What our users say\n          </h1>\n        </div>\n      )}\n\n      {/* Testimonials Columns */}\n      {frame >= headerSequence.start && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"200px\",\n            left: \"0\",\n            right: \"0\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            gap: \"32px\",\n            overflow: \"hidden\",\n            height: \"calc(100vh - 200px)\"\n          }}\n        >\n          <TestimonialColumn\n            testimonials={testimonials_8a7f2b3c.slice(0, 2)}\n            speed={0.8}\n            delay={headerSequence.start}\n          />\n          <TestimonialColumn\n            testimonials={testimonials_8a7f2b3c.slice(2, 4)}\n            speed={1.0}\n            delay={headerSequence.start}\n          />\n          <TestimonialColumn\n            testimonials={testimonials_8a7f2b3c.slice(4, 6)}\n            speed={1.2}\n            delay={headerSequence.start}\n          />\n        </div>\n      )}\n    </AbsoluteFill>\n  );\n}"}],"meta":{"templateId":"testimonials-db","dbId":"c6f94642-c762-40ef-88e0-434ba0294f80","duration":210,"supportedFormats":["landscape"],"promptVariant":"base"}}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Text and ui animation in landscape (1920Ã—1080). Leaning into a energetic and tech look. Make sure we show headline text, ui mockup, and cursor. Use text typing and background zoom for motion. Target duration: 7.3 seconds (220 frames)."},{"role":"assistant","content":"const { AbsoluteFill, Sequence, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_meh0uew7 = [\n  { type: \"typing-text\", frames: 60 },\n  { type: \"delay\", frames: 5 },\n  { type: \"outro\", frames: 15 },\n  { type: \"ui-slide\", frames: 20 },\n  { type: \"new-text\", frames: 60 },\n  { type: \"ui-transform\", frames: 60 },\n  { type: \"background-transition\", frames: 5 }\n];\n\nconst sequences_meh0uew7 = [];\nlet accumulatedFrames_meh0uew7 = 0;\n\nscript_meh0uew7.forEach((item, index) => {\n  sequences_meh0uew7.push({\n    ...item,\n    start: accumulatedFrames_meh0uew7,\n    end: accumulatedFrames_meh0uew7 + item.frames\n  });\n  accumulatedFrames_meh0uew7 += item.frames;\n});\n\nconst totalFrames_meh0uew7 = script_meh0uew7.reduce((sum, item) => sum + item.frames, 0);\nexport const durationInFrames_meh0uew7 = totalFrames_meh0uew7;\n\nexport default function TemplateScene() {\n  window.RemotionGoogleFonts.loadFont(\"Poppins\", { weights: [\"500\", \"600\", \"800\"] });\n\n  const frame = useCurrentFrame();\n  const { width, height } = useVideoConfig();\n\n  // Background zoom out and rotation animation\n  const backgroundScale = interpolate(\n    frame,\n    [0, 90],\n    [3, 2],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const backgroundRotation = interpolate(\n    frame,\n    [0, 150, 210],\n    [0, 180, 360],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Background fade transition (last 5 frames: 215-220)\n  const oldBackgroundOpacity = interpolate(\n    frame,\n    [210, 220],\n    [1, 0],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const newBackgroundOpacity = interpolate(\n    frame,\n    [210, 220],\n    [0, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Text entrance animation (frames 0-30) and outro upward movement (frames 65-80) - SLOWER\n  const textY = interpolate(\n    frame,\n    [0, 30, 65, 80],\n    [height * 0.55, height * 0.5, height * 0.5, height * 0.2],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const textOpacity = interpolate(\n    frame,\n    [0, 30, 65, 80],\n    [0, 1, 1, 0],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Text entrance scale (frames 0-20)\n  const entranceScale = interpolate(\n    frame,\n    [0, 20],\n    [1.3, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Text outro scale - zoom out (frames 65-80) - SLOWER\n  const outroScale = interpolate(\n    frame,\n    [65, 80],\n    [1, 0.3],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Combine entrance and outro scales\n  const textScale = frame < 65 ? entranceScale : outroScale;\n\n  // UI Image slide in animation (starts at frame 65, earlier timing)\n  const uiImageY = interpolate(\n    frame,\n    [65, 85, 145, 205],\n    [height + 100, height * 0.6, height * 0.5, height * 0.1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const uiImageOpacity = interpolate(\n    frame,\n    [65, 80],\n    [0, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // UI Image scale animation - starts large and scales down while sliding in, then scales up to screen after delay, then scales up more in final 2 seconds\n  const uiImageScale = interpolate(\n    frame,\n    [65, 85, 110, 120, 145, 205, 210],\n    [1.5, 1, 1, 2.2, 2.2, 3.5, 0],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // UI Image perspective Y rotation to right side - EXTENDED: Now covers entire animation duration including new 2 seconds\n  const uiImageRotateY = interpolate(\n    frame,\n    [85, 145, 205, 210],\n    [0, 15, 35, 45],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // New text animation (starts at frame 65, now disappears later at frame 105-110 to give more time)\n  const newTextY = interpolate(\n    frame,\n    [65, 110],\n    [height * 0.22, height * 0.20],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const newTextOpacity = interpolate(\n    frame,\n    [65, 85, 115, 120],\n    [0, 1, 1, 0],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const newTextScale = interpolate(\n    frame,\n    [65, 85],\n    [1.3, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Mouse cursor animation - appears in last 2 seconds (frames 145-205)\n  const mouseX = interpolate(\n    frame,\n    [145, 185],\n    [width + 50, width * 0.30],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const mouseY = interpolate(\n    frame,\n    [145, 185],\n    [height * 0.5, height * 0.93],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const mouseOpacity = interpolate(\n    frame,\n    [145, 155, 195, 215],\n    [0, 1, 1, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Enhanced click animation - scale down first, then scale up for more dramatic click effect\n  const clickScale = interpolate(\n    frame,\n    [190, 202, 203, 208],\n    [1.2, 0.8, 1.5, 1.2], // Increased size overall, scale down then up\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  return (\n    <AbsoluteFill style= {{ backgroundColor: \"#1e40af\" }\n}>\n  {/* Old background image with zoom out and rotation - fades out in last 5 frames */ }\n  < Img\nsrc = \"https://i.postimg.cc/Wz519hX2/Untitled-1kjn.png\"\nstyle = {{\n  position: \"absolute\",\n    top: \"50%\",\n      left: \"50%\",\n        width: width * 1.2,\n          height: height * 1.2,\n            objectFit: \"cover\",\n              transform: `translate(-50%, -50%) scale(${backgroundScale}) rotate(${backgroundRotation}deg)`,\n                transformOrigin: \"center center\",\n                  opacity: oldBackgroundOpacity\n}}\n/>\n\n{/* New background image - fades in during last 5 frames with initial scale of 2 */ }\n{\n  frame >= 215 && (\n    <Img\nsrc=\"https://i.postimg.cc/XvQGvww9/Untitled-1kjn.png\"\n  style = {{\n    position: \"absolute\",\n      top: \"50%\",\n        left: \"50%\",\n          width: width * 1.2,\n            height: height * 1.2,\n              objectFit: \"cover\",\n                transform: `translate(-50%, -50%) scale(2)`,\n                  transformOrigin: \"center center\",\n                    opacity: newBackgroundOpacity\n  }\n}\n/>\n)}\n\n{/* Text with entrance and outro animations */ }\n{\n  frame >= 0 && frame <= 80 && (\n    <div style={\n      {\n        position: \"absolute\",\n          top: textY,\n            left: \"50%\",\n              transform: `translate(-50%, -50%) scale(${textScale})`,\n                fontFamily: \"Poppins\",\n                  fontSize: \"6vw\",\n                    fontWeight: \"800\",\n                      textAlign: \"center\",\n                        lineHeight: \"1.2\",\n                          letterSpacing: \"0.05em\",\n                            color: \"white\",\n                              width: \"100%\",\n                                opacity: textOpacity,\n                                  textShadow: \"2px 2px 4px rgba(0,0,0,0.8)\",\n}\n  }>\n    Your Secure < br /> AI Meeting Assistant\n      < /div>\n)\n}\n\n{/* UI Image with slide in animation, scale down animation, border gradient, glow, and perspective depth + Y rotation */ }\n{\n  frame >= 65 && (\n    <div style={\n      {\n        position: \"absolute\",\n          top: uiImageY,\n            left: \"50%\",\n              transform: `translate(-50%, -50%) scale(${uiImageScale}) perspective(1000px) rotateX(15deg) rotateY(${uiImageRotateY}deg)`,\n                opacity: uiImageOpacity,\n                  padding: \"4px\",\n                    background: \"linear-gradient(135deg, #667eea 0%, #764ba2 100%)\",\n                      borderRadius: \"16px\",\n                        boxShadow: \"0 0 40px rgba(102, 126, 234, 0.6), 0 0 80px rgba(118, 75, 162, 0.4), 0 20px 40px rgba(0,0,0,0.3)\",\n}\n  }>\n    <Img\nsrc=\"https://i.postimg.cc/WzNzVQ3b/a-LRGZ7s0-Y16-Icja-J88v-XIa3dc.png\"\n  style = {{\n    width: width * 0.7,\n      height: \"auto\",\n        borderRadius: \"12px\",\n          display: \"block\"\n  }\n}\n/>\n  < /div>\n)}\n\n{/* New text after UI image appears (now disappears later to give more time on screen) */ }\n{\n  frame >= 65 && frame <= 110 && (\n    <div style={\n      {\n        position: \"absolute\",\n          top: newTextY,\n            left: \"50%\",\n              transform: `translate(-50%, -50%) scale(${newTextScale})`,\n                fontFamily: \"Poppins\",\n                  fontSize: \"4vw\",\n                    fontWeight: \"600\",\n                      textAlign: \"center\",\n                        color: \"white\",\n                          width: \"100%\",\n                            opacity: newTextOpacity,\n                              textShadow: \"2px 2px 4px rgba(0,0,0,0.8)\",\n}\n  }>\n    Record, transcribe, and summarize meetings\n      < /div>\n)\n}\n\n{/* Mouse cursor animation - appears in last 2 seconds with enhanced click effect */ }\n{\n  frame >= 145 && (\n    <div style={\n      {\n        position: \"absolute\",\n          left: mouseX,\n            top: mouseY,\n              transform: `translate(-50%, -50%) scale(${clickScale})`,\n                opacity: mouseOpacity,\n                  pointerEvents: \"none\",\n                    zIndex: 1000\n      }\n  }>\n    {/* Mouse cursor using lsiconðŸ˜›ointer-filled icon - solid white */ }\n    < window.IconifyIcon\n  icon = \"lsiconðŸ˜›ointer-filled\"\n  style = {{\n    fontSize: \"60px\",\n      color: \"#7d5beb\",\n        filter: \"drop-shadow(3px 3px 8px rgba(0,0,0,0.6)) drop-shadow(0px 0px 4px rgba(30,58,138,0.4))\"\n  }\n}\n/>\n\n{/* Click ripple effect */ }\n{\n  frame >= 190 && frame <= 200 && (\n    <div style={\n      {\n        position: \"absolute\",\n          top: \"50%\",\n            left: \"50%\",\n              width: \"80px\",\n                height: \"80px\",\n                  borderRadius: \"50%\",\n                    border: \"2px solid rgba(255,255,255,0.8)\",\n                      transform: `translate(-50%, -50%) scale(${interpolate(frame, [200, 210], [0.5, 2])})`,\n                        opacity: interpolate(frame, [200, 210], [1, 0])\n      }\n  } />\n)\n}\n</div>\n)}\n</AbsoluteFill>\n);\n}"}],"meta":{"templateId":"text-ui-animation-db","dbId":"7acf1a10-e0c1-485c-bf15-d8a32ab9bf82","duration":220,"supportedFormats":["landscape"],"promptVariant":"phrase-1"}}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Need a portrait (1080Ã—1920) Remotion scene for portrait growth analytics card with animated line chart and kpi counters. Vertical analytics card showcasing animated line growth, percentage badge, and supporting metrics. This should work well for mobile dashboard, vertical marketing hero, and analytics highlight. Include line chart, metric cards, and emphasis badge. Animate with line draw, number counter, and card entrance. Keep the style modern, professional, and mobile-first. Palette should lean on brand gradient and white. Keep it around 6 seconds (180 frames)."},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Img } = window.Remotion;\n\n// Auto-generated defaults for undefined variables\nconst padding = 16;\nconst gap = 12;\n\nconst TemplateScene = () => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Card entrance animation\n  const cardScale = spring({\n    frame, fps,\n    config: {\n      damping: 12,\n      stiffness: 100,\n      mass: 0.5,\n    },\n  });\n\n  const cardOpacity = interpolate(frame, [0, 20], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // Growth percentage animation\n  const growthProgress = interpolate(frame, [20, 80], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const currentGrowth = interpolate(growthProgress, [0, 1], [0, 24.15], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // Yellow line animation with slow in slow out easing - starts from first frame\n  const lineProgressRaw = interpolate(frame, [0, 120], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // Apply slow in slow out easing (ease-in-out cubic)\n  const lineProgress = lineProgressRaw < 0.5\n    ? 2 * lineProgressRaw * lineProgressRaw\n    : 1 - Math.pow(-2 * lineProgressRaw + 2, 2) / 2;\n\n  // Chart bars animation - visible from start\n  const barsOpacity = 1;\n\n  // Button animation - visible from start\n  const buttonOpacity = 1;\n  const buttonScale = 1;\n\n  // Chart data with custom height sequence - removed final drop, ends at steady level\n  const chartData = [\n    0.3, 0.32, 0.35, 0.38, 0.4, 0.38, 0.35, 0.32, 0.3, 0.32, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.58, 0.55, 0.5, 0.45,\n    0.42, 0.4, 0.38, 0.36, 0.34, 0.32, 0.3, 0.32, 0.35, 0.38, 0.42, 0.46, 0.5, 0.54, 0.58, 0.6, 0.6\n  ];\n\n  // Enhanced smooth interpolation with better curve flattening\n  const getSmoothedValue = (progress) => {\n    const totalPoints = chartData.length - 1;\n    const exactIndex = progress * totalPoints;\n    const lowerIndex = Math.floor(exactIndex);\n    const upperIndex = Math.min(lowerIndex + 1, totalPoints);\n    const fraction = exactIndex - lowerIndex;\n\n    // Enhanced smoothstep for flatter peaks and smoother curves\n    const easedFraction = fraction * fraction * fraction * (fraction * (fraction * 6 - 15) + 10); // smootherstep\n\n    const lowerValue = chartData[lowerIndex] || 0;\n    const upperValue = chartData[upperIndex] || 0;\n\n    return lowerValue + (upperValue - lowerValue) * easedFraction;\n  };\n\n  // Calculate current smoothed value based on line position - updated range to 15-40%\n  const currentValue = getSmoothedValue(lineProgress);\n  const displayValue = interpolate(currentValue, [0, 1], [15, 40], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  return (\n    <AbsoluteFill style= {{ backgroundColor: \"#f0f0f0\" }\n}>\n  <div\n        style={\n  {\n    position: \"absolute\",\n      top: \"50%\",\n        left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${cardScale})`,\n            opacity: cardOpacity,\n              width: \"400px\",\n                height: \"500px\",\n                  backgroundColor: \"#b8a7d9\",\n                    borderRadius: \"24px\",\n                      padding: \"40px\",\n                        display: \"flex\",\n                          flexDirection: \"column\",\n                            fontFamily: \"Inter\",\n        }\n}\n      >\n  {/* Header */ }\n  < div style = {{ marginBottom: \"30px\" }}>\n    <div\n            style={\n  {\n    fontSize: \"16px\",\n      fontWeight: \"600\",\n        color: \"#4a4a4a\",\n          marginBottom: \"20px\",\n            letterSpacing: \"1px\",\n            }\n}\n          >\n  GROWTH\n  < /div>\n  < div\nstyle = {{\n  fontSize: \"48px\",\n    fontWeight: \"800\",\n      color: \"#2d2d2d\",\n        lineHeight: \"1\",\n            }}\n          >\n  +{ displayValue.toFixed(0) } %\n  </div>\n  < /div>\n\n{/* Chart Container */ }\n<div\n          style={\n  {\n    flex: 1,\n      position: \"relative\",\n        marginBottom: \"40px\",\n          opacity: barsOpacity,\n          }\n}\n        >\n  {/* Chart Bars */ }\n  < div\nstyle = {{\n  display: \"flex\",\n    alignItems: \"flex-end\",\n      height: \"200px\",\n        gap: \"3px\",\n          paddingBottom: \"20px\",\n            }}\n          >\n  {\n    chartData.map((height, index) => (\n      <div\n                key= { index }\n                style = {{\n      flex: 1,\n      backgroundColor: \"#9d8bc9\",\n      height: `${height * 100}%`,\n      borderRadius: \"1px\",\n      opacity: 0.8,\n    }}\n  />\n            ))}\n</div>\n\n{/* Yellow Line and Dot */ }\n<div\n            style={\n  {\n    position: \"absolute\",\n      bottom: \"20px\",\n        left: `${lineProgress * 100}%`,\n          transform: \"translateX(-50%)\",\n            height: \"200px\",\n              display: \"flex\",\n                flexDirection: \"column\",\n                  alignItems: \"center\",\n                    justifyContent: \"flex-end\",\n            }\n}\n          >\n  {/* Yellow Line - increased stroke and height matches current value */ }\n  < div\nstyle = {{\n  width: \"4px\", // Increased from 2px\n    height: `${currentValue * 180}px`, // Height matches current value\n      backgroundColor: \"#f4d03f\",\n        boxShadow: \"0 0 8px rgba(244, 208, 63, 0.3)\",\n          position: \"relative\",\n              }}\n            >\n  {/* Yellow Dot positioned at the top of the line */ }\n  < div\nstyle = {{\n  position: \"absolute\",\n    top: \"-6px\", // Position at top of line\n      left: \"50%\",\n        transform: \"translateX(-50%)\",\n          width: \"12px\",\n            height: \"12px\",\n              backgroundColor: \"#f4d03f\",\n                borderRadius: \"50%\",\n                  boxShadow: \"0 2px 8px rgba(244, 208, 63, 0.4)\",\n                }}\n/>\n  < /div>\n  < /div>\n  < /div>\n\n{/* Button */ }\n<div\n          style={\n  {\n    opacity: buttonOpacity,\n      transform: `scale(${buttonScale})`,\n          }\n}\n        >\n  <div\n            style={\n  {\n    backgroundColor: \"#2d2d2d\",\n      color: \"white\",\n        padding: \"16px 24px\",\n          borderRadius: \"8px\",\n            fontSize: \"14px\",\n              fontWeight: \"600\",\n                textAlign: \"center\",\n                  cursor: \"pointer\",\n                    display: \"flex\",\n                      alignItems: \"center\",\n                        justifyContent: \"center\",\n                          gap: \"8px\",\n            }\n}\n          >\n  <div\n              style={\n  {\n    width: \"6px\",\n      height: \"6px\",\n        backgroundColor: \"white\",\n          borderRadius: \"50%\",\n              }\n}\n/>\n            SEE MORE INSIGHTS\n  < /div>\n  < /div>\n  < /div>\n  < /AbsoluteFill>\n  );\n};\n\nexport const durationInFrames_A7K9M3P2 = 150;\nexport default TemplateScene;"}],"meta":{"templateId":"growth-graph-portrait","dbId":"22816869-0648-4306-99aa-af79b9c7ba4d","duration":180,"supportedFormats":["portrait","square"],"promptVariant":"base"}}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Need a landscape (1920Ã—1080) Remotion scene for authentication ui demo with animated login form. Login form animation with floating input fields and CTA button. This should work well for auth flow demo, product onboarding, and SaaS intro. Include input fields, button, and helper text. Animate with slide, focus highlight, and button pulse. Keep the style clean, product, and modern. Palette should lean on neutral and accent. Keep it around 2.5 seconds (75 frames)."},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_A8B9C2D3 = [\n  { type: \"modal-scale-and-typing\", frames: 75 }\n];\n\nlet accumulatedFrames_A8B9C2D3 = 0;\nconst sequences_A8B9C2D3 = script_A8B9C2D3.map(scene => {\n  const start = accumulatedFrames_A8B9C2D3;\n  accumulatedFrames_A8B9C2D3 += scene.frames;\n  return { ...scene, start, end: accumulatedFrames_A8B9C2D3 };\n});\n\nconst totalFrames_A8B9C2D3 = script_A8B9C2D3.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_A8B9C2D3 = totalFrames_A8B9C2D3;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animated gradient background from scene 2\n  const cycleDuration = fps * 8;\n  \n  // Animate hue 1: 240Â° â†’ 230Â° (dark blue variations)\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [240, 230, 240],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: 192Â° â†’ 185Â° (light blue variations)\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [192, 185, 192],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 100% â†’ 95% â†’ 100% for dark blue, 77% â†’ 85% â†’ 77% for light blue\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [100, 95, 100],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [77, 85, 77],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 14% â†’ 18% â†’ 14% for dark blue, 62% â†’ 58% â†’ 62% for light blue\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [14, 18, 14],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [62, 58, 62],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: Â±25Â° around 135Â° (110Â° â†’ 160Â°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [110, 160, 110],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%))`;\n\n  // Modal scales up by 20% over the animation duration\n  const modalScaleProgress = spring({\n    frame,\n    fps,\n    config: { damping: 15, stiffness: 80 }\n  });\n  const modalScale = interpolate(modalScaleProgress, [0, 1], [1, 1.4]);\n\n  // Typing animations start immediately\n  const emailText = \"elon@spacex.com\";\n  const passwordText = \"â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢\";\n  \n  const typedEmailLength = Math.max(0, Math.min(emailText.length, Math.floor(frame / 3)));\n  const typedPasswordLength = Math.max(0, Math.min(passwordText.length, Math.floor((frame - 30) / 2.5)));\n\n  return (\n    <AbsoluteFill style={{ background: gradientStyle }}>\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"40%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${modalScale})`,\n          width: \"400px\",\n          borderRadius: \"24px\",\n          background: \"linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(18,18,18,1) 100%)\",\n          backdropFilter: \"blur(10px)\",\n          boxShadow: \"0 25px 50px rgba(0,0,0,0.5)\",\n          padding: \"32px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\"\n        }}\n      >\n        <div\n          style={{\n            width: \"48px\",\n            height: \"48px\",\n            borderRadius: \"50%\",\n            background: \"rgba(255,255,255,0.2)\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            marginBottom: \"24px\"\n          }}\n        >\n          <window.IconifyIcon \n            icon=\"mdi:hexagon-multiple\" \n            style={{ \n              fontSize: \"24px\", \n              color: \"white\" \n            }} \n          />\n        </div>\n\n        <h2\n          style={{\n            fontSize: \"28px\",\n            fontFamily: \"Inter\",\n            fontWeight: \"600\",\n            color: \"white\",\n            marginBottom: \"32px\",\n            textAlign: \"center\"\n          }}\n        >\n          Bazaar\n        </h2>\n\n        <div style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", gap: \"16px\" }}>\n          <input\n            style={{\n              width: \"100%\",\n              padding: \"12px 20px\",\n              borderRadius: \"12px\",\n              background: \"rgba(255,255,255,0.1)\",\n              border: \"none\",\n              color: \"white\",\n              fontSize: \"14px\",\n              fontFamily: \"Inter\",\n              outline: \"none\"\n            }}\n            placeholder=\"Email\"\n            value={emailText.substring(0, typedEmailLength)}\n            readOnly\n          />\n\n          <input\n            type=\"password\"\n            style={{\n              width: \"100%\",\n              padding: \"12px 20px\",\n              borderRadius: \"12px\",\n              background: \"rgba(255,255,255,0.1)\",\n              border: \"none\",\n              color: \"white\",\n              fontSize: \"14px\",\n              fontFamily: \"Inter\",\n              outline: \"none\"\n            }}\n            placeholder=\"Password\"\n            value={frame >= 30 ? passwordText.substring(0, typedPasswordLength) : \"\"}\n            readOnly\n          />\n        </div>\n\n        <div style={{ width: \"100%\", height: \"1px\", background: \"rgba(255,255,255,0.1)\", margin: \"24px 0\" }} />\n\n        <button\n          style={{\n            width: \"100%\",\n            padding: \"12px 20px\",\n            borderRadius: \"50px\",\n            background: \"rgba(255,255,255,0.1)\",\n            border: \"none\",\n            color: \"white\",\n            fontSize: \"14px\",\n            fontFamily: \"Inter\",\n            fontWeight: \"500\",\n            marginBottom: \"12px\",\n            cursor: \"pointer\"\n          }}\n        >\n          Sign in\n        </button>\n\n        <button\n          style={{\n            width: \"100%\",\n            padding: \"12px 20px\",\n            borderRadius: \"50px\",\n            background: \"linear-gradient(180deg, #232526 0%, #2d2e30 100%)\",\n            border: \"none\",\n            color: \"white\",\n            fontSize: \"14px\",\n            fontFamily: \"Inter\",\n            fontWeight: \"500\",\n            marginBottom: \"16px\",\n            cursor: \"pointer\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            gap: \"8px\"\n          }}\n        >\n          <window.IconifyIcon \n            icon=\"mdi:google\" \n            style={{ \n              fontSize: \"20px\", \n              color: \"#4285f4\" \n            }} \n          />\n          Continue with Google\n        </button>\n      </div>\n\n      <div\n        style={{\n          position: \"absolute\",\n          bottom: \"80px\",\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          textAlign: \"center\"\n        }}\n      >\n        <p\n          style={{\n            fontSize: \"28px\",\n            color: \"rgba(255,255,255,0.6)\",\n            fontFamily: \"Inter\",\n            marginBottom: \"24px\"\n          }}\n        >\n          Join <span style={{ color: \"white\", fontWeight: \"500\" }}>thousands</span> of developers who are already using Bazaar.\n        </p>\n\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            gap: \"-16px\"\n          }}\n        >\n          <img\n            src={window.BazaarAvatars['middle-eastern-man']}\n            style={{\n              width: \"64px\",\n              height: \"64px\",\n              borderRadius: \"50%\",\n              border: \"2px solid #181824\",\n              objectFit: \"cover\",\n              marginRight: \"-16px\"\n            }}\n          />\n          <img\n            src={window.BazaarAvatars['white-woman']}\n            style={{\n              width: \"64px\",\n              height: \"64px\",\n              borderRadius: \"50%\",\n              border: \"2px solid #181824\",\n              objectFit: \"cover\",\n              marginRight: \"-16px\"\n            }}\n          />\n          <img\n            src={window.BazaarAvatars['black-man']}\n            style={{\n              width: \"64px\",\n              height: \"64px\",\n              borderRadius: \"50%\",\n              border: \"2px solid #181824\",\n              objectFit: \"cover\",\n              marginRight: \"-16px\"\n            }}\n          />\n          <img\n            src={window.BazaarAvatars['asian-woman']}\n            style={{\n              width: \"64px\",\n              height: \"64px\",\n              borderRadius: \"50%\",\n              border: \"2px solid #181824\",\n              objectFit: \"cover\"\n            }}\n          />\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n}"}],"meta":{"templateId":"log-in-db","dbId":"2e6be68a-d83a-4ddb-a1ff-0be7ce9a9347","duration":75,"supportedFormats":["landscape"],"promptVariant":"base"}}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Need a portrait (1080Ã—1920) Remotion scene for portrait gradient globe background with ambient rotation. Portrait ambient gradient globe with slow rotational motion and glowing rings. This should work well for portrait hero, mobile intro background, and vertical video loop. Include sphere, halo, and gradient bands. Animate with rotation, gradient drift, and glow. Keep the style futuristic, calm, and tech. Palette should lean on blue-purple gradient. Keep it around 6 seconds (180 frames)."},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_a8f3b2c1 = [\n  { type: \"gradient-background\", frames: 180 }\n];\n\nlet accumulatedFrames_a8f3b2c1 = 0;\nconst sequences_a8f3b2c1 = script_a8f3b2c1.map(scene => {\n  const start = accumulatedFrames_a8f3b2c1;\n  accumulatedFrames_a8f3b2c1 += scene.frames;\n  return { ...scene, start, end: accumulatedFrames_a8f3b2c1 };\n});\n\nconst totalFrames_a8f3b2c1 = script_a8f3b2c1.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_a8f3b2c1 = totalFrames_a8f3b2c1;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Slower animated gradient background rotation\n  const gradientRotation = interpolate(\n    frame,\n    [0, totalFrames_a8f3b2c1],\n    [0, 180],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Smoother color shift for gradient with easing\n  const hue1 = spring({\n    frame,\n    fps,\n    config: {\n      damping: 200,\n      stiffness: 50,\n      mass: 1\n    },\n    from: 280,\n    to: interpolate(\n      frame,\n      [0, totalFrames_a8f3b2c1 / 2, totalFrames_a8f3b2c1],\n      [280, 320, 260]\n    )\n  });\n\n  const hue2 = spring({\n    frame,\n    fps,\n    config: {\n      damping: 200,\n      stiffness: 50,\n      mass: 1\n    },\n    from: 180,\n    to: interpolate(\n      frame,\n      [0, totalFrames_a8f3b2c1 / 2, totalFrames_a8f3b2c1],\n      [180, 220, 160]\n    )\n  });\n\n  return (\n    <AbsoluteFill style= {{ backgroundColor: \"#f5f5f5\" }\n}>\n  {/* Animated gradient background */ }\n  < div\nstyle = {{\n  position: \"absolute\",\n    top: \"50%\",\n      left: \"50%\",\n        width: \"600px\",\n          height: \"600px\",\n            transform: `translate(-50%, -50%) rotate(${gradientRotation}deg)`,\n              background: `conic-gradient(from 0deg, hsl(${hue1}, 70%, 60%), hsl(${hue2}, 80%, 65%), hsl(${hue1 + 60}, 75%, 70%), hsl(${hue1}, 70%, 60%))`,\n                borderRadius: \"50%\",\n                  filter: \"blur(60px)\",\n                    opacity: \"0.8\",\n                      zIndex: 1\n}}\n/>\n  < /AbsoluteFill>\n  );\n}"}],"meta":{"templateId":"gradient-globe-portrait","dbId":"3a164c8d-cad8-481c-ad1f-f8aac11c8c5c","duration":180,"supportedFormats":["portrait"],"promptVariant":"base"}}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Need a landscape (1920Ã—1080) Remotion scene for responsive kinetic text animation for multiple aspect ratios. Responsive text animation that adapts to multiple aspect ratios. This should work well for multi-platform intro, product highlight, and quick promo. Include headline text and subheadline. Animate with stagger, scale, and fade. Keep the style clean, minimal, and versatile. Palette should lean on neutral and brand accent. Keep it around 1 seconds (30 frames)."},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, interpolate } = window.Remotion;\n\nconst script_mf165pbn = [\n  { text: \"My name is Jeff\", frames: 30 }\n];\n\nconst sequences_mf165pbn = [];\nlet accumulatedFrames_mf165pbn = 0;\n\nscript_mf165pbn.forEach((item, index) => {\n  sequences_mf165pbn.push({\n    start: accumulatedFrames_mf165pbn,\n    duration: item.frames,\n    text: item.text\n  });\n  accumulatedFrames_mf165pbn += item.frames;\n});\n\nconst totalFrames_mf165pbn = script_mf165pbn.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_mf165pbn = totalFrames_mf165pbn;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  \n  const words = [\"My\", \"name\", \"is\", \"Jeff\"];\n  const animationFrames = 4; // Faster animation per word\n  const pauseFrames = 10; // Pause on final word\n  const totalAnimationTime = 30 - pauseFrames; // 20 frames for all animations\n  const framesPerWord = totalAnimationTime / words.length; // 5 frames per word\n  \n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: \"white\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        gap: \"20px\"\n      }}\n    >\n      {words.map((word, index) => {\n        const startFrame = index * framesPerWord;\n        const endFrame = startFrame + animationFrames;\n        \n        const opacity = interpolate(\n          frame,\n          [startFrame, endFrame],\n          [0, 1],\n          {\n            extrapolateLeft: \"clamp\",\n            extrapolateRight: \"clamp\"\n          }\n        );\n        \n        const translateY = interpolate(\n          frame,\n          [startFrame, endFrame],\n          [30, 0],\n          {\n            extrapolateLeft: \"clamp\",\n            extrapolateRight: \"clamp\"\n          }\n        );\n        \n        return (\n          <div\n            key={index}\n            style={{\n              fontSize: \"80px\",\n              fontFamily: \"Inter\",\n              fontWeight: \"700\",\n              color: \"black\",\n              opacity: opacity,\n              transform: `translateY(${translateY}px)`,\n            }}\n          >\n            {word}\n          </div>\n        );\n      })}\n    </AbsoluteFill>\n  );\n}"}],"meta":{"templateId":"text-animation-db","dbId":"00404900-c51c-401a-a36e-ae3234deb4d4","duration":30,"supportedFormats":["landscape","portrait","square"],"promptVariant":"base"}}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Yellow bar chart animation in portrait (1080Ã—1920). Leaning into a bright and playful look. Make sure we show bars, percent badge, and comparison labels. Use spring scale and counter for motion. Target duration: 2.2 seconds (65 frames)."},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Img } = window.Remotion;\n\n// Auto-generated defaults for undefined variables\nconst padding = 16;\nconst gap = 12;\n\nconst TemplateScene = () => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Card entrance animation with Apple-style spring physics\n  const cardScale = spring({ frame, fps,\n    config: {\n      damping: 15,\n      stiffness: 300,\n      mass: 0.8,\n      overshootClamping: false,\n    },\n  });\n\n  const cardOpacity = spring({ frame, fps,\n    config: {\n      damping: 20,\n      stiffness: 400,\n      mass: 0.5,\n    },\n  });\n\n  // Main number animation - UPDATED to animate from 0 to 56% over first 2 seconds (60 frames)\n  const elementsProgress = interpolate(frame, [0, 60], [0, 1], {\n    extrapolateLeft: 'clamp',\n    extrapolateRight: 'clamp'\n  });\n\n  const animatedNumber = Math.floor(56 * elementsProgress);\n\n  // Bar animations with staggered spring timing for natural feel\n  const maxBarHeight = 180;\n  \n  const bar1Height = spring({ frame: frame - 10, fps,\n    config: {\n      damping: 16,\n      stiffness: 320,\n      mass: 0.7,\n      overshootClamping: false,\n    },\n  }) * (47 * maxBarHeight / 100);\n\n  const bar2Height = spring({ frame: frame - 15, fps,\n    config: {\n      damping: 16,\n      stiffness: 320,\n      mass: 0.7,\n      overshootClamping: false,\n    },\n  }) * (98 * maxBarHeight / 100);\n\n  const bar3Height = spring({ frame: frame - 20, fps,\n    config: {\n      damping: 16,\n      stiffness: 320,\n      mass: 0.7,\n      overshootClamping: false,\n    },\n  }) * (69 * maxBarHeight / 100);\n\n  const bar4Height = spring({ frame: frame - 25, fps,\n    config: {\n      damping: 16,\n      stiffness: 320,\n      mass: 0.7,\n      overshootClamping: false,\n    },\n  }) * (84 * maxBarHeight / 100);\n\n  const bar5Height = spring({ frame: frame - 30, fps,\n    config: {\n      damping: 16,\n      stiffness: 320,\n      mass: 0.7,\n      overshootClamping: false,\n    },\n  }) * (56 * maxBarHeight / 100);\n\n  const bar6Height = spring({ frame: frame - 35, fps,\n    config: {\n      damping: 16,\n      stiffness: 320,\n      mass: 0.7,\n      overshootClamping: false,\n    },\n  }) * (77 * maxBarHeight / 100);\n\n  // Button animation with delayed spring entrance\n  const buttonOpacity = spring({ frame: frame - 40, fps,\n    config: {\n      damping: 20,\n      stiffness: 400,\n      mass: 0.5,\n    },\n  });\n\n  const buttonScale = spring({\n    frame: frame - 40,\n    fps,\n    config: {\n      damping: 12,\n      stiffness: 350,\n      mass: 0.6,\n      overshootClamping: false,\n    },\n  });\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#e5e5e5\" }}>\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${cardScale})`,\n          opacity: cardOpacity,\n          width: \"600px\",\n          height: \"650px\",\n          backgroundColor: \"#f4e976\",\n          borderRadius: \"24px\",\n          padding: \"60px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          fontFamily: \"Inter\",\n        }}\n      >\n        {/* Header */}\n        <div\n          style={{\n            fontSize: \"18px\",\n            fontWeight: \"600\",\n            color: \"#4a4a4a\",\n            marginBottom: \"20px\",\n            letterSpacing: \"1px\",\n          }}\n        >\n          ENGAGEMENT\n        </div>\n\n        {/* Main Number */}\n        <div\n          style={{\n            fontSize: \"72px\",\n            fontWeight: \"800\",\n            color: \"#2d2d2d\",\n            marginBottom: \"60px\",\n            lineHeight: \"1\",\n          }}\n        >\n          {animatedNumber}%\n        </div>\n\n        {/* Chart Container */}\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            height: `${maxBarHeight}px`,\n            marginBottom: \"60px\",\n            gap: \"8px\",\n            position: \"relative\",\n          }}\n        >\n          {/* Bar 1 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${Math.max(0, bar1Height)}px`,\n                backgroundColor: \"#3d3d3d\",\n                borderRadius: \"4px 4px 0 0\",\n              }}\n            >\n              {bar1Height > 60 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>47%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 2 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${Math.max(0, bar2Height)}px`,\n                backgroundColor: \"#6b6b3d\",\n                borderRadius: \"4px 4px 0 0\",\n              }}\n            >\n              {bar2Height > 140 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>98%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 3 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${Math.max(0, bar3Height)}px`,\n                backgroundColor: \"#8b8b5d\",\n                borderRadius: \"4px 4px 0 0\",\n              }}\n            >\n              {bar3Height > 90 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>69%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 4 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${Math.max(0, bar4Height)}px`,\n                backgroundColor: \"#abab7d\",\n                borderRadius: \"4px 4px 0 0\",\n              }}\n            >\n              {bar4Height > 120 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>84%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 5 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${Math.max(0, bar5Height)}px`,\n                backgroundColor: \"#cbcb9d\",\n                borderRadius: \"4px 4px 0 0\",\n              }}\n            >\n              {bar5Height > 70 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>56%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 6 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${Math.max(0, bar6Height)}px`,\n                backgroundColor: \"#ebebbd\",\n                borderRadius: \"4px 4px 0 0\",\n              }}\n            >\n              {bar6Height > 100 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>77%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Button */}\n        <div\n          style={{\n            opacity: buttonOpacity,\n            transform: `scale(${buttonScale})`,\n            alignSelf: \"flex-start\",\n          }}\n        >\n          <div\n            style={{\n              backgroundColor: \"#2d2d2d\",\n              color: \"white\",\n              padding: \"16px 32px\",\n              borderRadius: \"24px\",\n              fontSize: \"14px\",\n              fontWeight: \"600\",\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"8px\",\n            }}\n          >\n            <div\n              style={{\n                width: \"8px\",\n                height: \"8px\",\n                backgroundColor: \"white\",\n                borderRadius: \"50%\",\n              }}\n            />\n            SEE MORE INSIGHTS\n          </div>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n};\n\nexport const durationInFrames_A7B9C2E1 = 120;\nexport default TemplateScene;"}],"meta":{"templateId":"yellow-bar-chart-db","dbId":"7720e8bb-47e1-423f-b085-99ed3ccc2543","duration":65,"supportedFormats":["portrait","square"],"promptVariant":"phrase-1"}}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Need a portrait (1080Ã—1920) Remotion scene for portrait notification stack demonstrating multiple app alerts. Portrait stack of app notifications with icon pulses, content fade-ins, and layered cards. This should work well for mobile product hero, notification showcase, and marketing reels. Include notification cards, icons, timestamp, and preview text. Animate with slide, fade, and icon pulse. Keep the style clean, product, and trust-building. Palette should lean on white cards and accent icon colors. Keep it around 4 seconds (120 frames)."},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_A1B2C3D4 = [\n  { type: \"notification\", frames: 120 } // Extended to 4 seconds\n];\n\nconst sequences_A1B2C3D4 = [];\nlet accumulatedFrames_A1B2C3D4 = 0;\n\nscript_A1B2C3D4.forEach((item, index) => {\n  sequences_A1B2C3D4.push({\n    ...item,\n    startFrame: accumulatedFrames_A1B2C3D4,\n    endFrame: accumulatedFrames_A1B2C3D4 + item.frames\n  });\n  accumulatedFrames_A1B2C3D4 += item.frames;\n});\n\nconst totalFrames_A1B2C3D4 = script_A1B2C3D4.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_A1B2C3D4 = totalFrames_A1B2C3D4;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n  \n  const msToFrames = (ms) => Math.round((ms / 1000) * fps);\n  \n  // Animation timing in frames - restored independent animations\n  const bgStart = msToFrames(0);\n  const bgEnd = msToFrames(180);\n  const iconStart = msToFrames(40);\n  const iconEnd = msToFrames(340);\n  const senderStart = msToFrames(90);\n  const senderEnd = msToFrames(290);\n  const timestampStart = msToFrames(90);\n  const timestampEnd = msToFrames(290);\n  const previewStart = msToFrames(180);\n  const previewEnd = msToFrames(380);\n  const exitStart = msToFrames(4800); // Extended by 1 second (1000ms)\n  const exitEnd = msToFrames(5000); // Extended by 1 second (1000ms)\n  \n  // First notification slide-up animation - starts immediately and uses cubic easing\n  const slideUpStart = 0;\n  const slideUpEnd = msToFrames(600); // 600ms slide duration\n  \n  const notificationY = interpolate(\n    frame,\n    [slideUpStart, slideUpEnd],\n    [200, 0], // Slide from 200px below to final position\n    { \n      extrapolateLeft: \"clamp\", \n      extrapolateRight: \"clamp\",\n      easing: (t) => t * t * (3 - 2 * t) // Cubic easing (smoothstep)\n    }\n  );\n  \n  // Second notification animation - appears after first message slides up + 20 frame pause\n  const secondNotifStart = slideUpEnd + 20; // Wait for slide to complete + 20 frame pause\n  const secondNotifSlideEnd = secondNotifStart + msToFrames(600);\n  \n  const secondNotificationY = interpolate(\n    frame,\n    [secondNotifStart, secondNotifSlideEnd],\n    [200, -120], // Slide from bottom to above first notification with padding\n    { \n      extrapolateLeft: \"clamp\", \n      extrapolateRight: \"clamp\",\n      easing: (t) => t * t * (3 - 2 * t) // Cubic easing (smoothstep)\n    }\n  );\n  \n  // Third notification animation - appears after second notification slides up + 20 frame pause\n  const thirdNotifStart = secondNotifSlideEnd + 20; // Wait for second slide to complete + 20 frame pause\n  const thirdNotifSlideEnd = thirdNotifStart + msToFrames(600);\n  \n  const thirdNotificationY = interpolate(\n    frame,\n    [thirdNotifStart, thirdNotifSlideEnd],\n    [200, -240], // Slide from bottom to above second notification with padding\n    { \n      extrapolateLeft: \"clamp\", \n      extrapolateRight: \"clamp\",\n      easing: (t) => t * t * (3 - 2 * t) // Cubic easing (smoothstep)\n    }\n  );\n  \n  // Background animation - independent\n  const bgOpacity = interpolate(\n    frame,\n    [bgStart, bgEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const bgScale = interpolate(\n    frame,\n    [bgStart, bgEnd],\n    [0.96, 1.0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  // Icon animation - independent\n  const iconOpacity = interpolate(\n    frame,\n    [iconStart, iconEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const iconScale = spring({\n    frame: frame - iconStart,\n    fps,\n    config: { damping: 8, stiffness: 120 },\n    from: 0.6,\n    to: 1.0\n  });\n  \n  // Sender animation - independent\n  const senderOpacity = interpolate(\n    frame,\n    [senderStart, senderEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const senderY = interpolate(\n    frame,\n    [senderStart, senderEnd],\n    [16, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  // Timestamp animation - independent\n  const timestampOpacity = interpolate(\n    frame,\n    [timestampStart, timestampEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const timestampScale = spring({\n    frame: frame - timestampStart,\n    fps,\n    config: { damping: 8, stiffness: 120 },\n    from: 0.6,\n    to: 1.0\n  });\n  \n  // Preview animation - independent\n  const previewOpacity = interpolate(\n    frame,\n    [previewStart, previewEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const previewY = interpolate(\n    frame,\n    [previewStart, previewEnd],\n    [20, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  // Exit animation - independent - updated timing\n  const exitOpacity = frame >= exitStart ? interpolate(\n    frame,\n    [exitStart, exitEnd],\n    [1, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  ) : 1;\n  \n  const exitScale = frame >= exitStart ? interpolate(\n    frame,\n    [exitStart, exitEnd],\n    [1.0, 0.8],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  ) : 1;\n  \n  // NEW: Fade out animation for all messages over final 10 frames (110-120)\n  const fadeOutOpacity = interpolate(\n    frame,\n    [110, 120], // Updated to final 10 frames of extended duration\n    [1, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  // iPhone dimensions and positioning - CENTERED HORIZONTALLY\n  const phoneWidth = 375; // Fixed width as requested\n  const phoneHeight = 812; // Fixed height as requested\n  const phoneX = width * 0.5; // Changed from 0.75 to 0.5 for horizontal center\n  const phoneY = height * 0.5;\n  \n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#FFFFFF\" }}>\n      {/* iPhone Container */}\n      <div style={{\n        position: \"absolute\",\n        left: phoneX,\n        top: phoneY,\n        transform: \"translate(-50%, -50%)\",\n        width: phoneWidth,\n        height: phoneHeight\n      }}>\n        {/* iPhone Frame */}\n        <div style={{\n          position: \"absolute\",\n          width: \"100%\",\n          height: \"100%\",\n          backgroundColor: \"#000\",\n          borderRadius: phoneWidth * 0.167, // Proportional border radius\n          padding: phoneWidth * 0.027 // Proportional padding\n        }}>\n          {/* iPhone Screen */}\n          <div style={{\n            position: \"relative\",\n            width: \"100%\",\n            height: \"100%\",\n            borderRadius: phoneWidth * 0.14,\n            overflow: \"hidden\",\n            background: \"linear-gradient(135deg, #4A90E2 0%, #7B68EE 25%, #87CEEB 50%, #F4A460 75%, #32CD32 100%)\"\n          }}>\n            {/* Dynamic Island - moved up more */}\n            <div style={{\n              position: \"absolute\",\n              top: phoneWidth * 0.035, // Changed from 0.04 to 0.035 to move up more\n              left: \"50%\",\n              transform: \"translateX(-50%)\",\n              width: phoneWidth * 0.4,\n              height: phoneWidth * 0.1,\n              backgroundColor: \"#000\",\n              borderRadius: phoneWidth * 0.05\n            }} />\n            \n            {/* Status Bar */}\n            <div style={{\n              position: \"absolute\",\n              top: phoneWidth * 0.067,\n              left: phoneWidth * 0.067,\n              color: \"#fff\",\n              fontSize: phoneWidth * 0.047,\n              fontWeight: \"600\",\n              fontFamily: \"SF Pro Display\"\n            }}>\n              T-mobile\n            </div>\n            <div style={{\n              position: \"absolute\",\n              top: phoneWidth * 0.05,\n              right: phoneWidth * 0.067,\n              color: \"#fff\",\n              fontSize: phoneWidth * 0.047,\n              fontWeight: \"600\",\n              display: \"flex\",\n              gap: phoneWidth * 0.017,\n              alignItems: \"center\"\n            }}>\n              <window.IconifyIcon icon=\"material-symbols:signal-cellular-4-bar\" style={{ fontSize: phoneWidth * 0.053 }} />\n              <window.IconifyIcon icon=\"material-symbols:wifi\" style={{ fontSize: phoneWidth * 0.053 }} />\n              <window.IconifyIcon icon=\"material-symbols:battery-full\" style={{ fontSize: phoneWidth * 0.053 }} />\n            </div>\n            \n            {/* Time */}\n            <div style={{\n              position: \"absolute\",\n              top: phoneWidth * 0.37,\n              left: \"50%\",\n              transform: \"translateX(-50%)\",\n              color: \"#fff\",\n              fontSize: phoneWidth * 0.27,\n              fontWeight: \"600\",\n              textAlign: \"center\",\n              lineHeight: \"1\",\n              fontFamily: \"Inter\"\n            }}>\n              9:41\n            </div>\n            \n            {/* Third notification (Elon Musk) - appears after second message slides up + 20 frame pause */}\n            {frame >= thirdNotifStart && (\n              <div\n                style={{\n                  position: \"absolute\",\n                  bottom: \"55px\",\n                  left: \"20px\",\n                  right: \"20px\",\n                  transform: `scale(${bgScale * exitScale}) translateY(${thirdNotificationY}px)`,\n                  minHeight: \"80px\",\n                  borderRadius: \"12px\",\n                  background: \"rgba(240, 240, 242, 0.92)\",\n                  backdropFilter: \"blur(20px)\",\n                  padding: \"16px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  opacity: bgOpacity * exitOpacity * fadeOutOpacity,\n                  boxShadow: \"0 8px 16px rgba(0, 0, 0, 0.15)\",\n                  zIndex: 3\n                }}\n              >\n                {/* App Icon - X (Twitter) */}\n                <div\n                  style={{\n                    width: \"48px\",\n                    height: \"48px\",\n                    borderRadius: \"12px\",\n                    background: \"#000000\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    opacity: iconOpacity,\n                    transform: `scale(${iconScale})`,\n                    flexShrink: 0\n                  }}\n                >\n                  <window.IconifyIcon \n                    icon=\"simple-icons:x\" \n                    style={{\n                      fontSize: \"24px\",\n                      color: \"#FFFFFF\"\n                    }}\n                  />\n                </div>\n                \n                {/* Content Area */}\n                <div\n                  style={{\n                    flex: 1,\n                    marginLeft: \"12px\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    minWidth: 0\n                  }}\n                >\n                  {/* Sender */}\n                  <div\n                    style={{\n                      fontFamily: \"Inter\",\n                      fontWeight: \"700\",\n                      fontSize: \"14px\",\n                      color: \"#0B0B0F\",\n                      opacity: senderOpacity,\n                      transform: `translateY(${senderY}px)`,\n                      lineHeight: \"1.2\",\n                      marginBottom: \"2px\",\n                      whiteSpace: \"nowrap\",\n                      overflow: \"hidden\",\n                      textOverflow: \"ellipsis\"\n                    }}\n                  >\n                    Elon Musk\n                  </div>\n                  \n                  {/* Message Preview */}\n                  <div\n                    style={{\n                      fontFamily: \"Inter\",\n                      fontWeight: \"400\",\n                      fontSize: \"13px\",\n                      color: \"#0B0B0F\",\n                      opacity: previewOpacity,\n                      transform: `translateY(${previewY}px)`,\n                      lineHeight: \"1.3\",\n                      overflow: \"hidden\",\n                      display: \"-webkit-box\",\n                      WebkitLineClamp: 2,\n                      WebkitBoxOrient: \"vertical\"\n                    }}\n                  >\n                    I am god\n                  </div>\n                </div>\n                \n                {/* Timestamp */}\n                <div\n                  style={{\n                    fontFamily: \"Inter\",\n                    fontWeight: \"400\",\n                    fontSize: \"12px\",\n                    color: \"#8E8E93\",\n                    opacity: timestampOpacity,\n                    transform: `scale(${timestampScale})`,\n                    alignSelf: \"flex-start\",\n                    marginTop: \"2px\",\n                    marginLeft: \"8px\",\n                    flexShrink: 0\n                  }}\n                >\n                  now\n                </div>\n              </div>\n            )}\n            \n            {/* Second notification (Mum) - appears after first message slides up + 20 frame pause */}\n            {frame >= secondNotifStart && (\n              <div\n                style={{\n                  position: \"absolute\",\n                  bottom: \"80px\",\n                  left: \"20px\",\n                  right: \"20px\",\n                  transform: `scale(${bgScale * exitScale}) translateY(${secondNotificationY}px)`,\n                  minHeight: \"80px\",\n                  borderRadius: \"12px\",\n                  background: \"rgba(240, 240, 242, 0.92)\",\n                  backdropFilter: \"blur(20px)\",\n                  padding: \"16px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  opacity: bgOpacity * exitOpacity * fadeOutOpacity, // Added fadeOutOpacity\n                  boxShadow: \"0 8px 16px rgba(0, 0, 0, 0.15)\",\n                  zIndex: 2\n                }}\n              >\n                {/* App Icon - Changed to WhatsApp */}\n                <div\n                  style={{\n                    width: \"48px\",\n                    height: \"48px\",\n                    borderRadius: \"12px\",\n                    background: \"linear-gradient(135deg, #25D366, #128C7E)\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    opacity: iconOpacity,\n                    transform: `scale(${iconScale})`,\n                    flexShrink: 0\n                  }}\n                >\n                  <window.IconifyIcon \n                    icon=\"ic:baseline-whatsapp\" \n                    style={{\n                      fontSize: \"32px\",\n                      color: \"#FFFFFF\"\n                    }}\n                  />\n                </div>\n                \n                {/* Content Area */}\n                <div\n                  style={{\n                    flex: 1,\n                    marginLeft: \"12px\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    minWidth: 0\n                  }}\n                >\n                  {/* Sender */}\n                  <div\n                    style={{\n                      fontFamily: \"Inter\",\n                      fontWeight: \"700\",\n                      fontSize: \"14px\",\n                      color: \"#0B0B0F\",\n                      opacity: senderOpacity,\n                      transform: `translateY(${senderY}px)`,\n                      lineHeight: \"1.2\",\n                      marginBottom: \"2px\",\n                      whiteSpace: \"nowrap\",\n                      overflow: \"hidden\",\n                      textOverflow: \"ellipsis\"\n                    }}\n                  >\n                    Mum\n                  </div>\n                  \n                  {/* Message Preview */}\n                  <div\n                    style={{\n                      fontFamily: \"Inter\",\n                      fontWeight: \"400\",\n                      fontSize: \"13px\",\n                      color: \"#0B0B0F\",\n                      opacity: previewOpacity,\n                      transform: `translateY(${previewY}px)`,\n                      lineHeight: \"1.3\",\n                      overflow: \"hidden\",\n                      display: \"-webkit-box\",\n                      WebkitLineClamp: 2,\n                      WebkitBoxOrient: \"vertical\"\n                    }}\n                  >\n                    Come home and clean your room\n                  </div>\n                </div>\n                \n                {/* Timestamp */}\n                <div\n                  style={{\n                    fontFamily: \"Inter\",\n                    fontWeight: \"400\",\n                    fontSize: \"12px\",\n                    color: \"#8E8E93\",\n                    opacity: timestampOpacity,\n                    transform: `scale(${timestampScale})`,\n                    alignSelf: \"flex-start\",\n                    marginTop: \"2px\",\n                    marginLeft: \"8px\",\n                    flexShrink: 0\n                  }}\n                >\n                  now\n                </div>\n              </div>\n            )}\n            \n            {/* First notification (Bazaar Bot) - stays in original position */}\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: \"110px\",\n                left: \"20px\",\n                right: \"20px\",\n                transform: `scale(${bgScale * exitScale}) translateY(${notificationY}px)`,\n                minHeight: \"80px\",\n                borderRadius: \"12px\",\n                background: \"rgba(240, 240, 242, 0.92)\",\n                backdropFilter: \"blur(20px)\",\n                padding: \"16px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                opacity: bgOpacity * exitOpacity * fadeOutOpacity, // Added fadeOutOpacity\n                boxShadow: \"0 8px 16px rgba(0, 0, 0, 0.15)\",\n                zIndex: 1\n              }}\n            >\n              {/* App Icon - independent animation */}\n              <div\n                style={{\n                  width: \"48px\",\n                  height: \"48px\",\n                  borderRadius: \"12px\",\n                  background: \"linear-gradient(135deg, #34C759, #30D158)\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  opacity: iconOpacity,\n                  transform: `scale(${iconScale})`,\n                  flexShrink: 0\n                }}\n              >\n                <window.IconifyIcon \n                  icon=\"material-symbols:chat-bubble-rounded\" \n                  style={{\n                    fontSize: \"24px\",\n                    color: \"#FFFFFF\"\n                  }}\n                />\n              </div>\n              \n              {/* Content Area */}\n              <div\n                style={{\n                  flex: 1,\n                  marginLeft: \"12px\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"center\",\n                  minWidth: 0 // Allows text to wrap properly\n                }}\n              >\n                {/* Sender - independent animation */}\n                <div\n                  style={{\n                    fontFamily: \"Inter\",\n                    fontWeight: \"700\",\n                    fontSize: \"14px\",\n                    color: \"#0B0B0F\",\n                    opacity: senderOpacity,\n                    transform: `translateY(${senderY}px)`,\n                    lineHeight: \"1.2\",\n                    marginBottom: \"2px\",\n                    whiteSpace: \"nowrap\",\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\"\n                  }}\n                >\n                  Bazaar Bot\n                </div>\n                \n                {/* Message Preview - independent animation */}\n                <div\n                  style={{\n                    fontFamily: \"Inter\",\n                    fontWeight: \"400\",\n                    fontSize: \"13px\",\n                    color: \"#0B0B0F\",\n                    opacity: previewOpacity,\n                    transform: `translateY(${previewY}px)`,\n                    lineHeight: \"1.3\",\n                    overflow: \"hidden\",\n                    display: \"-webkit-box\",\n                    WebkitLineClamp: 2,\n                    WebkitBoxOrient: \"vertical\"\n                  }}\n                >\n                  Yet another sick animation ðŸ’ƒ\n                </div>\n              </div>\n              \n              {/* Timestamp - independent animation */}\n              <div\n                style={{\n                  fontFamily: \"Inter\",\n                  fontWeight: \"400\",\n                  fontSize: \"12px\",\n                  color: \"#8E8E93\",\n                  opacity: timestampOpacity,\n                  transform: `scale(${timestampScale})`,\n                  alignSelf: \"flex-start\",\n                  marginTop: \"2px\",\n                  marginLeft: \"8px\",\n                  flexShrink: 0\n                }}\n              >\n                now\n              </div>\n            </div>\n            \n            {/* Lock Screen Icons - Torch and Camera - repositioned with more spacing */}\n            <div style={{\n              position: \"absolute\",\n              bottom: \"40px\",\n              left: \"50%\",\n              transform: \"translateX(-50%)\",\n              width: \"280px\", // Increased width for more spacing\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              opacity: bgOpacity * exitOpacity\n            }}>\n              {/* Torch Icon - moved more left */}\n              <div style={{\n                width: \"50px\",\n                height: \"50px\",\n                borderRadius: \"50%\",\n                backgroundColor: \"rgba(255, 255, 255, 0.2)\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                backdropFilter: \"blur(10px)\",\n                border: \"1px solid rgba(255, 255, 255, 0.3)\"\n              }}>\n                <window.IconifyIcon \n                  icon=\"material-symbols:flashlight-on\" \n                  style={{\n                    fontSize: \"24px\",\n                    color: \"#FFFFFF\"\n                  }}\n                />\n              </div>\n              \n              {/* Camera Icon - moved more right */}\n              <div style={{\n                width: \"50px\",\n                height: \"50px\",\n                borderRadius: \"50%\",\n                backgroundColor: \"rgba(255, 255, 255, 0.2)\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                backdropFilter: \"blur(10px)\",\n                border: \"1px solid rgba(255, 255, 255, 0.3)\"\n              }}>\n                <window.IconifyIcon \n                  icon=\"material-symbols:photo-camera\" \n                  style={{\n                    fontSize: \"24px\",\n                    color: \"#FFFFFF\"\n                  }}\n                />\n              </div>\n            </div>\n            \n            {/* iPhone Home Indicator Bar */}\n            <div style={{\n              position: \"absolute\",\n              bottom: \"8px\",\n              left: \"50%\",\n              transform: \"translateX(-50%)\",\n              width: \"134px\",\n              height: \"5px\",\n              backgroundColor: \"rgba(255, 255, 255, 0.6)\",\n              borderRadius: \"2.5px\"\n            }} />\n          </div>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n}"}],"meta":{"templateId":"homescreen-notifications-portrait","dbId":"ea9d3b6f-f681-4224-92c1-ace15afb989f","duration":120,"supportedFormats":["portrait","square"],"promptVariant":"base"}}
