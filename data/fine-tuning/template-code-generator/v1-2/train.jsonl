{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Testimonial animation"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst testimonials_8a7f2b3c = [\n  {\n    text: \"The support team is exceptional, guiding us through setup and providing ongoing assistance, ensuring our satisfaction.\",\n    name: \"Saman Malik\",\n    role: \"Customer Support Lead\",\n    avatar: window.BazaarAvatars['asian-woman']\n  },\n  {\n    text: \"Its robust features and quick support have transformed our workflow, making us significantly more efficient.\",\n    name: \"Zainab Hussain\", \n    role: \"Project Manager\",\n    avatar: window.BazaarAvatars['middle-eastern-man']\n  },\n  {\n    text: \"Using this ERP, our online presence and conversions significantly improved, boosting business performance.\",\n    name: \"Hassan Ali\",\n    role: \"E-commerce Manager\", \n    avatar: window.BazaarAvatars['black-man']\n  },\n  {\n    text: \"This ERP revolutionized our operations, streamlining finance and inventory. The cloud-based platform keeps us productive, even remotely.\",\n    name: \"Briana Patton\",\n    role: \"Operations Manager\",\n    avatar: window.BazaarAvatars['white-woman']\n  },\n  {\n    text: \"The smooth implementation exceeded expectations. It streamlined processes, improving overall business performance.\",\n    name: \"Aliza Khan\",\n    role: \"Business Analyst\",\n    avatar: window.BazaarAvatars['hispanic-man']\n  },\n  {\n    text: \"Our business functions improved with a user-friendly design and positive customer feedback.\",\n    name: \"Farhan Siddiqui\",\n    role: \"Marketing Director\",\n    avatar: window.BazaarAvatars['asian-woman']\n  }\n];\n\nconst script_8a7f2b3c = [\n  { type: \"header\", frames: 360 },\n  { type: \"testimonials\", frames: 360 }\n];\n\nlet accumulatedFrames_8a7f2b3c = 0;\nconst sequences_8a7f2b3c = script_8a7f2b3c.map(item => {\n  const sequence = { ...item, start: accumulatedFrames_8a7f2b3c };\n  accumulatedFrames_8a7f2b3c += item.frames;\n  return sequence;\n});\n\nconst totalFrames_8a7f2b3c = script_8a7f2b3c.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_8a7f2b3c = totalFrames_8a7f2b3c;\n\nconst TestimonialCard = ({ testimonial, delay, speed }) => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n  \n  const cardSpring = spring({\n    frame: frame - delay,\n    fps,\n    config: { damping: 12, stiffness: 100 }\n  });\n\n  const translateY = interpolate(\n    frame,\n    [0, 600],\n    [0, -2000],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"extend\" }\n  ) * speed;\n\n  const opacity = interpolate(cardSpring, [0, 1], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" });\n  const scale = interpolate(cardSpring, [0, 1], [0.8, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" });\n\n  return (\n    <div\n      style={{\n        backgroundColor: \"white\",\n        borderRadius: \"24px\",\n        padding: \"40px\",\n        marginBottom: \"24px\",\n        maxWidth: \"320px\",\n        width: \"100%\",\n        boxShadow: \"0 10px 25px rgba(0,0,0,0.1)\",\n        border: \"1px solid rgba(0,0,0,0.05)\",\n        opacity,\n        transform: `translateY(${translateY}px) scale(${scale})`,\n        transformOrigin: \"center\"\n      }}\n    >\n      <div\n        style={{\n          fontSize: \"16px\",\n          lineHeight: \"1.5\",\n          color: \"#374151\",\n          marginBottom: \"20px\",\n          fontFamily: \"Inter\",\n          fontWeight: \"400\"\n        }}\n      >\n        {testimonial.text}\n      </div>\n      <div style={{ display: \"flex\", alignItems: \"center\", gap: \"12px\" }}>\n        <img\n          src={testimonial.avatar}\n          style={{\n            width: \"40px\",\n            height: \"40px\",\n            borderRadius: \"50%\",\n            objectFit: \"cover\"\n          }}\n        />\n        <div>\n          <div\n            style={{\n              fontFamily: \"Inter\",\n              fontWeight: \"600\",\n              fontSize: \"14px\",\n              color: \"#111827\",\n              lineHeight: \"1.2\"\n            }}\n          >\n            {testimonial.name}\n          </div>\n          <div\n            style={{\n              fontFamily: \"Inter\",\n              fontWeight: \"400\",\n              fontSize: \"14px\",\n              color: \"#6B7280\",\n              lineHeight: \"1.2\"\n            }}\n          >\n            {testimonial.role}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst TestimonialColumn = ({ testimonials, speed, delay }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n      {[...testimonials, ...testimonials, ...testimonials].map((testimonial, index) => (\n        <TestimonialCard\n          key={index}\n          testimonial={testimonial}\n          delay={delay}\n          speed={speed}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  const headerSequence = sequences_8a7f2b3c.find(s => s.type === \"header\");\n  const testimonialsSequence = sequences_8a7f2b3c.find(s => s.type === \"testimonials\");\n\n  return (\n    <AbsoluteFill\n      style={{\n        background: \"linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)\",\n        fontFamily: \"Inter\"\n      }}\n    >\n      {/* Header Section */}\n      {frame >= headerSequence.start && frame < headerSequence.start + headerSequence.frames && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"80px\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\",\n            textAlign: \"center\",\n            zIndex: 10\n          }}\n        >\n          <h1\n            style={{\n              fontSize: \"48px\",\n              fontWeight: \"800\",\n              color: \"#111827\",\n              marginBottom: \"16px\",\n              fontFamily: \"Inter\",\n              opacity: interpolate(\n                spring({\n                  frame: frame - headerSequence.start,\n                  fps,\n                  config: { damping: 12, stiffness: 100 }\n                }),\n                [0, 1],\n                [0, 1],\n                { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n              ),\n              transform: `translateY(${interpolate(\n                spring({\n                  frame: frame - headerSequence.start,\n                  fps,\n                  config: { damping: 12, stiffness: 100 }\n                }),\n                [0, 1],\n                [30, 0],\n                { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n              )}px)`\n            }}\n          >\n            What our users say\n          </h1>\n        </div>\n      )}\n\n      {/* Testimonials Columns */}\n      {frame >= headerSequence.start && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"200px\",\n            left: \"0\",\n            right: \"0\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            gap: \"32px\",\n            overflow: \"hidden\",\n            height: \"calc(100vh - 200px)\"\n          }}\n        >\n          <TestimonialColumn\n            testimonials={testimonials_8a7f2b3c.slice(0, 2)}\n            speed={0.8}\n            delay={headerSequence.start}\n          />\n          <TestimonialColumn\n            testimonials={testimonials_8a7f2b3c.slice(2, 4)}\n            speed={1.0}\n            delay={headerSequence.start}\n          />\n          <TestimonialColumn\n            testimonials={testimonials_8a7f2b3c.slice(4, 6)}\n            speed={1.2}\n            delay={headerSequence.start}\n          />\n        </div>\n      )}\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Text and ui animation"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_meh0uew7 = [\n  { type: \"typing-text\", frames: 60 },\n  { type: \"delay\", frames: 5 },\n  { type: \"outro\", frames: 15 },\n  { type: \"ui-slide\", frames: 20 },\n  { type: \"new-text\", frames: 60 },\n  { type: \"ui-transform\", frames: 60 },\n  { type: \"background-transition\", frames: 5 }\n];\n\nconst sequences_meh0uew7 = [];\nlet accumulatedFrames_meh0uew7 = 0;\n\nscript_meh0uew7.forEach((item, index) => {\n  sequences_meh0uew7.push({\n    ...item,\n    start: accumulatedFrames_meh0uew7,\n    end: accumulatedFrames_meh0uew7 + item.frames\n  });\n  accumulatedFrames_meh0uew7 += item.frames;\n});\n\nconst totalFrames_meh0uew7 = script_meh0uew7.reduce((sum, item) => sum + item.frames, 0);\nexport const durationInFrames_meh0uew7 = totalFrames_meh0uew7;\n\nexport default function TemplateScene() {\n  window.RemotionGoogleFonts.loadFont(\"Poppins\", { weights: [\"500\", \"600\", \"800\"] });\n\n  const frame = useCurrentFrame();\n  const { width, height } = useVideoConfig();\n\n  // Background zoom out and rotation animation\n  const backgroundScale = interpolate(\n    frame,\n    [0, 90],\n    [3, 2],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const backgroundRotation = interpolate(\n    frame,\n    [0, 150, 210],\n    [0, 180, 360],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Background fade transition (last 5 frames: 215-220)\n  const oldBackgroundOpacity = interpolate(\n    frame,\n    [210, 220],\n    [1, 0],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const newBackgroundOpacity = interpolate(\n    frame,\n    [210, 220],\n    [0, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Text entrance animation (frames 0-30) and outro upward movement (frames 65-80) - SLOWER\n  const textY = interpolate(\n    frame,\n    [0, 30, 65, 80],\n    [height * 0.55, height * 0.5, height * 0.5, height * 0.2],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const textOpacity = interpolate(\n    frame,\n    [0, 30, 65, 80],\n    [0, 1, 1, 0],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Text entrance scale (frames 0-20)\n  const entranceScale = interpolate(\n    frame,\n    [0, 20],\n    [1.3, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Text outro scale - zoom out (frames 65-80) - SLOWER\n  const outroScale = interpolate(\n    frame,\n    [65, 80],\n    [1, 0.3],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Combine entrance and outro scales\n  const textScale = frame < 65 ? entranceScale : outroScale;\n\n  // UI Image slide in animation (starts at frame 65, earlier timing)\n  const uiImageY = interpolate(\n    frame,\n    [65, 85, 145, 205],\n    [height + 100, height * 0.6, height * 0.5, height * 0.1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const uiImageOpacity = interpolate(\n    frame,\n    [65, 80],\n    [0, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // UI Image scale animation - starts large and scales down while sliding in, then scales up to screen after delay, then scales up more in final 2 seconds\n  const uiImageScale = interpolate(\n    frame,\n    [65, 85, 110, 120, 145, 205, 210],\n    [1.5, 1, 1, 2.2, 2.2, 3.5, 0],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // UI Image perspective Y rotation to right side - EXTENDED: Now covers entire animation duration including new 2 seconds\n  const uiImageRotateY = interpolate(\n    frame,\n    [85, 145, 205, 210],\n    [0, 15, 35, 45],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // New text animation (starts at frame 65, now disappears later at frame 105-110 to give more time)\n  const newTextY = interpolate(\n    frame,\n    [65, 110],\n    [height * 0.22, height * 0.20],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const newTextOpacity = interpolate(\n    frame,\n    [65, 85, 115, 120],\n    [0, 1, 1, 0],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const newTextScale = interpolate(\n    frame,\n    [65, 85],\n    [1.3, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Mouse cursor animation - appears in last 2 seconds (frames 145-205)\n  const mouseX = interpolate(\n    frame,\n    [145, 185],\n    [width + 50, width * 0.30],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const mouseY = interpolate(\n    frame,\n    [145, 185],\n    [height * 0.5, height * 0.93],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const mouseOpacity = interpolate(\n    frame,\n    [145, 155, 195, 215],\n    [0, 1, 1, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Enhanced click animation - scale down first, then scale up for more dramatic click effect\n  const clickScale = interpolate(\n    frame,\n    [190, 202, 203, 208],\n    [1.2, 0.8, 1.5, 1.2], // Increased size overall, scale down then up\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  return (\n    <AbsoluteFill style= {{ backgroundColor: \"#1e40af\" }\n}>\n  {/* Old background image with zoom out and rotation - fades out in last 5 frames */ }\n  < Img\nsrc = \"https://i.postimg.cc/Wz519hX2/Untitled-1kjn.png\"\nstyle = {{\n  position: \"absolute\",\n    top: \"50%\",\n      left: \"50%\",\n        width: width * 1.2,\n          height: height * 1.2,\n            objectFit: \"cover\",\n              transform: `translate(-50%, -50%) scale(${backgroundScale}) rotate(${backgroundRotation}deg)`,\n                transformOrigin: \"center center\",\n                  opacity: oldBackgroundOpacity\n}}\n/>\n\n{/* New background image - fades in during last 5 frames with initial scale of 2 */ }\n{\n  frame >= 215 && (\n    <Img\nsrc=\"https://i.postimg.cc/XvQGvww9/Untitled-1kjn.png\"\n  style = {{\n    position: \"absolute\",\n      top: \"50%\",\n        left: \"50%\",\n          width: width * 1.2,\n            height: height * 1.2,\n              objectFit: \"cover\",\n                transform: `translate(-50%, -50%) scale(2)`,\n                  transformOrigin: \"center center\",\n                    opacity: newBackgroundOpacity\n  }\n}\n/>\n)}\n\n{/* Text with entrance and outro animations */ }\n{\n  frame >= 0 && frame <= 80 && (\n    <div style={\n      {\n        position: \"absolute\",\n          top: textY,\n            left: \"50%\",\n              transform: `translate(-50%, -50%) scale(${textScale})`,\n                fontFamily: \"Poppins\",\n                  fontSize: \"6vw\",\n                    fontWeight: \"800\",\n                      textAlign: \"center\",\n                        lineHeight: \"1.2\",\n                          letterSpacing: \"0.05em\",\n                            color: \"white\",\n                              width: \"100%\",\n                                opacity: textOpacity,\n                                  textShadow: \"2px 2px 4px rgba(0,0,0,0.8)\",\n}\n  }>\n    Your Secure < br /> AI Meeting Assistant\n      < /div>\n)\n}\n\n{/* UI Image with slide in animation, scale down animation, border gradient, glow, and perspective depth + Y rotation */ }\n{\n  frame >= 65 && (\n    <div style={\n      {\n        position: \"absolute\",\n          top: uiImageY,\n            left: \"50%\",\n              transform: `translate(-50%, -50%) scale(${uiImageScale}) perspective(1000px) rotateX(15deg) rotateY(${uiImageRotateY}deg)`,\n                opacity: uiImageOpacity,\n                  padding: \"4px\",\n                    background: \"linear-gradient(135deg, #667eea 0%, #764ba2 100%)\",\n                      borderRadius: \"16px\",\n                        boxShadow: \"0 0 40px rgba(102, 126, 234, 0.6), 0 0 80px rgba(118, 75, 162, 0.4), 0 20px 40px rgba(0,0,0,0.3)\",\n}\n  }>\n    <Img\nsrc=\"https://i.postimg.cc/WzNzVQ3b/a-LRGZ7s0-Y16-Icja-J88v-XIa3dc.png\"\n  style = {{\n    width: width * 0.7,\n      height: \"auto\",\n        borderRadius: \"12px\",\n          display: \"block\"\n  }\n}\n/>\n  < /div>\n)}\n\n{/* New text after UI image appears (now disappears later to give more time on screen) */ }\n{\n  frame >= 65 && frame <= 110 && (\n    <div style={\n      {\n        position: \"absolute\",\n          top: newTextY,\n            left: \"50%\",\n              transform: `translate(-50%, -50%) scale(${newTextScale})`,\n                fontFamily: \"Poppins\",\n                  fontSize: \"4vw\",\n                    fontWeight: \"600\",\n                      textAlign: \"center\",\n                        color: \"white\",\n                          width: \"100%\",\n                            opacity: newTextOpacity,\n                              textShadow: \"2px 2px 4px rgba(0,0,0,0.8)\",\n}\n  }>\n    Record, transcribe, and summarize meetings\n      < /div>\n)\n}\n\n{/* Mouse cursor animation - appears in last 2 seconds with enhanced click effect */ }\n{\n  frame >= 145 && (\n    <div style={\n      {\n        position: \"absolute\",\n          left: mouseX,\n            top: mouseY,\n              transform: `translate(-50%, -50%) scale(${clickScale})`,\n                opacity: mouseOpacity,\n                  pointerEvents: \"none\",\n                    zIndex: 1000\n      }\n  }>\n    {/* Mouse cursor using lsicon😛ointer-filled icon - solid white */ }\n    < window.IconifyIcon\n  icon = \"lsicon😛ointer-filled\"\n  style = {{\n    fontSize: \"60px\",\n      color: \"#7d5beb\",\n        filter: \"drop-shadow(3px 3px 8px rgba(0,0,0,0.6)) drop-shadow(0px 0px 4px rgba(30,58,138,0.4))\"\n  }\n}\n/>\n\n{/* Click ripple effect */ }\n{\n  frame >= 190 && frame <= 200 && (\n    <div style={\n      {\n        position: \"absolute\",\n          top: \"50%\",\n            left: \"50%\",\n              width: \"80px\",\n                height: \"80px\",\n                  borderRadius: \"50%\",\n                    border: \"2px solid rgba(255,255,255,0.8)\",\n                      transform: `translate(-50%, -50%) scale(${interpolate(frame, [200, 210], [0.5, 2])})`,\n                        opacity: interpolate(frame, [200, 210], [1, 0])\n      }\n  } />\n)\n}\n</div>\n)}\n</AbsoluteFill>\n);\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Text shimmer animation"},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, interpolate, useVideoConfig } = window.Remotion;\n\nexport default function Generating_me462q72() {\n    const frame = useCurrentFrame();\n    const { width, height } = useVideoConfig();\n\n    const shimmerPosition = interpolate(\n      frame,\n      [0, 90],\n      [-100, 200],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n    );\n\n    const textStyle = {\n        fontSize: Math.min(width * 0.12, 120),\n        fontWeight: 'bold',\n        fontFamily: 'Helvetica, Arial, sans-serif',\n        textAlign: 'center',\n        color: 'transparent',\n        background: `linear-gradient(90deg, #333 0%, #fff 50%, #333 100%)`,\n        backgroundSize: '200% 100%',\n        backgroundPosition: `${shimmerPosition}% 0`,\n        WebkitBackgroundClip: 'text',\n        backgroundClip: 'text',\n        WebkitTextFillColor: 'transparent',\n    };\n\n    return (\n        <AbsoluteFill\n            style={{\n                backgroundColor: 'black',\n                justifyContent: 'center',\n                alignItems: 'center',\n            }}\n        >\n            <div style={textStyle}>Generating...</div>\n        </AbsoluteFill>\n    );\n};\n\nexport const durationInFrames_me462q72 = 90;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Portrait gradient globe"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_a8f3b2c1 = [\n  { type: \"gradient-background\", frames: 180 }\n];\n\nlet accumulatedFrames_a8f3b2c1 = 0;\nconst sequences_a8f3b2c1 = script_a8f3b2c1.map(scene => {\n  const start = accumulatedFrames_a8f3b2c1;\n  accumulatedFrames_a8f3b2c1 += scene.frames;\n  return { ...scene, start, end: accumulatedFrames_a8f3b2c1 };\n});\n\nconst totalFrames_a8f3b2c1 = script_a8f3b2c1.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_a8f3b2c1 = totalFrames_a8f3b2c1;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Slower animated gradient background rotation\n  const gradientRotation = interpolate(\n    frame,\n    [0, totalFrames_a8f3b2c1],\n    [0, 180],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Smoother color shift for gradient with easing\n  const hue1 = spring({\n    frame,\n    fps,\n    config: {\n      damping: 200,\n      stiffness: 50,\n      mass: 1\n    },\n    from: 280,\n    to: interpolate(\n      frame,\n      [0, totalFrames_a8f3b2c1 / 2, totalFrames_a8f3b2c1],\n      [280, 320, 260]\n    )\n  });\n\n  const hue2 = spring({\n    frame,\n    fps,\n    config: {\n      damping: 200,\n      stiffness: 50,\n      mass: 1\n    },\n    from: 180,\n    to: interpolate(\n      frame,\n      [0, totalFrames_a8f3b2c1 / 2, totalFrames_a8f3b2c1],\n      [180, 220, 160]\n    )\n  });\n\n  return (\n    <AbsoluteFill style= {{ backgroundColor: \"#f5f5f5\" }\n}>\n  {/* Animated gradient background */ }\n  < div\nstyle = {{\n  position: \"absolute\",\n    top: \"50%\",\n      left: \"50%\",\n        width: \"600px\",\n          height: \"600px\",\n            transform: `translate(-50%, -50%) rotate(${gradientRotation}deg)`,\n              background: `conic-gradient(from 0deg, hsl(${hue1}, 70%, 60%), hsl(${hue2}, 80%, 65%), hsl(${hue1 + 60}, 75%, 70%), hsl(${hue1}, 70%, 60%))`,\n                borderRadius: \"50%\",\n                  filter: \"blur(60px)\",\n                    opacity: \"0.8\",\n                      zIndex: 1\n}}\n/>\n  < /AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Screenshot hero animation"},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, interpolate, useVideoConfig } = window.Remotion;\n\nconst script_mf165pbn = [\n  { text: \"Turn screenshots into demo videos\", frames: 120 }\n];\n\nconst sequences_mf165pbn = [];\nlet accumulatedFrames_mf165pbn = 0;\n\nscript_mf165pbn.forEach((item, index) => {\n  sequences_mf165pbn.push({\n    start: accumulatedFrames_mf165pbn,\n    duration: item.frames,\n    text: item.text\n  });\n  accumulatedFrames_mf165pbn += item.frames;\n});\n\nconst totalFrames_mf165pbn = script_mf165pbn.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_mf165pbn = totalFrames_mf165pbn;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { width, height } = useVideoConfig();\n  \n  const words = [\"Turn\", \"screenshots\", \"into\", \"demo\", \"videos\"];\n  const animationFrames = 8;\n  const framesPerWord = 12;\n  \n  // Screenshot animation timing - starts when \"screenshots\" appears\n  const screenshotWordIndex = 1;\n  const screenshotStartFrame = screenshotWordIndex * framesPerWord;\n  const screenshotAnimationDuration = 60;\n  \n  // Calculate word dimensions for proper sizing\n  const fontSize = Math.min(width * 0.08, 80);\n  const approximateWordWidth = fontSize * 6; // Approximate width for \"screenshots\"\n  const approximateWordHeight = fontSize;\n  \n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: \"white\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        gap: \"20px\",\n        flexWrap: \"wrap\",\n        padding: \"40px\"\n      }}\n    >\n      {words.map((word, index) => {\n        const startFrame = index * framesPerWord;\n        const endFrame = startFrame + animationFrames;\n        \n        const opacity = interpolate(\n          frame,\n          [startFrame, endFrame],\n          [0, 1],\n          {\n            extrapolateLeft: \"clamp\",\n            extrapolateRight: \"clamp\"\n          }\n        );\n        \n        const translateY = interpolate(\n          frame,\n          [startFrame, endFrame],\n          [30, 0],\n          {\n            extrapolateLeft: \"clamp\",\n            extrapolateRight: \"clamp\"\n          }\n        );\n        \n        const isScreenshotWord = word === \"screenshots\";\n        \n        return (\n          <div\n            key={index}\n            style={{\n              position: \"relative\",\n              fontSize: fontSize + \"px\",\n              fontFamily: \"Inter\",\n              fontWeight: \"700\",\n              color: \"#1a1a1a\",\n              opacity: opacity,\n              transform: `translateY(${translateY}px)`,\n            }}\n          >\n            {word}\n            \n            {/* Screenshot animation overlay */}\n            {isScreenshotWord && frame >= screenshotStartFrame && (\n              <>\n                {/* Selection highlight effect - lowered by 15px */}\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"0px\",\n                    left: \"-15px\",\n                    width: interpolate(\n                      frame,\n                      [screenshotStartFrame + 10, screenshotStartFrame + 40],\n                      [0, approximateWordWidth + 30],\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    ) + \"px\",\n                    height: interpolate(\n                      frame,\n                      [screenshotStartFrame + 10, screenshotStartFrame + 40],\n                      [0, approximateWordHeight + 30],\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    ) + \"px\",\n                    backgroundColor: \"rgba(0, 123, 255, 0.1)\",\n                    borderRadius: \"4px\",\n                    opacity: interpolate(\n                      frame,\n                      [screenshotStartFrame + 45, screenshotStartFrame + 55],\n                      [0, 1],\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    )\n                  }}\n                />\n                \n                {/* Animated dashed border rectangle - lowered by 15px */}\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"0px\",\n                    left: \"-15px\",\n                    width: interpolate(\n                      frame,\n                      [screenshotStartFrame + 10, screenshotStartFrame + 40],\n                      [0, approximateWordWidth + 30],\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    ) + \"px\",\n                    height: interpolate(\n                      frame,\n                      [screenshotStartFrame + 10, screenshotStartFrame + 40],\n                      [0, approximateWordHeight + 30],\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    ) + \"px\",\n                    border: \"2px dashed #666\",\n                    borderRadius: \"4px\",\n                    opacity: interpolate(\n                      frame,\n                      [screenshotStartFrame + 10, screenshotStartFrame + 20],\n                      [0, 1],\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    )\n                  }}\n                />\n                \n                {/* Animated cursor - positioned at bottom-right of dashed box, lowered by 15px */}\n                <div\n                  style={{\n                    position: \"absolute\",\n                    width: \"20px\",\n                    height: \"20px\",\n                    top: interpolate(\n                      frame,\n                      [screenshotStartFrame + 10, screenshotStartFrame + 40],\n                      [-10, approximateWordHeight + 30 - 10], // Lowered by 15px\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    ) + \"px\",\n                    left: interpolate(\n                      frame,\n                      [screenshotStartFrame + 10, screenshotStartFrame + 40],\n                      [-25, approximateWordWidth + 15 - 10], // Right of dashed box minus cursor width/2\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    ) + \"px\",\n                    opacity: interpolate(\n                      frame,\n                      [screenshotStartFrame + 5, screenshotStartFrame + 15],\n                      [0, 1],\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    ),\n                    zIndex: 10\n                  }}\n                >\n                  {/* Plus cursor */}\n                  <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n                    <path\n                      d=\"M10 2v16M2 10h16\"\n                      stroke=\"#333\"\n                      strokeWidth=\"2\"\n                      strokeLinecap=\"round\"\n                    />\n                  </svg>\n                </div>\n                \n                {/* Corner handles - lowered by 15px to match new position */}\n                {[\"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\"].map((corner) => {\n                  const isTopLeft = corner === \"top-left\";\n                  const isTopRight = corner === \"top-right\";\n                  const isBottomLeft = corner === \"bottom-left\";\n                  const isBottomRight = corner === \"bottom-right\";\n                  \n                  const finalWidth = approximateWordWidth + 30;\n                  const finalHeight = approximateWordHeight + 30;\n                  \n                  return (\n                    <div\n                      key={corner}\n                      style={{\n                        position: \"absolute\",\n                        width: \"8px\",\n                        height: \"8px\",\n                        backgroundColor: \"white\",\n                        border: \"2px solid #666\",\n                        borderRadius: \"50%\",\n                        top: isTopLeft || isTopRight ? \"-4px\" : (finalHeight - 4) + \"px\", // Lowered by 15px\n                        left: isTopLeft || isBottomLeft ? \"-19px\" : (finalWidth - 19) + \"px\",\n                        opacity: interpolate(\n                          frame,\n                          [screenshotStartFrame + 40, screenshotStartFrame + 50],\n                          [0, 1],\n                          { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                        )\n                      }}\n                    />\n                  );\n                })}\n              </>\n            )}\n          </div>\n        );\n      })}\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Portrait google search animation"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img, Video } = window.Remotion;\n\nconst script_e54e7158_v2 = [\n  { type: 'search-bar', frames: 180 }\n];\n\nlet accumulatedFrames_e54e7158_v2 = 0;\nconst sequences_e54e7158_v2 = [];\n\nscript_e54e7158_v2.forEach((item, index) => {\n  sequences_e54e7158_v2.push({\n    ...item,\n    start: accumulatedFrames_e54e7158_v2,\n    id: index\n  });\n  accumulatedFrames_e54e7158_v2 += item.frames;\n});\n\nconst totalFrames_e54e7158_v2 = script_e54e7158_v2.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_e54e7158 = totalFrames_e54e7158_v2;\n\nexport default function TemplateScene() {\n  window.RemotionGoogleFonts.loadFont(\"Roboto\", { weights: [\"400\", \"500\"] });\n\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  const searchBarScale = interpolate(frame, [20, 35], [0, 2], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\", easing: (t) => 1 - Math.pow(1 - t, 3) });\n\n  const logoOpacity = interpolate(frame, [0, 20], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\", easing: (t) => 1 - Math.pow(1 - t, 3) });\n  const logoScale = interpolate(frame, [0, 25], [0, 2], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\", easing: (t) => 1 - Math.pow(1 - t, 3) });\n  const searchBarOpacity = interpolate(frame, [20, 40], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\", easing: (t) => 1 - Math.pow(1 - t, 3) });\n\n  // Typewriter effect for search text\n  const searchText = \"Campervan spots in the French alps that have good views of sunrise and sunset and there's toilets/water nearby but not many people.\";\n  const typewriterStartFrame = 45;\n  const typewriterSpeed = 2; // characters per frame\n  const charactersToShow = Math.max(0, Math.floor((frame - typewriterStartFrame) * typewriterSpeed));\n  const displayedText = searchText.slice(0, charactersToShow);\n\n  // Portrait-optimized search bar width - wider for portrait\n  const searchBarWidth = Math.min(width * 0.85, 500);\n\n  // Calculate number of lines based on text length and container width\n  const charsPerLine = Math.floor(searchBarWidth / 12);\n  const numberOfLines = Math.max(1, Math.ceil(displayedText.length / charsPerLine));\n\n  // Portrait-optimized heights\n  const baseHeight = 60;\n  const lineHeight = 28;\n  const threeLineHeight = baseHeight + (2 * lineHeight) + 8;\n  const dynamicHeight = baseHeight + (numberOfLines - 1) * lineHeight + 8;\n\n  // Keep the maximum height reached (3 lines) once it gets there\n  const targetHeight = numberOfLines >= 3 ? threeLineHeight : dynamicHeight;\n  const searchBarHeight = interpolate(\n    frame,\n    [typewriterStartFrame - 10, typewriterStartFrame + 20],\n    [baseHeight, targetHeight],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Dynamic border radius - pill shaped for single line, 15px for multi-line\n  const isMultiLine = numberOfLines > 1;\n  const borderRadius = isMultiLine ? \"15px\" : \"50px\";\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#000000\" }}>\n      {/* Google Logo - Positioned higher for portrait */}\n      <div style={{\n        position: \"absolute\",\n        top: \"30%\",\n        left: \"50%\",\n        transform: `translate(-50%, -50%) scale(${logoScale})`,\n        opacity: logoOpacity\n      }}>\n        <div style={{\n          fontSize: Math.min(width * 0.15, 90) + \"px\",\n          fontFamily: \"Roboto\",\n          fontWeight: \"400\",\n          letterSpacing: \"-2px\"\n        }}>\n          <span style={{ color: \"#4285f4\" }}>G</span>\n          <span style={{ color: \"#ea4335\" }}>o</span>\n          <span style={{ color: \"#fbbc05\" }}>o</span>\n          <span style={{ color: \"#4285f4\" }}>g</span>\n          <span style={{ color: \"#34a853\" }}>l</span>\n          <span style={{ color: \"#ea4335\" }}>e</span>\n        </div>\n      </div>\n\n      {/* Search Bar - Positioned for portrait center */}\n      <div style={{\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: `translate(-50%, -50%) scale(${searchBarScale})`,\n        opacity: searchBarOpacity,\n        width: `${searchBarWidth}px`,\n        height: `${searchBarHeight}px`,\n        border: \"2px solid transparent\",\n        borderRadius: borderRadius,\n        background: `\n          linear-gradient(#1F1F1F, #1F1F1F) padding-box,\n          linear-gradient(90deg, #66B2FF, #ADFF00, #FF4D4D, #66B2FF) border-box\n        `,\n        boxShadow: \"0 0 30px rgba(102,178,255,.5), 0 0 60px rgba(173,255,0,.3), 0 0 90px rgba(255,77,77,.2)\",\n        display: \"flex\",\n        alignItems: \"flex-start\",\n        paddingLeft: \"16px\",\n        paddingRight: \"16px\",\n        paddingTop: \"12px\",\n        paddingBottom: \"12px\",\n        transition: \"height 0.3s ease\",\n        position: \"relative\"\n      }}>\n        {/* Main Content Container */}\n        <div style={{\n          flex: 1,\n          display: \"flex\",\n          alignItems: \"flex-start\",\n          minHeight: \"36px\"\n        }}>\n          {/* Search Input with Typewriter Text */}\n          <div style={{\n            flex: 1,\n            fontSize: \"16px\",\n            fontFamily: \"Roboto\",\n            color: \"#e8eaed\",\n            fontWeight: \"400\",\n            lineHeight: \"24px\",\n            textAlign: \"left\",\n            wordWrap: \"break-word\",\n            whiteSpace: \"pre-wrap\",\n            overflow: \"hidden\",\n            paddingTop: \"6px\"\n          }}>\n            {displayedText}\n            {frame >= typewriterStartFrame && charactersToShow < searchText.length && (\n              <span style={{\n                opacity: Math.sin(frame * 0.5) > 0 ? 1 : 0,\n                color: \"#e8eaed\"\n              }}>|</span>\n            )}\n          </div>\n        </div>\n\n        {/* Right Side Icons Container - Positioned at bottom */}\n        <div style={{\n          position: \"absolute\",\n          bottom: \"12px\",\n          right: \"16px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"12px\",\n          flexShrink: 0\n        }}>\n          {/* Microphone Icon */}\n          <window.IconifyIcon\n            icon=\"material-symbols:mic\"\n            style={{\n              fontSize: \"20px\",\n              color: \"#9aa0a6\"\n            }}\n          />\n\n          {/* Blue Submit Button */}\n          <div style={{\n            width: \"36px\",\n            height: \"36px\",\n            backgroundColor: \"#4285f4\",\n            borderRadius: \"50%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            cursor: \"pointer\"\n          }}>\n            <window.IconifyIcon \n              icon=\"material-symbols:arrow-upward\"\n              style={{\n                fontSize: \"18px\",\n                color: \"#ffffff\"\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Message toast portrait"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_A1B2C3D4 = [\n  { type: \"notification\", frames: 90 } // 3 seconds at 30fps\n];\n\nconst sequences_A1B2C3D4 = [];\nlet accumulatedFrames_A1B2C3D4 = 0;\n\nscript_A1B2C3D4.forEach((item, index) => {\n  sequences_A1B2C3D4.push({\n    ...item,\n    startFrame: accumulatedFrames_A1B2C3D4,\n    endFrame: accumulatedFrames_A1B2C3D4 + item.frames\n  });\n  accumulatedFrames_A1B2C3D4 += item.frames;\n});\n\nconst totalFrames_A1B2C3D4 = script_A1B2C3D4.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_A1B2C3D4 = totalFrames_A1B2C3D4;\n\nexport default function MessageNotificationScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n  \n  const msToFrames = (ms) => Math.round((ms / 1000) * fps);\n  \n  // Animation timing in frames\n  const bgStart = msToFrames(0);\n  const bgEnd = msToFrames(180);\n  const iconStart = msToFrames(40);\n  const iconEnd = msToFrames(340);\n  const senderStart = msToFrames(90);\n  const senderEnd = msToFrames(290);\n  const timestampStart = msToFrames(90);\n  const timestampEnd = msToFrames(290);\n  const previewStart = msToFrames(180);\n  const previewEnd = msToFrames(380);\n  const exitStart = msToFrames(2800);\n  const exitEnd = msToFrames(3000);\n  \n  // Background animation\n  const bgOpacity = interpolate(\n    frame,\n    [bgStart, bgEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const bgScale = interpolate(\n    frame,\n    [bgStart, bgEnd],\n    [0.96, 1.0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  // Icon animation\n  const iconOpacity = interpolate(\n    frame,\n    [iconStart, iconEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const iconScale = spring({\n    frame: frame - iconStart,\n    fps,\n    config: { damping: 8, stiffness: 120 },\n    from: 0.6,\n    to: 1.0\n  });\n  \n  // Sender animation\n  const senderOpacity = interpolate(\n    frame,\n    [senderStart, senderEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const senderY = interpolate(\n    frame,\n    [senderStart, senderEnd],\n    [16, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  // Timestamp animation\n  const timestampOpacity = interpolate(\n    frame,\n    [timestampStart, timestampEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const timestampScale = spring({\n    frame: frame - timestampStart,\n    fps,\n    config: { damping: 8, stiffness: 120 },\n    from: 0.6,\n    to: 1.0\n  });\n  \n  // Preview animation\n  const previewOpacity = interpolate(\n    frame,\n    [previewStart, previewEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const previewY = interpolate(\n    frame,\n    [previewStart, previewEnd],\n    [20, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  // Exit animation\n  const exitOpacity = frame >= exitStart ? interpolate(\n    frame,\n    [exitStart, exitEnd],\n    [1, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  ) : 1;\n  \n  const exitScale = frame >= exitStart ? interpolate(\n    frame,\n    [exitStart, exitEnd],\n    [1.0, 0.8],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  ) : 1;\n  \n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#FFFFFF\" }}>\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${bgScale * exitScale * 0.768})`,\n          width: \"1200px\",\n          height: \"240px\",\n          borderRadius: \"28px\",\n          background: \"rgba(240, 240, 242, 0.92)\",\n          backdropFilter: \"blur(20px)\",\n          padding: \"36px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          opacity: bgOpacity * exitOpacity,\n          boxShadow: \"0 20px 40px rgba(0, 0, 0, 0.15)\"\n        }}\n      >\n        {/* App Icon */}\n        <div\n          style={{\n            width: \"160px\",\n            height: \"160px\",\n            borderRadius: \"43px\",\n            background: \"linear-gradient(135deg, #34C759, #30D158)\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            opacity: iconOpacity * exitOpacity,\n            transform: `scale(${iconScale})`,\n            flexShrink: 0\n          }}\n        >\n          <window.IconifyIcon \n            icon=\"material-symbols:chat-bubble-rounded\" \n            style={{\n              fontSize: \"100px\",\n              color: \"#FFFFFF\"\n            }}\n          />\n        </div>\n        \n        {/* Content Area */}\n        <div\n          style={{\n            flex: 1,\n            marginLeft: \"36px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            paddingRight: \"24px\"\n          }}\n        >\n          {/* Sender */}\n          <div\n            style={{\n              fontFamily: \"Inter\",\n              fontWeight: \"700\",\n              fontSize: \"56px\",\n              color: \"#0B0B0F\",\n              opacity: senderOpacity * exitOpacity,\n              transform: `translateY(${senderY}px)`,\n              lineHeight: \"1.2\",\n              marginBottom: \"12px\"\n            }}\n          >\n            Bazaar Bot\n          </div>\n          \n          {/* Message Preview */}\n          <div\n            style={{\n              fontFamily: \"Inter\",\n              fontWeight: \"500\",\n              fontSize: \"56px\",\n              color: \"#0B0B0F\",\n              opacity: previewOpacity * exitOpacity,\n              transform: `translateY(${previewY}px)`,\n              lineHeight: \"1.2\"\n            }}\n          >\n            Yet another sick animation 💃\n          </div>\n        </div>\n        \n        {/* Timestamp */}\n        <div\n          style={{\n            fontFamily: \"Inter\",\n            fontWeight: \"600\",\n            fontSize: \"44px\",\n            color: \"#8E8E93\",\n            opacity: timestampOpacity * exitOpacity,\n            transform: `scale(${timestampScale})`,\n            alignSelf: \"flex-start\",\n            marginTop: \"8px\",\n            paddingLeft: \"12px\"\n          }}\n        >\n          now\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Auth modal animation"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_A8B9C2D3 = [\n  { type: \"modal-scale-and-typing\", frames: 95 }\n];\n\nlet accumulatedFrames_A8B9C2D3 = 0;\nconst sequences_A8B9C2D3 = script_A8B9C2D3.map(scene => {\n  const start = accumulatedFrames_A8B9C2D3;\n  accumulatedFrames_A8B9C2D3 += scene.frames;\n  return { ...scene, start, end: accumulatedFrames_A8B9C2D3 };\n});\n\nconst totalFrames_A8B9C2D3 = script_A8B9C2D3.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_A8B9C2D3 = totalFrames_A8B9C2D3;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animated gradient background from scene 2\n  const cycleDuration = fps * 8;\n\n  // Animate hue 1: 240° → 230° (dark blue variations)\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [240, 230, 240],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  // Animate hue 2: 192° → 185° (light blue variations)\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [192, 185, 192],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  // Animate saturation: 100% → 95% → 100% for dark blue, 77% → 85% → 77% for light blue\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [100, 95, 100],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [77, 85, 77],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  // Animate lightness: 14% → 18% → 14% for dark blue, 62% → 58% → 62% for light blue\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [14, 18, 14],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [62, 58, 62],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  // Animate angle: ±25° around 135° (110° → 160°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [110, 160, 110],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%))`;\n\n  // Modal scales up by 20% over the animation duration\n  const modalScaleProgress = spring({\n    frame,\n    fps,\n    config: { damping: 15, stiffness: 80 }\n  });\n  const modalScale = interpolate(modalScaleProgress, [0, 1], [1, 1.4]);\n\n  // Text scales in at the same time as modal\n  const textScaleProgress = spring({\n    frame,\n    fps,\n    config: { damping: 15, stiffness: 80 }\n  });\n  const textScale = interpolate(textScaleProgress, [0, 1], [0, 1]);\n  const textOpacity = interpolate(textScaleProgress, [0, 1], [0, 1]);\n\n  // Avatar animations - each avatar appears sequentially over 20 frames\n  const avatarStartFrame = 0; // Start immediately with modal\n  const avatarAnimationDuration = 20;\n  const avatarDelay = 5; // 5 frames between each avatar\n  \n  const avatar1Progress = interpolate(\n    frame,\n    [avatarStartFrame, avatarStartFrame + avatarAnimationDuration],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n  );\n  \n  const avatar2Progress = interpolate(\n    frame,\n    [avatarStartFrame + avatarDelay, avatarStartFrame + avatarDelay + avatarAnimationDuration],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n  );\n  \n  const avatar3Progress = interpolate(\n    frame,\n    [avatarStartFrame + avatarDelay * 2, avatarStartFrame + avatarDelay * 2 + avatarAnimationDuration],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n  );\n  \n  const avatar4Progress = interpolate(\n    frame,\n    [avatarStartFrame + avatarDelay * 3, avatarStartFrame + avatarDelay * 3 + avatarAnimationDuration],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n  );\n\n  // Typing animations start immediately\n  const emailText = \"elon@spacex.com\";\n  const passwordText = \"••••••••••••\";\n\n  const typedEmailLength = Math.max(0, Math.min(emailText.length, Math.floor(frame / 3)));\n  const typedPasswordLength = Math.max(0, Math.min(passwordText.length, Math.floor((frame - 30) / 2.5)));\n\n  return (\n    <AbsoluteFill style={{ background: gradientStyle }}>\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${modalScale})`,\n          width: \"400px\",\n          borderRadius: \"24px\",\n          background: \"linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(18,18,18,1) 100%)\",\n          backdropFilter: \"blur(10px)\",\n          boxShadow: \"0 25px 50px rgba(0,0,0,0.5)\",\n          padding: \"32px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\"\n        }}\n      >\n        <div\n          style={{\n            width: \"48px\",\n            height: \"48px\",\n            borderRadius: \"50%\",\n            background: \"rgba(255,255,255,0.2)\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            marginBottom: \"24px\"\n          }}\n        >\n          <window.IconifyIcon \n            icon=\"mdi:hexagon-multiple\"\n            style={{\n              fontSize: \"24px\",\n              color: \"white\"\n            }}\n          />\n        </div>\n\n        <h2\n          style={{\n            fontSize: \"28px\",\n            fontFamily: \"Inter\",\n            fontWeight: \"600\",\n            color: \"white\",\n            marginBottom: \"32px\",\n            textAlign: \"center\"\n          }}\n        >\n          Bazaar\n        </h2>\n\n        <div style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", gap: \"16px\" }}>\n          <input\n            style={{\n              width: \"100%\",\n              padding: \"12px 20px\",\n              borderRadius: \"12px\",\n              background: \"rgba(255,255,255,0.1)\",\n              border: \"none\",\n              color: \"white\",\n              fontSize: \"14px\",\n              fontFamily: \"Inter\",\n              outline: \"none\"\n            }}\n            placeholder=\"Email\"\n            value={emailText.substring(0, typedEmailLength)}\n            readOnly\n          />\n\n          <input\n            type=\"password\"\n            style={{\n              width: \"100%\",\n              padding: \"12px 20px\",\n              borderRadius: \"12px\",\n              background: \"rgba(255,255,255,0.1)\",\n              border: \"none\",\n              color: \"white\",\n              fontSize: \"14px\",\n              fontFamily: \"Inter\",\n              outline: \"none\"\n            }}\n            placeholder=\"Password\"\n            value={frame >= 30 ? passwordText.substring(0, typedPasswordLength) : \"\"}\n            readOnly\n          />\n        </div>\n\n        <div style={{ width: \"100%\", height: \"1px\", background: \"rgba(255,255,255,0.1)\", margin: \"24px 0\" }} />\n\n        <button\n          style={{\n            width: \"100%\",\n            padding: \"12px 20px\",\n            borderRadius: \"50px\",\n            background: \"rgba(255,255,255,0.1)\",\n            border: \"none\",\n            color: \"white\",\n            fontSize: \"14px\",\n            fontFamily: \"Inter\",\n            fontWeight: \"500\",\n            marginBottom: \"12px\",\n            cursor: \"pointer\"\n          }}\n        >\n          Sign in\n        </button>\n\n        <button\n          style={{\n            width: \"100%\",\n            padding: \"12px 20px\",\n            borderRadius: \"50px\",\n            background: \"linear-gradient(180deg, #232526 0%, #2d2e30 100%)\",\n            border: \"none\",\n            color: \"white\",\n            fontSize: \"14px\",\n            fontFamily: \"Inter\",\n            fontWeight: \"500\",\n            marginBottom: \"16px\",\n            cursor: \"pointer\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            gap: \"8px\"\n          }}\n        >\n          <window.IconifyIcon \n            icon=\"mdi:google\"\n            style={{\n              fontSize: \"20px\",\n              color: \"#4285f4\"\n            }}\n          />\n          Continue with Google\n        </button>\n      </div>\n\n      <div\n        style={{\n          position: \"absolute\",\n          bottom: \"20%\",\n          left: \"50%\",\n          transform: `translateX(-50%) scale(${textScale})`,\n          textAlign: \"center\",\n          opacity: textOpacity\n        }}\n      >\n        <p\n          style={{\n            fontSize: \"28px\",\n            color: \"rgba(255,255,255,0.6)\",\n            fontFamily: \"Inter\",\n            marginBottom: \"24px\"\n          }}\n        >\n          Join <span style={{ color: \"white\", fontWeight: \"500\" }}>thousands</span> of developers who are already using Bazaar.\n        </p>\n\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            gap: \"-16px\"\n          }}\n        >\n          <img\n            src={window.BazaarAvatars['middle-eastern-man']}\n            style={{\n              width: \"64px\",\n              height: \"64px\",\n              borderRadius: \"50%\",\n              border: \"2px solid #181824\",\n              objectFit: \"cover\",\n              marginRight: \"-16px\",\n              transform: `scale(${avatar1Progress})`,\n              opacity: avatar1Progress\n            }}\n          />\n          <img\n            src={window.BazaarAvatars['white-woman']}\n            style={{\n              width: \"64px\",\n              height: \"64px\",\n              borderRadius: \"50%\",\n              border: \"2px solid #181824\",\n              objectFit: \"cover\",\n              marginRight: \"-16px\",\n              transform: `scale(${avatar2Progress})`,\n              opacity: avatar2Progress\n            }}\n          />\n          <img\n            src={window.BazaarAvatars['black-man']}\n            style={{\n              width: \"64px\",\n              height: \"64px\",\n              borderRadius: \"50%\",\n              border: \"2px solid #181824\",\n              objectFit: \"cover\",\n              marginRight: \"-16px\",\n              transform: `scale(${avatar3Progress})`,\n              opacity: avatar3Progress\n            }}\n          />\n          <img\n            src={window.BazaarAvatars['asian-woman']}\n            style={{\n              width: \"64px\",\n              height: \"64px\",\n              borderRadius: \"50%\",\n              border: \"2px solid #181824\",\n              objectFit: \"cover\",\n              transform: `scale(${avatar4Progress})`,\n              opacity: avatar4Progress\n            }}\n          />\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Airbnb style hero"},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, Img } = window.Remotion;\n\nconst script_A8B9C2D3 = [\n  { type: 'splash_bg', frames: 15 },\n  { type: 'logo_and_tagline', frames: 15 },\n  { type: 'transition', frames: 10 },\n  { type: 'search_header', frames: 12 },\n  { type: 'listing_image', frames: 15 },\n  { type: 'guest_favorite', frames: 10 },\n  { type: 'property_title', frames: 12 },\n  { type: 'property_details', frames: 12 },\n  { type: 'price', frames: 12 },\n  { type: 'second_listing', frames: 15 },\n  { type: 'bottom_nav', frames: 12 },\n  { type: 'swipe_interaction', frames: 150 },\n  { type: 'status_bar_animations', frames: 180 }\n];\n\nconst swipeImages = [\n  \"https://images.unsplash.com/photo-1564013799919-ab600027ffc6?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80\",\n  \"https://images.unsplash.com/photo-1613977257363-707ba9348227?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80\",\n  \"https://images.unsplash.com/photo-1600607687939-ce8a6c25118c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2053&q=80\",\n  \"https://images.unsplash.com/photo-1600566753190-17f0baa2a6c3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80\"\n];\n\nlet accumulatedFrames_A8B9C2D3 = 0;\nconst sequences_A8B9C2D3 = [];\n\nscript_A8B9C2D3.forEach((item, index) => {\n  sequences_A8B9C2D3.push({\n    ...item,\n    start: accumulatedFrames_A8B9C2D3,\n    end: accumulatedFrames_A8B9C2D3 + item.frames\n  });\n  accumulatedFrames_A8B9C2D3 += item.frames;\n});\n\nconst totalFrames_A8B9C2D3 = script_A8B9C2D3.reduce((sum, item) => sum + item.frames, 0);\n\nexport default function AirbnbApp_me45p5l9() {\n  window.RemotionGoogleFonts.loadFont(\"Inter\", { weights: [\"400\", \"500\", \"600\"] });\n  \n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  const logoAndTaglineScale = interpolate(\n    frame,\n    [0, 15],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const searchHeaderY = interpolate(\n    frame,\n    [sequences_A8B9C2D3[3].start, sequences_A8B9C2D3[3].start + 10],\n    [50, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const listingImageY = interpolate(\n    frame,\n    [sequences_A8B9C2D3[4].start, sequences_A8B9C2D3[4].start + 12],\n    [100, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const guestFavoriteScale = interpolate(\n    frame,\n    [sequences_A8B9C2D3[5].start, sequences_A8B9C2D3[5].start + 8],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const titleOpacity = interpolate(\n    frame,\n    [sequences_A8B9C2D3[6].start, sequences_A8B9C2D3[6].start + 10],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const detailsOpacity = interpolate(\n    frame,\n    [sequences_A8B9C2D3[7].start, sequences_A8B9C2D3[7].start + 10],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const priceScale = interpolate(\n    frame,\n    [sequences_A8B9C2D3[8].start, sequences_A8B9C2D3[8].start + 10],\n    [0.8, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const secondListingY = interpolate(\n    frame,\n    [sequences_A8B9C2D3[9].start, sequences_A8B9C2D3[9].start + 12],\n    [150, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const bottomNavY = interpolate(\n    frame,\n    [sequences_A8B9C2D3[10].start, sequences_A8B9C2D3[10].start + 10],\n    [80, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const swipeStartFrame = sequences_A8B9C2D3[11].start;\n  const totalSwipeProgress = interpolate(\n    frame,\n    [swipeStartFrame, swipeStartFrame + 150],\n    [0, 3],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const currentSwipeIndex = Math.floor(totalSwipeProgress);\n  const swipeLocalProgress = totalSwipeProgress % 1;\n  \n  const swipeEasing = interpolate(\n    frame - (swipeStartFrame + currentSwipeIndex * 50),\n    [0, 50],\n    [0, 1],\n    { \n      extrapolateLeft: \"clamp\", \n      extrapolateRight: \"clamp\",\n      easing: (t) => t * t * (3 - 2 * t)\n    }\n  );\n  \n  const isInTransition = swipeLocalProgress > 0 && swipeLocalProgress < 1;\n  const easedProgress = isInTransition ? swipeEasing : (swipeLocalProgress >= 1 ? 1 : 0);\n  \n  const mainImageOffset = interpolate(\n    easedProgress,\n    [0, 1],\n    [0, -100],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const parallaxDelay = 0.1;\n  const incomingImageProgress = interpolate(\n    easedProgress,\n    [0, parallaxDelay, 1],\n    [0, 0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const incomingImageOffset = interpolate(\n    incomingImageProgress,\n    [0, 1],\n    [100, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const currentImageIndex = currentSwipeIndex % 4;\n  const nextImageIndex = (currentSwipeIndex + 1) % 4;\n\n  const statusBarAnimationStart = sequences_A8B9C2D3[12].start;\n  const timeProgress = interpolate(\n    frame,\n    [statusBarAnimationStart, statusBarAnimationStart + 60],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const times = [\"9:41\", \"9:42\", \"9:43\", \"9:44\"];\n  const currentTimeIndex = Math.floor(timeProgress * 3);\n  const currentTime = times[Math.min(currentTimeIndex, 3)];\n  \n  const batteryProgress = interpolate(\n    frame,\n    [statusBarAnimationStart, statusBarAnimationStart + 180],\n    [1, 0.85],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const phoneWidth = Math.min(width, height * 0.46);\n  const phoneHeight = phoneWidth * 2.16;\n  const phoneScaleFactor = Math.min(width / 375, height / 812);\n\n  // Format detection for responsive sizing\n  const aspectRatio = width / height;\n  const isPortrait = aspectRatio < 1;\n  const isSquare = Math.abs(aspectRatio - 1) < 0.2;\n  \n  // Responsive logo sizing based on format\n  const logoSize = isPortrait ? width * 0.15 : isSquare ? width * 0.18 : width * 0.12;\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#FF385C\", borderRadius: \"20px\" }}>\n      {frame >= 0 && frame < sequences_A8B9C2D3[2].end && (\n        <div style={{\n          position: \"absolute\",\n          top: \"40%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${logoAndTaglineScale})`,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          width: \"80%\"\n        }}>\n          <window.IconifyIcon \n            icon=\"simple-icons:airbnb\" \n            style={{\n              fontSize: `${logoSize}px`,\n              color: \"white\"\n            }}\n          />\n        </div>\n      )}\n\n      {frame >= 0 && frame < sequences_A8B9C2D3[2].end && (\n        <div style={{\n          position: \"absolute\",\n          top: \"60%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${logoAndTaglineScale})`,\n          color: \"white\",\n          fontSize: `${width * 0.08}px`,\n          fontFamily: \"Inter\",\n          fontWeight: \"400\",\n          width: \"80%\",\n          textAlign: \"center\"\n        }}>\n          Belong Anywhere\n        </div>\n      )}\n\n      {frame >= sequences_A8B9C2D3[2].end && (\n        <div style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${phoneScaleFactor})`,\n          width: \"375px\",\n          height: \"812px\",\n          backgroundColor: \"#000000\",\n          borderRadius: \"40px\",\n          padding: \"8px\"\n        }}>\n          <div style={{\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: \"#FFFFFF\",\n            borderRadius: \"32px\",\n            overflow: \"hidden\",\n            position: \"relative\"\n          }}>\n            \n            <div style={{\n              position: \"absolute\",\n              top: \"0px\",\n              left: \"0px\",\n              right: \"0px\",\n              height: \"60px\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n              paddingLeft: \"20px\",\n              paddingRight: \"20px\",\n              zIndex: 10\n            }}>\n              <div style={{\n                fontSize: \"16px\",\n                fontFamily: \"Inter\",\n                fontWeight: \"600\",\n                color: \"#000000\"\n              }}>\n                {frame >= statusBarAnimationStart ? currentTime : \"9:41\"}\n              </div>\n              <div style={{\n                width: \"120px\",\n                height: \"30px\",\n                backgroundColor: \"#000000\",\n                borderRadius: \"15px\"\n              }} />\n              <div style={{\n                display: \"flex\",\n                gap: \"5px\",\n                alignItems: \"center\"\n              }}>\n                <div style={{\n                  position: \"relative\",\n                  width: \"24px\",\n                  height: \"12px\",\n                  border: \"1px solid #000000\",\n                  borderRadius: \"2px\",\n                  display: \"flex\",\n                  alignItems: \"center\"\n                }}>\n                  <div style={{\n                    width: `${batteryProgress * 100}%`,\n                    height: \"8px\",\n                    backgroundColor: batteryProgress > 0.2 ? \"#34C759\" : \"#FF3B30\",\n                    borderRadius: \"1px\",\n                    margin: \"1px\"\n                  }} />\n                </div>\n              </div>\n            </div>\n\n            {frame >= sequences_A8B9C2D3[3].start && (\n              <div style={{\n                position: \"absolute\",\n                top: \"60px\",\n                left: \"20px\",\n                right: \"20px\",\n                height: \"80px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"space-between\",\n                transform: `translateY(${searchHeaderY}px)`\n              }}>\n                <div style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  gap: \"15px\",\n                  backgroundColor: \"#F5F5F5\",\n                  padding: \"12px 16px\",\n                  borderRadius: \"50px\",\n                  flex: 1,\n                  marginRight: \"15px\"\n                }}>\n                  <window.IconifyIcon icon=\"material-symbols:search\" style={{ fontSize: \"20px\", color: \"#666666\" }} />\n                  <div>\n                    <div style={{\n                      fontSize: \"18px\",\n                      fontFamily: \"Inter\",\n                      fontWeight: \"600\",\n                      color: \"#000000\"\n                    }}>\n                      Joshua Tree\n                    </div>\n                    <div style={{\n                      fontSize: \"14px\",\n                      fontFamily: \"Inter\",\n                      fontWeight: \"400\",\n                      color: \"#666666\"\n                    }}>\n                      Dec 11 - 14 • 2 guests\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {frame >= sequences_A8B9C2D3[4].start && (\n              <div style={{\n                position: \"absolute\",\n                top: \"160px\",\n                left: \"20px\",\n                right: \"20px\",\n                height: \"300px\",\n                borderRadius: \"12px\",\n                overflow: \"hidden\",\n                transform: `translateY(${listingImageY}px)`\n              }}>\n                <div style={{\n                  position: \"relative\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  overflow: \"hidden\"\n                }}>\n                  <Img \n                    src={swipeImages[currentImageIndex]}\n                    style={{\n                      position: \"absolute\",\n                      top: 0,\n                      left: 0,\n                      width: \"100%\",\n                      height: \"100%\",\n                      objectFit: \"cover\",\n                      transform: `translateX(${mainImageOffset}%)`\n                    }}\n                  />\n                  \n                  {isInTransition && (\n                    <Img \n                      src={swipeImages[nextImageIndex]}\n                      style={{\n                        position: \"absolute\",\n                        top: 0,\n                        left: 0,\n                        width: \"100%\",\n                        height: \"100%\",\n                        objectFit: \"cover\",\n                        transform: `translateX(${incomingImageOffset}%)`\n                      }}\n                    />\n                  )}\n                </div>\n                \n                {frame >= sequences_A8B9C2D3[5].start && currentImageIndex === 0 && (\n                  <div style={{\n                    position: \"absolute\",\n                    top: \"15px\",\n                    left: \"15px\",\n                    backgroundColor: \"rgba(255,255,255,0.9)\",\n                    padding: \"8px 12px\",\n                    borderRadius: \"20px\",\n                    fontSize: \"14px\",\n                    fontFamily: \"Inter\",\n                    fontWeight: \"500\",\n                    color: \"#000000\",\n                    transform: `scale(${guestFavoriteScale})`\n                  }}>\n                    Guest favorite\n                  </div>\n                )}\n\n                <div style={{\n                  position: \"absolute\",\n                  bottom: \"15px\",\n                  left: \"50%\",\n                  transform: \"translateX(-50%)\",\n                  display: \"flex\",\n                  gap: \"6px\"\n                }}>\n                  {[0,1,2,3].map(i => (\n                    <div key={i} style={{\n                      width: \"6px\",\n                      height: \"6px\",\n                      borderRadius: \"3px\",\n                      backgroundColor: i === currentImageIndex ? \"#FFFFFF\" : \"rgba(255,255,255,0.5)\"\n                    }} />\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {frame >= sequences_A8B9C2D3[6].start && (\n              <div style={{\n                position: \"absolute\",\n                top: \"480px\",\n                left: \"20px\",\n                right: \"20px\",\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"flex-start\",\n                opacity: titleOpacity\n              }}>\n                <div style={{\n                  fontSize: \"18px\",\n                  fontFamily: \"Inter\",\n                  fontWeight: \"600\",\n                  color: \"#000000\"\n                }}>\n                  Home in Yucca Valley\n                </div>\n                <div style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  gap: \"4px\"\n                }}>\n                  <window.IconifyIcon icon=\"material-symbols:star\" style={{ fontSize: \"14px\", color: \"#FFD700\" }} />\n                  <span style={{\n                    fontSize: \"14px\",\n                    fontFamily: \"Inter\",\n                    fontWeight: \"500\",\n                    color: \"#000000\"\n                  }}>\n                    4.97 (156)\n                  </span>\n                </div>\n              </div>\n            )}\n\n            {frame >= sequences_A8B9C2D3[7].start && (\n              <div style={{\n                position: \"absolute\",\n                top: \"510px\",\n                left: \"20px\",\n                right: \"20px\",\n                opacity: detailsOpacity\n              }}>\n                <div style={{\n                  fontSize: \"16px\",\n                  fontFamily: \"Inter\",\n                  fontWeight: \"400\",\n                  color: \"#666666\",\n                  marginBottom: \"4px\"\n                }}>\n                  Desert dream oasis with spa\n                </div>\n                <div style={{\n                  fontSize: \"16px\",\n                  fontFamily: \"Inter\",\n                  fontWeight: \"400\",\n                  color: \"#666666\"\n                }}>\n                  2 beds\n                </div>\n              </div>\n            )}\n\n            {frame >= sequences_A8B9C2D3[8].start && (\n              <div style={{\n                position: \"absolute\",\n                top: \"560px\",\n                left: \"20px\",\n                transform: `scale(${priceScale})`,\n                transformOrigin: \"left center\"\n              }}>\n                <span style={{\n                  fontSize: \"18px\",\n                  fontFamily: \"Inter\",\n                  fontWeight: \"600\",\n                  color: \"#000000\",\n                  textDecoration: \"underline\"\n                }}>\n                  $782\n                </span>\n                <span style={{\n                  fontSize: \"16px\",\n                  fontFamily: \"Inter\",\n                  fontWeight: \"400\",\n                  color: \"#666666\",\n                  marginLeft: \"4px\"\n                }}>\n                  total before taxes\n                </span>\n              </div>\n            )}\n\n            {frame >= sequences_A8B9C2D3[9].start && (\n              <div style={{\n                position: \"absolute\",\n                top: \"620px\",\n                left: \"20px\",\n                right: \"20px\",\n                height: \"120px\",\n                borderRadius: \"12px\",\n                transform: `translateY(${secondListingY}px)`,\n                overflow: \"hidden\"\n              }}>\n                <Img \n                  src=\"https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2075&q=80\"\n                  style={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    objectFit: \"cover\"\n                  }}\n                />\n              </div>\n            )}\n\n            {frame >= sequences_A8B9C2D3[10].start && (\n              <div style={{\n                position: \"absolute\",\n                bottom: \"0px\",\n                left: \"0px\",\n                right: \"0px\",\n                height: \"80px\",\n                backgroundColor: \"#FFFFFF\",\n                borderTop: \"1px solid #EEEEEE\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"space-around\",\n                transform: `translateY(${bottomNavY}px)`\n              }}>\n                {[\n                  { label: \"Explore\", icon: \"material-symbols:search\", active: true },\n                  { label: \"Wishlists\", icon: \"material-symbols:favorite-outline\", active: false },\n                  { label: \"Trips\", icon: \"material-symbols:home-outline\", active: false },\n                  { label: \"Inbox\", icon: \"material-symbols:chat-outline\", active: false },\n                  { label: \"Profile\", icon: \"material-symbols:person-outline\", active: false }\n                ].map((item, index) => (\n                  <div key={index} style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"4px\"\n                  }}>\n                    <window.IconifyIcon icon={item.icon} style={{ fontSize: \"20px\", color: item.active ? \"#FF5A8A\" : \"#999999\" }} />\n                    <div style={{\n                      fontSize: \"12px\",\n                      fontFamily: \"Inter\",\n                      fontWeight: \"400\",\n                      color: item.active ? \"#FF5A8A\" : \"#999999\"\n                    }}>\n                      {item.label}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n\n          </div>\n        </div>\n      )}\n    </AbsoluteFill>\n  );\n}\n\nexport const durationInFrames_A8B9C2D3 = totalFrames_A8B9C2D3;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Mobile notification animation"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_A1B2C3D4 = [\n  { type: \"notification\", frames: 120 } // Extended to 4 seconds\n];\n\nconst sequences_A1B2C3D4 = [];\nlet accumulatedFrames_A1B2C3D4 = 0;\n\nscript_A1B2C3D4.forEach((item, index) => {\n  sequences_A1B2C3D4.push({\n    ...item,\n    startFrame: accumulatedFrames_A1B2C3D4,\n    endFrame: accumulatedFrames_A1B2C3D4 + item.frames\n  });\n  accumulatedFrames_A1B2C3D4 += item.frames;\n});\n\nconst totalFrames_A1B2C3D4 = script_A1B2C3D4.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_A1B2C3D4 = totalFrames_A1B2C3D4;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n  \n  const msToFrames = (ms) => Math.round((ms / 1000) * fps);\n  \n  // Animation timing in frames - restored independent animations\n  const bgStart = msToFrames(0);\n  const bgEnd = msToFrames(180);\n  const iconStart = msToFrames(40);\n  const iconEnd = msToFrames(340);\n  const senderStart = msToFrames(90);\n  const senderEnd = msToFrames(290);\n  const timestampStart = msToFrames(90);\n  const timestampEnd = msToFrames(290);\n  const previewStart = msToFrames(180);\n  const previewEnd = msToFrames(380);\n  const exitStart = msToFrames(4800); // Extended by 1 second (1000ms)\n  const exitEnd = msToFrames(5000); // Extended by 1 second (1000ms)\n  \n  // First notification slide-up animation - starts immediately and uses cubic easing\n  const slideUpStart = 0;\n  const slideUpEnd = msToFrames(600); // 600ms slide duration\n  \n  const notificationY = interpolate(\n    frame,\n    [slideUpStart, slideUpEnd],\n    [200, 0], // Slide from 200px below to final position\n    { \n      extrapolateLeft: \"clamp\", \n      extrapolateRight: \"clamp\",\n      easing: (t) => t * t * (3 - 2 * t) // Cubic easing (smoothstep)\n    }\n  );\n  \n  // Second notification animation - appears after first message slides up + 20 frame pause\n  const secondNotifStart = slideUpEnd + 20; // Wait for slide to complete + 20 frame pause\n  const secondNotifSlideEnd = secondNotifStart + msToFrames(600);\n  \n  const secondNotificationY = interpolate(\n    frame,\n    [secondNotifStart, secondNotifSlideEnd],\n    [200, -120], // Slide from bottom to above first notification with padding\n    { \n      extrapolateLeft: \"clamp\", \n      extrapolateRight: \"clamp\",\n      easing: (t) => t * t * (3 - 2 * t) // Cubic easing (smoothstep)\n    }\n  );\n  \n  // Third notification animation - appears after second notification slides up + 20 frame pause\n  const thirdNotifStart = secondNotifSlideEnd + 20; // Wait for second slide to complete + 20 frame pause\n  const thirdNotifSlideEnd = thirdNotifStart + msToFrames(600);\n  \n  const thirdNotificationY = interpolate(\n    frame,\n    [thirdNotifStart, thirdNotifSlideEnd],\n    [200, -240], // Slide from bottom to above second notification with padding\n    { \n      extrapolateLeft: \"clamp\", \n      extrapolateRight: \"clamp\",\n      easing: (t) => t * t * (3 - 2 * t) // Cubic easing (smoothstep)\n    }\n  );\n  \n  // Background animation - independent\n  const bgOpacity = interpolate(\n    frame,\n    [bgStart, bgEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const bgScale = interpolate(\n    frame,\n    [bgStart, bgEnd],\n    [0.96, 1.0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  // Icon animation - independent\n  const iconOpacity = interpolate(\n    frame,\n    [iconStart, iconEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const iconScale = spring({\n    frame: frame - iconStart,\n    fps,\n    config: { damping: 8, stiffness: 120 },\n    from: 0.6,\n    to: 1.0\n  });\n  \n  // Sender animation - independent\n  const senderOpacity = interpolate(\n    frame,\n    [senderStart, senderEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const senderY = interpolate(\n    frame,\n    [senderStart, senderEnd],\n    [16, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  // Timestamp animation - independent\n  const timestampOpacity = interpolate(\n    frame,\n    [timestampStart, timestampEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const timestampScale = spring({\n    frame: frame - timestampStart,\n    fps,\n    config: { damping: 8, stiffness: 120 },\n    from: 0.6,\n    to: 1.0\n  });\n  \n  // Preview animation - independent\n  const previewOpacity = interpolate(\n    frame,\n    [previewStart, previewEnd],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const previewY = interpolate(\n    frame,\n    [previewStart, previewEnd],\n    [20, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  // Exit animation - independent - updated timing\n  const exitOpacity = frame >= exitStart ? interpolate(\n    frame,\n    [exitStart, exitEnd],\n    [1, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  ) : 1;\n  \n  const exitScale = frame >= exitStart ? interpolate(\n    frame,\n    [exitStart, exitEnd],\n    [1.0, 0.8],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  ) : 1;\n  \n  // NEW: Fade out animation for all messages over final 10 frames (110-120)\n  const fadeOutOpacity = interpolate(\n    frame,\n    [110, 120], // Updated to final 10 frames of extended duration\n    [1, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  // iPhone dimensions and positioning - CENTERED HORIZONTALLY\n  const phoneWidth = 375; // Fixed width as requested\n  const phoneHeight = 812; // Fixed height as requested\n  const phoneX = width * 0.5; // Changed from 0.75 to 0.5 for horizontal center\n  const phoneY = height * 0.5;\n  \n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#FFFFFF\" }}>\n      {/* iPhone Container */}\n      <div style={{\n        position: \"absolute\",\n        left: phoneX,\n        top: phoneY,\n        transform: \"translate(-50%, -50%)\",\n        width: phoneWidth,\n        height: phoneHeight\n      }}>\n        {/* iPhone Frame */}\n        <div style={{\n          position: \"absolute\",\n          width: \"100%\",\n          height: \"100%\",\n          backgroundColor: \"#000\",\n          borderRadius: phoneWidth * 0.167, // Proportional border radius\n          padding: phoneWidth * 0.027 // Proportional padding\n        }}>\n          {/* iPhone Screen */}\n          <div style={{\n            position: \"relative\",\n            width: \"100%\",\n            height: \"100%\",\n            borderRadius: phoneWidth * 0.14,\n            overflow: \"hidden\",\n            background: \"linear-gradient(135deg, #4A90E2 0%, #7B68EE 25%, #87CEEB 50%, #F4A460 75%, #32CD32 100%)\"\n          }}>\n            {/* Dynamic Island - moved up more */}\n            <div style={{\n              position: \"absolute\",\n              top: phoneWidth * 0.035, // Changed from 0.04 to 0.035 to move up more\n              left: \"50%\",\n              transform: \"translateX(-50%)\",\n              width: phoneWidth * 0.4,\n              height: phoneWidth * 0.1,\n              backgroundColor: \"#000\",\n              borderRadius: phoneWidth * 0.05\n            }} />\n            \n            {/* Status Bar */}\n            <div style={{\n              position: \"absolute\",\n              top: phoneWidth * 0.067,\n              left: phoneWidth * 0.067,\n              color: \"#fff\",\n              fontSize: phoneWidth * 0.047,\n              fontWeight: \"600\",\n              fontFamily: \"SF Pro Display\"\n            }}>\n              T-mobile\n            </div>\n            <div style={{\n              position: \"absolute\",\n              top: phoneWidth * 0.05,\n              right: phoneWidth * 0.067,\n              color: \"#fff\",\n              fontSize: phoneWidth * 0.047,\n              fontWeight: \"600\",\n              display: \"flex\",\n              gap: phoneWidth * 0.017,\n              alignItems: \"center\"\n            }}>\n              <window.IconifyIcon icon=\"material-symbols:signal-cellular-4-bar\" style={{ fontSize: phoneWidth * 0.053 }} />\n              <window.IconifyIcon icon=\"material-symbols:wifi\" style={{ fontSize: phoneWidth * 0.053 }} />\n              <window.IconifyIcon icon=\"material-symbols:battery-full\" style={{ fontSize: phoneWidth * 0.053 }} />\n            </div>\n            \n            {/* Time */}\n            <div style={{\n              position: \"absolute\",\n              top: phoneWidth * 0.37,\n              left: \"50%\",\n              transform: \"translateX(-50%)\",\n              color: \"#fff\",\n              fontSize: phoneWidth * 0.27,\n              fontWeight: \"600\",\n              textAlign: \"center\",\n              lineHeight: \"1\",\n              fontFamily: \"Inter\"\n            }}>\n              9:41\n            </div>\n            \n            {/* Third notification (Elon Musk) - appears after second message slides up + 20 frame pause */}\n            {frame >= thirdNotifStart && (\n              <div\n                style={{\n                  position: \"absolute\",\n                  bottom: \"55px\",\n                  left: \"20px\",\n                  right: \"20px\",\n                  transform: `scale(${bgScale * exitScale}) translateY(${thirdNotificationY}px)`,\n                  minHeight: \"80px\",\n                  borderRadius: \"12px\",\n                  background: \"rgba(240, 240, 242, 0.92)\",\n                  backdropFilter: \"blur(20px)\",\n                  padding: \"16px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  opacity: bgOpacity * exitOpacity * fadeOutOpacity,\n                  boxShadow: \"0 8px 16px rgba(0, 0, 0, 0.15)\",\n                  zIndex: 3\n                }}\n              >\n                {/* App Icon - X (Twitter) */}\n                <div\n                  style={{\n                    width: \"48px\",\n                    height: \"48px\",\n                    borderRadius: \"12px\",\n                    background: \"#000000\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    opacity: iconOpacity,\n                    transform: `scale(${iconScale})`,\n                    flexShrink: 0\n                  }}\n                >\n                  <window.IconifyIcon \n                    icon=\"simple-icons:x\" \n                    style={{\n                      fontSize: \"24px\",\n                      color: \"#FFFFFF\"\n                    }}\n                  />\n                </div>\n                \n                {/* Content Area */}\n                <div\n                  style={{\n                    flex: 1,\n                    marginLeft: \"12px\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    minWidth: 0\n                  }}\n                >\n                  {/* Sender */}\n                  <div\n                    style={{\n                      fontFamily: \"Inter\",\n                      fontWeight: \"700\",\n                      fontSize: \"14px\",\n                      color: \"#0B0B0F\",\n                      opacity: senderOpacity,\n                      transform: `translateY(${senderY}px)`,\n                      lineHeight: \"1.2\",\n                      marginBottom: \"2px\",\n                      whiteSpace: \"nowrap\",\n                      overflow: \"hidden\",\n                      textOverflow: \"ellipsis\"\n                    }}\n                  >\n                    Elon Musk\n                  </div>\n                  \n                  {/* Message Preview */}\n                  <div\n                    style={{\n                      fontFamily: \"Inter\",\n                      fontWeight: \"400\",\n                      fontSize: \"13px\",\n                      color: \"#0B0B0F\",\n                      opacity: previewOpacity,\n                      transform: `translateY(${previewY}px)`,\n                      lineHeight: \"1.3\",\n                      overflow: \"hidden\",\n                      display: \"-webkit-box\",\n                      WebkitLineClamp: 2,\n                      WebkitBoxOrient: \"vertical\"\n                    }}\n                  >\n                    I am god\n                  </div>\n                </div>\n                \n                {/* Timestamp */}\n                <div\n                  style={{\n                    fontFamily: \"Inter\",\n                    fontWeight: \"400\",\n                    fontSize: \"12px\",\n                    color: \"#8E8E93\",\n                    opacity: timestampOpacity,\n                    transform: `scale(${timestampScale})`,\n                    alignSelf: \"flex-start\",\n                    marginTop: \"2px\",\n                    marginLeft: \"8px\",\n                    flexShrink: 0\n                  }}\n                >\n                  now\n                </div>\n              </div>\n            )}\n            \n            {/* Second notification (Mum) - appears after first message slides up + 20 frame pause */}\n            {frame >= secondNotifStart && (\n              <div\n                style={{\n                  position: \"absolute\",\n                  bottom: \"80px\",\n                  left: \"20px\",\n                  right: \"20px\",\n                  transform: `scale(${bgScale * exitScale}) translateY(${secondNotificationY}px)`,\n                  minHeight: \"80px\",\n                  borderRadius: \"12px\",\n                  background: \"rgba(240, 240, 242, 0.92)\",\n                  backdropFilter: \"blur(20px)\",\n                  padding: \"16px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  opacity: bgOpacity * exitOpacity * fadeOutOpacity, // Added fadeOutOpacity\n                  boxShadow: \"0 8px 16px rgba(0, 0, 0, 0.15)\",\n                  zIndex: 2\n                }}\n              >\n                {/* App Icon - Changed to WhatsApp */}\n                <div\n                  style={{\n                    width: \"48px\",\n                    height: \"48px\",\n                    borderRadius: \"12px\",\n                    background: \"linear-gradient(135deg, #25D366, #128C7E)\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    opacity: iconOpacity,\n                    transform: `scale(${iconScale})`,\n                    flexShrink: 0\n                  }}\n                >\n                  <window.IconifyIcon \n                    icon=\"ic:baseline-whatsapp\" \n                    style={{\n                      fontSize: \"32px\",\n                      color: \"#FFFFFF\"\n                    }}\n                  />\n                </div>\n                \n                {/* Content Area */}\n                <div\n                  style={{\n                    flex: 1,\n                    marginLeft: \"12px\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    minWidth: 0\n                  }}\n                >\n                  {/* Sender */}\n                  <div\n                    style={{\n                      fontFamily: \"Inter\",\n                      fontWeight: \"700\",\n                      fontSize: \"14px\",\n                      color: \"#0B0B0F\",\n                      opacity: senderOpacity,\n                      transform: `translateY(${senderY}px)`,\n                      lineHeight: \"1.2\",\n                      marginBottom: \"2px\",\n                      whiteSpace: \"nowrap\",\n                      overflow: \"hidden\",\n                      textOverflow: \"ellipsis\"\n                    }}\n                  >\n                    Mum\n                  </div>\n                  \n                  {/* Message Preview */}\n                  <div\n                    style={{\n                      fontFamily: \"Inter\",\n                      fontWeight: \"400\",\n                      fontSize: \"13px\",\n                      color: \"#0B0B0F\",\n                      opacity: previewOpacity,\n                      transform: `translateY(${previewY}px)`,\n                      lineHeight: \"1.3\",\n                      overflow: \"hidden\",\n                      display: \"-webkit-box\",\n                      WebkitLineClamp: 2,\n                      WebkitBoxOrient: \"vertical\"\n                    }}\n                  >\n                    Come home and clean your room\n                  </div>\n                </div>\n                \n                {/* Timestamp */}\n                <div\n                  style={{\n                    fontFamily: \"Inter\",\n                    fontWeight: \"400\",\n                    fontSize: \"12px\",\n                    color: \"#8E8E93\",\n                    opacity: timestampOpacity,\n                    transform: `scale(${timestampScale})`,\n                    alignSelf: \"flex-start\",\n                    marginTop: \"2px\",\n                    marginLeft: \"8px\",\n                    flexShrink: 0\n                  }}\n                >\n                  now\n                </div>\n              </div>\n            )}\n            \n            {/* First notification (Bazaar Bot) - stays in original position */}\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: \"110px\",\n                left: \"20px\",\n                right: \"20px\",\n                transform: `scale(${bgScale * exitScale}) translateY(${notificationY}px)`,\n                minHeight: \"80px\",\n                borderRadius: \"12px\",\n                background: \"rgba(240, 240, 242, 0.92)\",\n                backdropFilter: \"blur(20px)\",\n                padding: \"16px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                opacity: bgOpacity * exitOpacity * fadeOutOpacity, // Added fadeOutOpacity\n                boxShadow: \"0 8px 16px rgba(0, 0, 0, 0.15)\",\n                zIndex: 1\n              }}\n            >\n              {/* App Icon - independent animation */}\n              <div\n                style={{\n                  width: \"48px\",\n                  height: \"48px\",\n                  borderRadius: \"12px\",\n                  background: \"linear-gradient(135deg, #34C759, #30D158)\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  opacity: iconOpacity,\n                  transform: `scale(${iconScale})`,\n                  flexShrink: 0\n                }}\n              >\n                <window.IconifyIcon \n                  icon=\"material-symbols:chat-bubble-rounded\" \n                  style={{\n                    fontSize: \"24px\",\n                    color: \"#FFFFFF\"\n                  }}\n                />\n              </div>\n              \n              {/* Content Area */}\n              <div\n                style={{\n                  flex: 1,\n                  marginLeft: \"12px\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"center\",\n                  minWidth: 0 // Allows text to wrap properly\n                }}\n              >\n                {/* Sender - independent animation */}\n                <div\n                  style={{\n                    fontFamily: \"Inter\",\n                    fontWeight: \"700\",\n                    fontSize: \"14px\",\n                    color: \"#0B0B0F\",\n                    opacity: senderOpacity,\n                    transform: `translateY(${senderY}px)`,\n                    lineHeight: \"1.2\",\n                    marginBottom: \"2px\",\n                    whiteSpace: \"nowrap\",\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\"\n                  }}\n                >\n                  Bazaar Bot\n                </div>\n                \n                {/* Message Preview - independent animation */}\n                <div\n                  style={{\n                    fontFamily: \"Inter\",\n                    fontWeight: \"400\",\n                    fontSize: \"13px\",\n                    color: \"#0B0B0F\",\n                    opacity: previewOpacity,\n                    transform: `translateY(${previewY}px)`,\n                    lineHeight: \"1.3\",\n                    overflow: \"hidden\",\n                    display: \"-webkit-box\",\n                    WebkitLineClamp: 2,\n                    WebkitBoxOrient: \"vertical\"\n                  }}\n                >\n                  Yet another sick animation 💃\n                </div>\n              </div>\n              \n              {/* Timestamp - independent animation */}\n              <div\n                style={{\n                  fontFamily: \"Inter\",\n                  fontWeight: \"400\",\n                  fontSize: \"12px\",\n                  color: \"#8E8E93\",\n                  opacity: timestampOpacity,\n                  transform: `scale(${timestampScale})`,\n                  alignSelf: \"flex-start\",\n                  marginTop: \"2px\",\n                  marginLeft: \"8px\",\n                  flexShrink: 0\n                }}\n              >\n                now\n              </div>\n            </div>\n            \n            {/* Lock Screen Icons - Torch and Camera - repositioned with more spacing */}\n            <div style={{\n              position: \"absolute\",\n              bottom: \"40px\",\n              left: \"50%\",\n              transform: \"translateX(-50%)\",\n              width: \"280px\", // Increased width for more spacing\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              opacity: bgOpacity * exitOpacity\n            }}>\n              {/* Torch Icon - moved more left */}\n              <div style={{\n                width: \"50px\",\n                height: \"50px\",\n                borderRadius: \"50%\",\n                backgroundColor: \"rgba(255, 255, 255, 0.2)\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                backdropFilter: \"blur(10px)\",\n                border: \"1px solid rgba(255, 255, 255, 0.3)\"\n              }}>\n                <window.IconifyIcon \n                  icon=\"material-symbols:flashlight-on\" \n                  style={{\n                    fontSize: \"24px\",\n                    color: \"#FFFFFF\"\n                  }}\n                />\n              </div>\n              \n              {/* Camera Icon - moved more right */}\n              <div style={{\n                width: \"50px\",\n                height: \"50px\",\n                borderRadius: \"50%\",\n                backgroundColor: \"rgba(255, 255, 255, 0.2)\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                backdropFilter: \"blur(10px)\",\n                border: \"1px solid rgba(255, 255, 255, 0.3)\"\n              }}>\n                <window.IconifyIcon \n                  icon=\"material-symbols:photo-camera\" \n                  style={{\n                    fontSize: \"24px\",\n                    color: \"#FFFFFF\"\n                  }}\n                />\n              </div>\n            </div>\n            \n            {/* iPhone Home Indicator Bar */}\n            <div style={{\n              position: \"absolute\",\n              bottom: \"8px\",\n              left: \"50%\",\n              transform: \"translateX(-50%)\",\n              width: \"134px\",\n              height: \"5px\",\n              backgroundColor: \"rgba(255, 255, 255, 0.6)\",\n              borderRadius: \"2.5px\"\n            }} />\n          </div>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Toggle animation"},{"role":"assistant","content":"const { AbsoluteFill, spring, interpolate, useCurrentFrame, useVideoConfig } = window.Remotion;\n\nconst script_A7B9C2D1 = [\n  { type: \"toggle_transition\", frames: 90 }\n];\n\nlet accumulatedFrames_A7B9C2D1 = 0;\nconst sequences_A7B9C2D1 = script_A7B9C2D1.map(item => {\n  const sequence = { ...item, startFrame: accumulatedFrames_A7B9C2D1 };\n  accumulatedFrames_A7B9C2D1 += item.frames;\n  return sequence;\n});\n\nconst totalFrames_A7B9C2D1 = script_A7B9C2D1.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_A7B9C2D1 = totalFrames_A7B9C2D1;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  const SmoothToggle = ({ startFrame = 0 }) => {\n    const toggleSpring = spring({\n      frame: frame - startFrame,\n      fps,\n      config: { damping: 12, stiffness: 120 }\n    });\n\n    const scaleSpring = spring({\n      frame: frame - startFrame,\n      fps,\n      config: { damping: 10, stiffness: 100 }\n    });\n\n    // Smooth transition from grey to orange over the entire duration\n    const toggleProgress = spring({\n      frame: frame - (startFrame + 15),\n      fps,\n      config: { damping: 15, stiffness: 100 }\n    });\n\n    // Interpolate from grey to orange\n    const backgroundColor = `rgb(${interpolate(toggleProgress, [0, 1], [209, 234], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" })}, ${interpolate(toggleProgress, [0, 1], [213, 88], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" })}, ${interpolate(toggleProgress, [0, 1], [219, 12], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" })})`;\n\n    const knobBackgroundColor = `rgb(${interpolate(toggleProgress, [0, 1], [156, 255], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" })}, ${interpolate(toggleProgress, [0, 1], [163, 255], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" })}, ${interpolate(toggleProgress, [0, 1], [175, 255], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" })})`;\n\n    // Smooth knob position from left to right\n    const knobPosition = interpolate(toggleProgress, [0, 1], [4, 28], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" });\n\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${scaleSpring * 6})`,\n          opacity: toggleSpring\n        }}\n      >\n        <div\n          style={{\n            position: \"relative\",\n            display: \"inline-block\",\n            height: \"32px\",\n            width: \"56px\",\n            borderRadius: \"16px\",\n            backgroundColor: backgroundColor,\n            cursor: \"pointer\",\n            transition: \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\"\n          }}\n        >\n          <div\n            style={{\n              position: \"absolute\",\n              top: \"4px\",\n              left: `${knobPosition}px`,\n              height: \"24px\",\n              width: \"24px\",\n              borderRadius: \"12px\",\n              backgroundColor: knobBackgroundColor,\n              boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.2)\",\n              transition: \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\",\n              transform: \"translateZ(0)\"\n            }}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#f8fafc\" }}>\n      <div style={{ position: \"absolute\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\" }}>\n        <SmoothToggle startFrame={0} />\n      </div>\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Pricing card animation"},{"role":"assistant","content":"const { AbsoluteFill, spring, interpolate, useCurrentFrame, useVideoConfig } = window.Remotion;\n\nconst script_a8f3b2c1 = [\n  { type: \"gradient-background\", frames: 120 },\n  { type: \"card-entrance\", frames: 15 },\n  { type: \"hold\", frames: 95 }\n];\n\nlet accumulatedFrames_a8f3b2c1 = 0;\nconst sequences_a8f3b2c1 = script_a8f3b2c1.map(scene => {\n  const start = accumulatedFrames_a8f3b2c1;\n  accumulatedFrames_a8f3b2c1 += scene.frames;\n  return { ...scene, start, end: accumulatedFrames_a8f3b2c1 };\n});\n\nconst totalFrames_a8f3b2c1 = script_a8f3b2c1.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_a8f3b2c1 = totalFrames_a8f3b2c1;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Color shift for gradient\n  const hue1 = interpolate(\n    frame,\n    [0, totalFrames_a8f3b2c1 / 2, totalFrames_a8f3b2c1],\n    [280, 320, 260],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const hue2 = interpolate(\n    frame,\n    [0, totalFrames_a8f3b2c1 / 2, totalFrames_a8f3b2c1],\n    [180, 220, 160],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Card entrance animation\n  const cardScale = spring({\n    frame: frame,\n    fps,\n    config: { damping: 15, stiffness: 120 }\n  });\n\n  const cardOpacity = interpolate(\n    frame,\n    [0, 15],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#f5f5f5\" }}>\n      {/* Gradient background - scaled up by 20% */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"53%\",\n          left: \"50%\",\n          width: \"456px\", // 380px * 1.2\n          height: \"672px\", // 560px * 1.2\n          transform: \"translate(-50%, -50%)\",\n          background: `conic-gradient(from 0deg, hsl(${hue1}, 70%, 60%), hsl(${hue2}, 80%, 65%), hsl(${hue1 + 60}, 75%, 70%), hsl(${hue1}, 70%, 60%))`,\n          borderRadius: \"26.4px\", // 22px * 1.2\n          filter: \"blur(96px)\", // 80px * 1.2\n          opacity: \"0.8\",\n          zIndex: 1\n        }}\n      />\n\n      {/* Pricing Card container - scaled up by 20% */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${cardScale})`,\n          opacity: cardOpacity,\n          backgroundColor: \"white\",\n          borderRadius: \"26.4px\", // 22px * 1.2\n          padding: \"48px\", // 40px * 1.2\n          maxWidth: \"480px\", // 400px * 1.2\n          boxShadow: \"0 30px 60px -14.4px rgba(0, 0, 0, 0.25)\", // 25px * 1.2, 50px * 1.2, -12px * 1.2\n          zIndex: 2\n        }}\n      >\n        {/* Pricing Card Content */}\n        <div style={{\n          textAlign: \"center\"\n        }}>\n          {/* Plan Name */}\n          <h1 style={{\n            fontFamily: \"Inter\",\n            fontWeight: \"700\",\n            fontSize: \"3rem\", // 2.5rem * 1.2\n            color: \"#111827\",\n            marginBottom: \"28.8px\", // 24px * 1.2\n            lineHeight: \"1.2\"\n          }}>\n            Bazaar Pro\n          </h1>\n\n          {/* Price */}\n          <div style={{\n            marginBottom: \"38.4px\" // 32px * 1.2\n          }}>\n            <span style={{\n              fontFamily: \"Inter\",\n              fontWeight: \"800\",\n              fontSize: \"5.4rem\", // 4.5rem * 1.2\n              color: \"#111827\",\n              lineHeight: \"1\"\n            }}>$29</span>\n            <span style={{\n              fontFamily: \"Inter\",\n              fontWeight: \"500\",\n              fontSize: \"2.1rem\", // 1.75rem * 1.2\n              color: \"#6b7280\",\n              marginLeft: \"4.8px\" // 4px * 1.2\n            }}>/month</span>\n          </div>\n\n          {/* Features List */}\n          <div style={{\n            textAlign: \"left\",\n            marginBottom: \"48px\" // 40px * 1.2\n          }}>\n            {[\n              \"Create Unlimited Videos\",\n              \"Turn Code into Content\",\n              \"Full AGI mode\",\n              \"Back Scratcher\"\n            ].map((feature, index) => (\n              <div key={index} style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                marginBottom: \"19.2px\" // 16px * 1.2\n              }}>\n                <div style={{\n                  width: \"24px\", // 20px * 1.2\n                  height: \"24px\", // 20px * 1.2\n                  backgroundColor: \"#10b981\",\n                  borderRadius: \"50%\",\n                  marginRight: \"19.2px\", // 16px * 1.2\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  fontSize: \"14.4px\", // 12px * 1.2\n                  color: \"white\",\n                  fontWeight: \"bold\"\n                }}>✓</div>\n                <span style={{\n                  fontFamily: \"Inter\",\n                  fontSize: \"1.65rem\", // 1.375rem * 1.2\n                  color: \"#374151\",\n                  fontWeight: \"400\"\n                }}>{feature}</span>\n              </div>\n            ))}\n          </div>\n\n          {/* CTA Button */}\n          <button style={{\n            backgroundColor: \"#111827\",\n            color: \"white\",\n            padding: \"19.2px 38.4px\", // 16px * 1.2, 32px * 1.2\n            borderRadius: \"9.6px\", // 8px * 1.2\n            fontSize: \"1.65rem\", // 1.375rem * 1.2\n            fontFamily: \"Inter\",\n            fontWeight: \"600\",\n            border: \"none\",\n            cursor: \"pointer\",\n            width: \"100%\",\n            transition: \"all 0.2s ease\"\n          }}>\n            Buy Now\n          </button>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Shooting star animation"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig } = window.Remotion;\n\nconst script_A8B9C2D1 = [\n  { type: \"text\", content: \"Introducing\", frames: 35 },\n  { type: \"arc\", content: \"shooting star arc\", frames: 35 }\n];\n\nconst sequences_A8B9C2D1 = [];\nlet accumulatedFrames_A8B9C2D1 = 0;\n\nscript_A8B9C2D1.forEach((item, index) => {\n  sequences_A8B9C2D1.push({\n    ...item,\n    start: accumulatedFrames_A8B9C2D1,\n    end: accumulatedFrames_A8B9C2D1 + item.frames\n  });\n  accumulatedFrames_A8B9C2D1 += item.frames;\n});\n\nconst totalFrames_A8B9C2D1 = script_A8B9C2D1.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_A8B9C2D1 = totalFrames_A8B9C2D1;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  const textSequence = sequences_A8B9C2D1[0];\n  const arcSequence = sequences_A8B9C2D1[1];\n\n  // Text animation - now over 35 frames (15% slower)\n  const textProgress = spring({\n    frame: frame - textSequence.start,\n    fps,\n    config: { damping: 12, stiffness: 100 }\n  });\n\n  const textOpacity = interpolate(\n    frame,\n    [textSequence.start, textSequence.start + 12],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const textScale = interpolate(\n    textProgress,\n    [0, 1],\n    [0.8, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Arc animation - now over 35 frames (15% slower)\n  const arcProgress = interpolate(\n    frame,\n    [0, 35],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const arcLength = interpolate(\n    arcProgress,\n    [0, 1],\n    [0, 100],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const arcOpacity = interpolate(\n    frame,\n    [0, 7],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Shooting star trail effect\n  const trailOpacity = interpolate(\n    arcProgress,\n    [0, 0.3, 1],\n    [0, 1, 0.3],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  return (\n    <AbsoluteFill style={{\n      background: \"radial-gradient(ellipse at center, #4a1a4a 0%, #2d1b3d 50%, #1a0d1f 100%)\"\n    }}>\n      {/* Main Text */}\n      {frame >= textSequence.start && (\n        <div style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${textScale})`,\n          opacity: textOpacity,\n          fontSize: \"12vw\",\n          fontFamily: \"Inter\",\n          fontWeight: \"700\",\n          color: \"#ffffff\",\n          letterSpacing: \"0.05em\",\n          textAlign: \"center\"\n        }}>\n          Introducing\n        </div>\n      )}\n\n      {/* Purple Arc - Shooting Star */}\n      {frame >= 0 && (\n        <svg\n          style={{\n            position: \"absolute\",\n            top: \"0\",\n            left: \"0\",\n            width: \"100%\",\n            height: \"100%\",\n            opacity: arcOpacity,\n            pointerEvents: \"none\"\n          }}\n        >\n          <defs>\n            <linearGradient id=\"arcGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n              <stop offset=\"0%\" stopColor=\"#ff00ff\" stopOpacity=\"0\" />\n              <stop offset=\"30%\" stopColor=\"#ff00ff\" stopOpacity={trailOpacity} />\n              <stop offset=\"70%\" stopColor=\"#ff00ff\" stopOpacity=\"1\" />\n              <stop offset=\"100%\" stopColor=\"#ffffff\" stopOpacity=\"1\" />\n            </linearGradient>\n            <filter id=\"glow\">\n              <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n              <feMerge> \n                <feMergeNode in=\"coloredBlur\"/>\n                <feMergeNode in=\"SourceGraphic\"/>\n              </feMerge>\n            </filter>\n          </defs>\n          \n          {/* Main arc path */}\n          <path\n            d=\"M 200 350 Q 960 200 1720 350\"\n            stroke=\"url(#arcGradient)\"\n            strokeWidth=\"4\"\n            fill=\"none\"\n            strokeDasharray=\"2000\"\n            strokeDashoffset={2000 - (arcLength * 20)}\n            filter=\"url(#glow)\"\n          />\n        </svg>\n      )}\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Shazam style animation"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig } = window.Remotion;\n\nconst script_a8f3d9e2 = [\n  { type: \"device-entrance\", frames: 20 },\n  { type: \"logo-reveal\", frames: 15 },\n  { type: \"listening-text\", frames: 12 },\n  { type: \"pulse-circles\", frames: 253 }\n];\n\nconst sequences_a8f3d9e2 = [];\nlet accumulatedFrames_a8f3d9e2 = 0;\n\nscript_a8f3d9e2.forEach((segment, index) => {\n  sequences_a8f3d9e2.push({\n    ...segment,\n    start: accumulatedFrames_a8f3d9e2,\n    end: accumulatedFrames_a8f3d9e2 + segment.frames\n  });\n  accumulatedFrames_a8f3d9e2 += segment.frames;\n});\n\nconst totalFrames_a8f3d9e2 = script_a8f3d9e2.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_a8f3d9e2 = totalFrames_a8f3d9e2;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  // Device entrance animation\n  const deviceScale = frame >= 0 && frame < 20 \n    ? spring({\n        frame: frame,\n        fps,\n        config: { damping: 12, stiffness: 100 }\n      })\n    : frame >= 20 ? 1 : 0;\n\n  const deviceOpacity = frame >= 0 && frame < 20\n    ? interpolate(frame, [0, 15], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" })\n    : frame >= 20 ? 1 : 0;\n\n  // Logo reveal animation - 3x bigger\n  const logoScale = frame >= 20 && frame < 35\n    ? spring({\n        frame: frame - 20,\n        fps,\n        config: { damping: 10, stiffness: 120 }\n      }) * 3\n    : frame >= 35 ? 3 : 0;\n\n  const logoOpacity = frame >= 20 && frame < 35\n    ? interpolate(frame - 20, [0, 12], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" })\n    : frame >= 35 ? 1 : 0;\n\n  // Listening text slide up\n  const textY = frame >= 35 && frame < 47\n    ? interpolate(frame - 35, [0, 12], [30, 0], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" })\n    : frame >= 47 ? 0 : 30;\n\n  const textOpacity = frame >= 35 && frame < 47\n    ? interpolate(frame - 35, [0, 8], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" })\n    : frame >= 47 ? 1 : 0;\n\n  // Enhanced concentric pulse circles that start 20 frames earlier (frame 15)\n  const createConcentricPulse = (delay, maxRadius, duration, opacity) => {\n    const startFrame = 15 + delay; // Changed from 35 to 15 (20 frames earlier)\n    if (frame < startFrame) return { scale: 0, opacity: 0 };\n    \n    const pulseFrame = frame - startFrame;\n    const cycleProgress = (pulseFrame % duration) / duration;\n    \n    // Smooth expansion from center outward\n    const scale = interpolate(cycleProgress, [0, 0.8, 1], [0, 1, 1.2], { \n      extrapolateLeft: \"clamp\", \n      extrapolateRight: \"clamp\" \n    });\n    \n    // Fade out as it expands\n    const fadeOpacity = interpolate(cycleProgress, [0, 0.3, 0.8, 1], [0, opacity, opacity * 0.3, 0], { \n      extrapolateLeft: \"clamp\", \n      extrapolateRight: \"clamp\" \n    });\n    \n    return { scale, opacity: fadeOpacity, maxRadius };\n  };\n\n  // Create large concentric circles that extend past screen edges with increased spacing\n  const concentricPulses = [\n    createConcentricPulse(0, Math.max(width, height) * 0.6, 80, 0.6),\n    createConcentricPulse(30, Math.max(width, height) * 0.9, 100, 0.4),\n    createConcentricPulse(60, Math.max(width, height) * 1.2, 120, 0.3),\n    createConcentricPulse(90, Math.max(width, height) * 1.5, 140, 0.2),\n    createConcentricPulse(15, Math.max(width, height) * 0.75, 90, 0.5),\n    createConcentricPulse(45, Math.max(width, height) * 1.05, 110, 0.35),\n    createConcentricPulse(75, Math.max(width, height) * 1.35, 130, 0.25),\n    createConcentricPulse(105, Math.max(width, height) * 1.65, 150, 0.15),\n  ];\n\n  // Logo pulse animation synchronized with the concentric pulses\n  const getLogoPulseScale = () => {\n    if (frame < 15) return 1; // Changed from 35 to 15 - no pulsing before pulse circles start\n    \n    // Calculate which pulse cycles are active and their intensities\n    let maxPulseIntensity = 0;\n    \n    concentricPulses.forEach((pulse, index) => {\n      const delay = [0, 30, 60, 90, 15, 45, 75, 105][index];\n      const duration = [80, 100, 120, 140, 90, 110, 130, 150][index];\n      const startFrame = 15 + delay; // Changed from 35 to 15\n      \n      if (frame >= startFrame) {\n        const pulseFrame = frame - startFrame;\n        const cycleProgress = (pulseFrame % duration) / duration;\n        \n        // Create pulse intensity that peaks early in the cycle\n        const intensity = interpolate(cycleProgress, [0, 0.1, 0.3, 1], [0, 1, 0.3, 0], {\n          extrapolateLeft: \"clamp\",\n          extrapolateRight: \"clamp\"\n        });\n        \n        maxPulseIntensity = Math.max(maxPulseIntensity, intensity);\n      }\n    });\n    \n    // Scale the logo based on the maximum pulse intensity\n    return 1 + (maxPulseIntensity * 0.15); // Subtle 15% scale increase at peak\n  };\n\n  const logoPulseScale = getLogoPulseScale();\n\n  // Text pulse animation synchronized with the concentric pulses\n  const getTextPulseScale = () => {\n    if (frame < 47) return 1; // Only pulse after text is fully visible\n    \n    // Calculate which pulse cycles are active and their intensities\n    let maxPulseIntensity = 0;\n    \n    concentricPulses.forEach((pulse, index) => {\n      const delay = [0, 30, 60, 90, 15, 45, 75, 105][index];\n      const duration = [80, 100, 120, 140, 90, 110, 130, 150][index];\n      const startFrame = 15 + delay;\n      \n      if (frame >= startFrame) {\n        const pulseFrame = frame - startFrame;\n        const cycleProgress = (pulseFrame % duration) / duration;\n        \n        // Create pulse intensity that peaks early in the cycle\n        const intensity = interpolate(cycleProgress, [0, 0.1, 0.3, 1], [0, 1, 0.3, 0], {\n          extrapolateLeft: \"clamp\",\n          extrapolateRight: \"clamp\"\n        });\n        \n        maxPulseIntensity = Math.max(maxPulseIntensity, intensity);\n      }\n    });\n    \n    // Scale the text based on the maximum pulse intensity (more subtle than logo)\n    return 1 + (maxPulseIntensity * 0.08); // Subtle 8% scale increase at peak\n  };\n\n  const textPulseScale = getTextPulseScale();\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#0a0a1a\" }}>\n      {/* Large concentric pulse circles emanating from center */}\n      {frame >= 15 && ( // Changed from 35 to 15 (20 frames earlier)\n        <>\n          {concentricPulses.map((pulse, index) => (\n            <div\n              key={index}\n              style={{\n                position: \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                transform: `translate(-50%, -50%) scale(${pulse.scale})`,\n                width: `${pulse.maxRadius}px`,\n                height: `${pulse.maxRadius}px`,\n                borderRadius: \"50%\",\n                background: `radial-gradient(circle, transparent 60%, rgba(74, 158, 255, ${pulse.opacity}) 70%, rgba(30, 100, 200, ${pulse.opacity * 0.5}) 85%, transparent 100%)`,\n                pointerEvents: \"none\",\n              }}\n            />\n          ))}\n          \n          {/* Inner glow circles for depth */}\n          {concentricPulses.slice(0, 3).map((pulse, index) => (\n            <div\n              key={`inner-${index}`}\n              style={{\n                position: \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                transform: `translate(-50%, -50%) scale(${pulse.scale * 0.6})`,\n                width: `${pulse.maxRadius * 0.6}px`,\n                height: `${pulse.maxRadius * 0.6}px`,\n                borderRadius: \"50%\",\n                background: `radial-gradient(circle, rgba(74, 158, 255, ${pulse.opacity * 0.3}) 0%, rgba(74, 158, 255, ${pulse.opacity * 0.1}) 50%, transparent 70%)`,\n                pointerEvents: \"none\",\n              }}\n            />\n          ))}\n        </>\n      )}\n\n      {/* Shazam Logo Overlay - 3x bigger with pulse animation */}\n      {frame >= 20 && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: `translate(-50%, -50%) scale(${logoScale * logoPulseScale})`,\n            opacity: logoOpacity,\n          }}\n        >\n          <div\n            style={{\n              width: \"80px\",\n              height: \"80px\",\n              borderRadius: \"50%\",\n              backgroundColor: \"#4a9eff\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              boxShadow: `0 0 ${30 + (logoPulseScale - 1) * 50}px rgba(74, 158, 255, ${0.5 + (logoPulseScale - 1) * 0.3})`,\n            }}\n          >\n            <window.IconifyIcon\n              icon=\"simple-icons:shazam\"\n              style={{\n                fontSize: \"40px\",\n                color: \"white\",\n              }}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Listening Text with pulse animation */}\n      {frame >= 35 && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"70%\",\n            left: \"50%\",\n            transform: `translate(-50%, -50%) translateY(${textY}px) scale(${textPulseScale})`,\n            opacity: textOpacity,\n            fontFamily: \"Inter\",\n            fontWeight: \"500\",\n            fontSize: \"42px\",\n            color: \"white\",\n            textAlign: \"center\",\n          }}\n        >\n          Listening ...\n        </div>\n      )}\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Welcome to bazaar animation"},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nexport default function DarkBGGradientText_me44v5an() {\n  window.RemotionGoogleFonts.loadFont(\"Inter\", { weights: [\"800\"] });\n  \n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  // Format detection for responsive sizing\n  const aspectRatio = width / height;\n  const isPortrait = aspectRatio < 1;\n  const isSquare = Math.abs(aspectRatio - 1) < 0.2;\n  \n  // Responsive font sizing\n  const baseFontSize = Math.min(width, height) * 0.12;\n  const fontSize = isPortrait ? baseFontSize * 0.8 : isSquare ? baseFontSize * 0.9 : baseFontSize;\n  \n  const gradientPosition = interpolate(\n    frame,\n    [0, fps * 3],\n    [-200, 200],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n  \n  const textScale = interpolate(\n    frame,\n    [0, 8],\n    [0.8, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n  \n  // Split text into words for individual animation\n  const words = \"Welcome to Bazaar\".split(\" \");\n  \n  return (\n    <AbsoluteFill\n      style={{\n        background: \"black\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        padding: \"40px\"\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${textScale})`,\n          fontSize: `${fontSize}px`,\n          fontFamily: \"Inter\",\n          fontWeight: \"800\",\n          textAlign: \"center\",\n          whiteSpace: isPortrait ? \"normal\" : \"nowrap\",\n          display: \"flex\",\n          gap: \"0.3em\",\n          flexDirection: isPortrait ? \"column\" : \"row\",\n          lineHeight: 1.1\n        }}\n      >\n        {words.map((word, index) => {\n          // Stagger each word by 8 frames (faster)\n          const wordStartFrame = index * 8;\n          const wordEndFrame = wordStartFrame + 15;\n          \n          // Slide up animation for each word\n          const wordY = interpolate(\n            frame,\n            [wordStartFrame, wordEndFrame],\n            [100, 0],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\"\n            }\n          );\n          \n          // Opacity animation for each word\n          const wordOpacity = interpolate(\n            frame,\n            [wordStartFrame, wordEndFrame],\n            [0, 1],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\"\n            }\n          );\n          \n          return (\n            <div\n              key={index}\n              style={{\n                position: \"relative\",\n                transform: `translateY(${wordY}px)`,\n                opacity: wordOpacity\n              }}\n            >\n              <div\n                style={{\n                  color: index < 2 ? \"white\" : \"transparent\",\n                  userSelect: \"none\"\n                }}\n              >\n                {word}\n              </div>\n              \n              {index === 2 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"0\",\n                    left: \"0\",\n                    width: \"100%\",\n                    height: \"100%\",\n                    background: `linear-gradient(90deg, #ff5f6d 0%, #ffc371 25%, #a18cd1 50%, #fbc2eb 75%, #ff5f6d 100%)`,\n                    backgroundPosition: `${gradientPosition}px 0`,\n                    backgroundSize: \"400px 100%\",\n                    backgroundRepeat: \"repeat-x\",\n                    backgroundClip: \"text\",\n                    WebkitBackgroundClip: \"text\",\n                    color: \"transparent\",\n                    WebkitTextFillColor: \"transparent\"\n                  }}\n                >\n                  {word}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </AbsoluteFill>\n  );\n}\n\nexport const durationInFrames_me44v5an = 120;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Rainbow lyric animation"},{"role":"assistant","content":"const {\nAbsoluteFill,\nuseCurrentFrame,\nuseVideoConfig,\ninterpolate,\n} = window.Remotion;\n\nexport default function BlueGradientText_me44xgz7_me45532t() {\nconst frame = useCurrentFrame();\nconst { fps, width, height } = useVideoConfig();\n\n// Responsive sizing for landscape\nconst svgWidth = Math.min(width * 0.95, 1600);\nconst svgHeight = Math.min(height * 0.4, 300);\nconst fontSize = Math.min(width * 0.12, height * 0.22, 140); // Increased font size significantly\n\n// Helper function to generate rainbow colors with smooth hue cycling\nconst getHue = (baseHue, offset = 0) => {\n  const hue = (baseHue + offset) % 360;\n  return `hsl(${hue}, 100%, 50%)`;\n};\n\n// Continuously cycle through rainbow colors - perfect loop for full duration\nconst hueOffset = interpolate(frame, [0, 90], [0, 360]);\n\n// Animate the gradient position from right to left continuously in a loop\nconst gradientOffset = interpolate(frame % 90, [0, 90], [150, -50]);\n\n// Text array for applying gradient effect\nconst words = [\n  { text: \"I want to break\", x: svgWidth * 0.35, anchor: \"middle\" },\n  { text: \"free\", x: svgWidth * 0.7, anchor: \"right\" }\n];\n\nreturn (\n  <AbsoluteFill\n    style={{\n      backgroundColor: \"#ffffff\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      display: \"flex\"\n    }}\n  >\n    <svg \n      width={svgWidth} \n      height={svgHeight} \n      viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n      style={{ maxWidth: '95%', height: 'auto' }}\n    >\n      <defs>\n        <linearGradient\n          id=\"rainbow-gradient\"\n          x1={`${gradientOffset}%`}\n          y1=\"0%\"\n          x2={`${gradientOffset + 100}%`}\n          y2=\"0%\"\n          gradientUnits=\"objectBoundingBox\"\n        >\n          <stop offset=\"0%\" stopColor={getHue(0, hueOffset)} />\n          <stop offset=\"16.67%\" stopColor={getHue(60, hueOffset)} />\n          <stop offset=\"33.33%\" stopColor={getHue(120, hueOffset)} />\n          <stop offset=\"50%\" stopColor={getHue(180, hueOffset)} />\n          <stop offset=\"66.67%\" stopColor={getHue(240, hueOffset)} />\n          <stop offset=\"83.33%\" stopColor={getHue(300, hueOffset)} />\n          <stop offset=\"100%\" stopColor={getHue(360, hueOffset)} />\n        </linearGradient>\n      </defs>\n\n      {words.map((word, index) => {\n        const gradientStyle = index === 1 ? {\n          background: `linear-gradient(90deg, ${getHue(0, hueOffset)} 0%, ${getHue(60, hueOffset)} 20%, ${getHue(120, hueOffset)} 40%, ${getHue(180, hueOffset)} 60%, ${getHue(240, hueOffset)} 80%, ${getHue(300, hueOffset)} 100%)`,\n          backgroundClip: \"text\",\n          WebkitBackgroundClip: \"text\",\n          color: \"transparent\",\n          WebkitTextFillColor: \"transparent\"\n        } : { color: \"#000\" };\n\n        return (\n          <text\n            key={index}\n            x={word.x}\n            y={svgHeight * 0.65}\n            fill={index === 1 ? \"url(#rainbow-gradient)\" : \"#000\"}\n            fontFamily=\"Inter, sans-serif\"\n            fontWeight=\"700\"\n            fontSize={fontSize}\n            textAnchor={word.anchor}\n          >\n            {word.text}\n          </text>\n        );\n      })}\n    </svg>\n  </AbsoluteFill>\n);\n}\n\nexport const durationInFrames_me44xgz7 = 90;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Generating animation"},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, interpolate, useVideoConfig } = window.Remotion;\n\nexport default function Generating_me44o2rb() {\n    const frame = useCurrentFrame();\n    const { width, height } = useVideoConfig();\n\n    // Fixed shimmer: independent 60-frame loop for smooth continuous animation\n    const shimmerCycle = frame % 60;\n    const shimmerPosition = interpolate(\n        shimmerCycle,\n        [0, 60],\n        [-100, 100]\n    );\n\n    const textStyle = {\n        fontSize: Math.min(width * 0.12, 120) + 'px', // Responsive sizing\n        fontWeight: 'bold',\n        fontFamily: 'Helvetica, Arial, sans-serif',\n        textAlign: 'center',\n        color: 'transparent',\n        background: `linear-gradient(90deg, #888 0%, #fff 50%, #888 100%)`,\n        backgroundSize: '200% 100%',\n        backgroundPosition: `${shimmerPosition}% 0`,\n        WebkitBackgroundClip: 'text',\n        backgroundClip: 'text',\n        animation: 'none', // Prevent conflicts with manual positioning\n    };\n\n    return (\n        <AbsoluteFill\n            style={{\n                backgroundColor: 'black',\n                justifyContent: 'center',\n                alignItems: 'center',\n            }}\n        >\n            <div style={textStyle}>Generating...</div>\n        </AbsoluteFill>\n    );\n};\n\nexport const durationInFrames_me44o2rb = 120;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Portrait testimonials animation"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst testimonials_8a7f2b3c = [\n  {\n    text: \"The support team is exceptional, guiding us through setup and providing ongoing assistance, ensuring our satisfaction.\",\n    name: \"Saman Malik\",\n    role: \"Customer Support Lead\",\n    avatar: window.BazaarAvatars['asian-woman']\n  },\n  {\n    text: \"Its robust features and quick support have transformed our workflow, making us significantly more efficient.\",\n    name: \"Zainab Hussain\",\n    role: \"Project Manager\",\n    avatar: window.BazaarAvatars['middle-eastern-man']\n  },\n  {\n    text: \"Using this ERP, our online presence and conversions significantly improved, boosting business performance.\",\n    name: \"Hassan Ali\",\n    role: \"E-commerce Manager\",\n    avatar: window.BazaarAvatars['black-man']\n  },\n  {\n    text: \"This ERP revolutionized our operations, streamlining finance and inventory. The cloud-based platform keeps us productive, even remotely.\",\n    name: \"Briana Patton\",\n    role: \"Operations Manager\",\n    avatar: window.BazaarAvatars['white-woman']\n  },\n  {\n    text: \"The smooth implementation exceeded expectations. It streamlined processes, improving overall business performance.\",\n    name: \"Aliza Khan\",\n    role: \"Business Analyst\",\n    avatar: window.BazaarAvatars['hispanic-man']\n  },\n  {\n    text: \"Our business functions improved with a user-friendly design and positive customer feedback.\",\n    name: \"Farhan Siddiqui\",\n    role: \"Marketing Director\",\n    avatar: window.BazaarAvatars['asian-woman']\n  },\n  {\n    text: \"The platform's analytics dashboard provides incredible insights that have helped us make data-driven decisions.\",\n    name: \"Sarah Chen\",\n    role: \"Data Analyst\",\n    avatar: window.BazaarAvatars['white-woman']\n  },\n  {\n    text: \"Implementation was seamless and the training provided was comprehensive. Our team adapted quickly to the new system.\",\n    name: \"Michael Rodriguez\",\n    role: \"IT Director\",\n    avatar: window.BazaarAvatars['hispanic-man']\n  },\n  {\n    text: \"The mobile app functionality allows our field team to stay connected and productive from anywhere.\",\n    name: \"Priya Sharma\",\n    role: \"Field Operations Lead\",\n    avatar: window.BazaarAvatars['asian-woman']\n  },\n  {\n    text: \"Customer service response time is outstanding. Issues are resolved quickly with professional support.\",\n    name: \"David Thompson\",\n    role: \"Customer Success Manager\",\n    avatar: window.BazaarAvatars['black-man']\n  },\n  {\n    text: \"The reporting features have streamlined our monthly reviews and improved our decision-making process.\",\n    name: \"Lisa Wang\",\n    role: \"Finance Director\",\n    avatar: window.BazaarAvatars['middle-eastern-man']\n  },\n  {\n    text: \"Integration with our existing tools was flawless. The API documentation made everything straightforward.\",\n    name: \"Ahmed Hassan\",\n    role: \"Technical Lead\",\n    avatar: window.BazaarAvatars['white-woman']\n  }\n];\n\nconst script_8a7f2b3c = [\n  { type: \"header\", frames: 180 },\n  { type: \"testimonials\", frames: 180 }\n];\n\nlet accumulatedFrames_8a7f2b3c = 0;\nconst sequences_8a7f2b3c = script_8a7f2b3c.map(item => {\n  const sequence = { ...item, start: accumulatedFrames_8a7f2b3c };\n  accumulatedFrames_8a7f2b3c += item.frames;\n  return sequence;\n});\n\nconst totalFrames_8a7f2b3c = script_8a7f2b3c.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_8a7f2b3c = totalFrames_8a7f2b3c;\n\nconst TestimonialCard = ({ testimonial, delay, speed }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  const cardSpring = spring({\n    frame: frame - delay,\n    fps,\n    config: { damping: 12, stiffness: 200 }\n  });\n\n  const translateX = interpolate(\n    frame,\n    [0, 240],\n    [0, -2000],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"extend\" }\n  ) * speed;\n\n  const opacity = interpolate(cardSpring, [0, 1], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" });\n  const scale = interpolate(cardSpring, [0, 1], [0.8, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" });\n\n  // Decreased card height by 15%\n  const cardHeight = height * 0.238; // Reduced from 0.28 to 0.238 (15% decrease)\n  const cardWidth = Math.min(cardHeight * 1.5, width * 0.5);\n\n  return (\n    <div\n      style={{\n        backgroundColor: \"white\",\n        borderRadius: \"24px\",\n        padding: \"45px\",\n        marginRight: \"48px\", // Increased from 24px to 48px\n        width: cardWidth,\n        height: cardHeight,\n        minWidth: cardWidth,\n        boxShadow: \"0 16px 40px rgba(0,0,0,0.15)\",\n        border: \"1px solid rgba(0,0,0,0.05)\",\n        opacity,\n        transform: `translateX(${translateX}px) scale(${scale})`,\n        transformOrigin: \"center\",\n        flexShrink: 0,\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\"\n      }}\n    >\n      <div\n        style={{\n          fontSize: Math.min(32, cardHeight * 0.14) + \"px\",\n          lineHeight: \"1.4\",\n          color: \"#374151\",\n          fontFamily: \"Inter\",\n          fontWeight: \"400\",\n          flex: 1,\n          display: \"flex\",\n          alignItems: \"flex-start\"\n        }}\n      >\n        {testimonial.text}\n      </div>\n      <div style={{ display: \"flex\", alignItems: \"center\", gap: \"28px\", marginTop: \"32px\" }}>\n        <img\n          src={testimonial.avatar}\n          style={{\n            width: Math.min(90, cardHeight * 0.28) + \"px\",\n            height: Math.min(90, cardHeight * 0.28) + \"px\",\n            borderRadius: \"50%\",\n            objectFit: \"cover\"\n          }}\n        />\n        <div>\n          <div\n            style={{\n              fontFamily: \"Inter\",\n              fontWeight: \"600\",\n              fontSize: Math.min(26, cardHeight * 0.12) + \"px\",\n              color: \"#111827\",\n              lineHeight: \"1.3\"\n            }}\n          >\n            {testimonial.name}\n          </div>\n          <div\n            style={{\n              fontFamily: \"Inter\",\n              fontWeight: \"400\",\n              fontSize: Math.min(22, cardHeight * 0.09) + \"px\",\n              color: \"#6B7280\",\n              lineHeight: \"1.3\"\n            }}\n          >\n            {testimonial.role}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst TestimonialRow = ({ testimonials, speed, delay }) => {\n  return (\n    <div style={{ \n      display: \"flex\", \n      flexDirection: \"row\", \n      alignItems: \"center\",\n      overflow: \"hidden\",\n      width: \"100%\"\n    }}>\n      {[...testimonials, ...testimonials, ...testimonials].map((testimonial, index) => (\n        <TestimonialCard\n          key={index}\n          testimonial={testimonial}\n          delay={delay}\n          speed={speed}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst FastTypewriterText = ({ text, delay, duration }) => {\n  const frame = useCurrentFrame();\n  const { width } = useVideoConfig();\n  \n  const chars = text.split('');\n  const framesPerChar = duration / chars.length;\n  \n  const visibleChars = Math.min(\n    chars.length,\n    Math.max(0, Math.floor((frame - delay) / framesPerChar))\n  );\n  \n  const displayText = chars.slice(0, visibleChars).join('');\n  \n  return (\n    <div\n      style={{\n        fontSize: Math.min(width * 0.08, 120) + \"px\",\n        fontWeight: \"700\",\n        color: \"#111827\",\n        fontFamily: \"Inter\",\n        textAlign: \"center\",\n        opacity: frame >= delay ? 1 : 0,\n        lineHeight: \"1.2\",\n        maxWidth: \"95%\"\n      }}\n    >\n      {displayText}\n      {frame >= delay && frame < delay + duration && visibleChars < chars.length && (\n        <span style={{ opacity: 0.5, animation: \"blink 1s infinite\" }}>|</span>\n      )}\n    </div>\n  );\n};\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  const headerSequence = sequences_8a7f2b3c.find(s => s.type === \"header\");\n  const testimonialsSequence = sequences_8a7f2b3c.find(s => s.type === \"testimonials\");\n\n  // Adjusted layout to move bottom 2 rows up so bottom row is fully visible\n  const textHeight = height * 0.20; // Reduced from 0.3 to 0.25\n  const row1Height = height * 0.22; // Keep same\n  const row23Height = (height - textHeight - row1Height - 40) / 2; // Added 40px buffer for bottom visibility\n\n  // Split the main text into two sentences with slower timing\n  const sentence1 = \"Our customers absolutely love us.\";\n  const sentence2 = \"See what they have to say\";\n  \n  // Slower timing for sentences (character by character display)\n  const sentence1Start = 0;\n  const sentence1Duration = 60; // 2 seconds at 30fps - slower\n  const sentence2Start = sentence1Start + sentence1Duration + 30; // 1 second gap\n  const sentence2Duration = 50; // 1.67 seconds at 30fps - slower\n\n  return (\n    <AbsoluteFill\n      style={{\n        background: \"linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)\",\n        fontFamily: \"Inter\"\n      }}\n    >\n      <style>\n        {`\n          @keyframes blink {\n            0%, 50% { opacity: 1; }\n            51%, 100% { opacity: 0; }\n          }\n        `}\n      </style>\n      \n      {/* Row 1 - Keep at top */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"30px\",\n          left: \"0\",\n          right: \"0\",\n          height: row1Height + \"px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          overflow: \"hidden\"\n        }}\n      >\n        <TestimonialRow\n          testimonials={testimonials_8a7f2b3c.slice(0, 4)}\n          speed={1.2}\n          delay={0}\n        />\n      </div>\n\n      {/* Text in the middle - reduced padding */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: (row1Height + 40) + \"px\", // Reduced from 60px to 40px\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          textAlign: \"center\",\n          zIndex: 10,\n          width: \"95%\",\n          height: textHeight + \"px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          gap: \"20px\"\n        }}\n      >\n        {/* First sentence - shown first */}\n        {frame >= sentence1Start && frame < sentence2Start && (\n          <FastTypewriterText \n            text={sentence1}\n            delay={sentence1Start}\n            duration={sentence1Duration}\n          />\n        )}\n        \n        {/* Second sentence - shown after first completes */}\n        {frame >= sentence2Start && (\n          <FastTypewriterText \n            text={sentence2}\n            delay={sentence2Start}\n            duration={sentence2Duration}\n          />\n        )}\n      </div>\n\n      {/* Row 2 - Moved up with reduced padding */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: (row1Height + textHeight + 45) + \"px\", // Reduced from 60px to 45px\n          left: \"0\",\n          right: \"0\",\n          height: row23Height + \"px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          overflow: \"hidden\"\n        }}\n      >\n        <TestimonialRow\n          testimonials={testimonials_8a7f2b3c.slice(4, 8)}\n          speed={1.3}\n          delay={0}\n        />\n      </div>\n      \n      {/* Row 3 - Moved up with reduced padding to ensure full visibility */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: (row1Height + textHeight + row23Height + 60) + \"px\", // Reduced from 80px to 60px\n          left: \"0\",\n          right: \"0\",\n          height: row23Height + \"px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          overflow: \"hidden\"\n        }}\n      >\n        <TestimonialRow\n          testimonials={testimonials_8a7f2b3c.slice(8, 12)}\n          speed={1.4}\n          delay={0}\n        />\n      </div>\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Typewriter hero animation"},{"role":"assistant","content":"const { AbsoluteFill, interpolate, useCurrentFrame, spring, useVideoConfig, Img } = window.Remotion;\n\nconst typewriterOptions = [\n  \"landing page\",\n  \"health app\",\n  \"web app that...\",\n  \"note taking app\"\n];\n\nconst SearchBar = ({ opacity }) => {\n  const frame = useCurrentFrame();\n  const { width, height } = useVideoConfig();\n  \n  // Detect format based on aspect ratio\n  const aspectRatio = width / height;\n  const isPortrait = aspectRatio < 1;\n  const isSquare = Math.abs(aspectRatio - 1) < 0.1;\n  const isLandscape = aspectRatio > 1.5;\n  \n  // Adaptive sizing based on format - scaled down by 25%\n  const boxWidth = (isPortrait ? width * 0.99 : isSquare ? width * 0.8 : width * 0.83) * 0.75;\n  const fontSize = (isPortrait ? width * 0.045 : isSquare ? width * 0.05 : width * 0.034) * 0.75 * 0.8; // Made 20% smaller\n  const iconSize = (isPortrait ? width * 0.06 : isSquare ? width * 0.065 : width * 0.037) * 0.75 * 0.75; // Made 25% smaller\n  const padding = (isPortrait ? width * 0.04 : width * 0.025) * 0.75;\n  const borderRadius = width * 0.026 * 0.75;\n  \n  // Static text that always shows - with proper spacing\n  const staticText = \"Ask Lovable to create a\";\n  \n  // Animation timing for typewriter effect with typing out\n  const cycleFrames = 90; // Total frames per option (increased to accommodate typing out)\n  const typeInFrames = 30; // Frames to type in each option\n  const pauseFrames = 30; // Frames to pause with full text\n  const typeOutFrames = 30; // Frames to type out each option\n  \n  // Calculate which option we're currently showing\n  const currentCycle = Math.floor((frame - 30) / cycleFrames);\n  const frameInCycle = (frame - 30) % cycleFrames;\n  const optionIndex = currentCycle % typewriterOptions.length;\n  const currentOption = typewriterOptions[optionIndex];\n  \n  // Calculate typewriter progress for current option\n  let typewriterText = \"\";\n  if (frame >= 30) {\n    if (frameInCycle < typeInFrames) {\n      // Typing in phase\n      const charCount = Math.floor(\n        interpolate(\n          frameInCycle,\n          [0, typeInFrames],\n          [0, currentOption.length],\n          { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n        )\n      );\n      typewriterText = currentOption.slice(0, charCount);\n    } else if (frameInCycle < typeInFrames + pauseFrames) {\n      // Pause phase - show full text\n      typewriterText = currentOption;\n    } else {\n      // Typing out phase\n      const typeOutProgress = frameInCycle - typeInFrames - pauseFrames;\n      const charCount = Math.floor(\n        interpolate(\n          typeOutProgress,\n          [0, typeOutFrames],\n          [currentOption.length, 0],\n          { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n        )\n      );\n      typewriterText = currentOption.slice(0, charCount);\n    }\n  }\n  \n  // Cursor visibility\n  const cursorVisible = Math.floor(frame / 15) % 2 === 0;\n  const showCursor = frame >= 30;\n  \n  const iconProgress = 1;\n  const boxHeight = (isPortrait \n    ? height * 0.25\n    : height * 0.3) * 0.75;\n\n  return (\n    <>\n      <div\n        style={{\n          width: boxWidth,\n          height: boxHeight,\n          background: \"#F5F5F5\",\n          borderRadius: borderRadius,\n          padding: padding,\n          opacity,\n          boxShadow: \"0 8px 64px rgba(0, 0, 0, 0.1)\",\n          position: \"relative\",\n          transition: \"height 0.3s ease\",\n        }}\n      >\n        <div\n          style={{\n            fontSize: fontSize,\n            fontFamily: \"Inter, sans-serif\",\n            color: \"#000000\",\n            opacity: 0.8,\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: fontSize * 0.12,\n            marginBottom: padding * 0.83,\n            zIndex: 1,\n            position: \"relative\",\n          }}\n        >\n          <div style={{ display: \"flex\", alignItems: \"center\", flexWrap: \"nowrap\" }}>\n            <span>{staticText}</span>\n            <span style={{ marginLeft: fontSize * 0.25 }}>{typewriterText}</span>\n            {cursorVisible && showCursor && (\n              <span\n                style={{\n                  width: fontSize * 0.1,\n                  height: fontSize * 0.74,\n                  background: \"#000000\",\n                  display: \"inline-block\",\n                  marginLeft: fontSize * 0.06,\n                }}\n              />\n            )}\n          </div>\n        </div>\n        \n        <div\n          style={{\n            position: \"absolute\",\n            bottom: padding * 1,\n            left: padding,\n            display: \"flex\",\n            gap: iconSize * 1.2, // Increased gap from 0.6 to 1.2 for more spacing\n            alignItems: \"center\",\n            opacity: iconProgress,\n            zIndex: 2,\n          }}\n        >\n          {/* Plus icon */}\n          <div\n            style={{\n              fontSize: iconSize,\n              color: \"#666666\",\n              cursor: \"pointer\",\n              width: iconSize,\n              height: iconSize,\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              borderRadius: \"50%\",\n              border: \"1px solid #cccccc\", // Added stroke border\n            }}\n          >\n            <window.IconifyIcon\n              icon=\"material-symbols:add\"\n              style={{\n                fontSize: iconSize,\n                color: \"#666666\",\n              }}\n            />\n          </div>\n          \n          {/* Attach button with image icon and text */}\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: iconSize * 0.25,\n              color: \"#666666\",\n              cursor: \"pointer\",\n              fontSize: fontSize * 0.85,\n              fontFamily: \"Inter, sans-serif\",\n              border: \"1px solid #cccccc\", // Added stroke border\n              borderRadius: \"50px\",\n              padding: `${iconSize * 0.2}px ${iconSize * 0.3}px`, // Added padding inside border\n            }}\n          >\n            <window.IconifyIcon\n              icon=\"material-symbols:image-outline\"\n              style={{\n                fontSize: iconSize,\n                color: \"#666666\",\n              }}\n            />\n            <span>Attach</span>\n          </div>\n          \n          {/* Public button with globe icon and text */}\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: iconSize * 0.25,\n              color: \"#666666\",\n              cursor: \"pointer\",\n              fontSize: fontSize * 0.85,\n              fontFamily: \"Inter, sans-serif\",\n              border: \"1px solid #cccccc\", // Added stroke border\n              borderRadius: \"50px\",\n              padding: `${iconSize * 0.2}px ${iconSize * 0.3}px`, // Added padding inside border\n            }}\n          >\n            <window.IconifyIcon\n              icon=\"material-symbols:public\"\n              style={{\n                fontSize: iconSize,\n                color: \"#666666\",\n              }}\n            />\n            <span>Public</span>\n          </div>\n        </div>\n        \n        <div\n          style={{\n            position: \"absolute\",\n            bottom: padding * 0.83,\n            right: padding,\n            opacity: iconProgress,\n          }}\n        >\n          <div\n            style={{\n              width: iconSize * 1.67,\n              height: iconSize * 1.67,\n              borderRadius: \"50%\",\n              background: \"#333333\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              cursor: \"pointer\",\n            }}\n          >\n            <window.IconifyIcon\n              icon=\"material-symbols:arrow-upward\"\n              style={{\n                fontSize: iconSize * 0.83,\n                color: \"#FFFFFF\",\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default function PromptUI() {\n  const frame = useCurrentFrame();\n  const { width, height } = useVideoConfig();\n  \n  const mainProgress = spring({\n    frame: frame > 5 ? frame : 0,\n    fps: 30,\n    config: {\n      damping: 20,\n      stiffness: 80,\n    },\n  });\n\n  // Sequential animations for \"Make\", \"something\", and logo\n  // \"Make\" animation (0-20 frames)\n  const makeOpacity = interpolate(\n    frame,\n    [0, 20],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const makeY = interpolate(\n    frame,\n    [0, 20],\n    [30, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // \"something\" animation (15-35 frames)\n  const somethingOpacity = interpolate(\n    frame,\n    [15, 35],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const somethingY = interpolate(\n    frame,\n    [15, 35],\n    [30, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Logo animation (30-50 frames)\n  const logoOpacity = interpolate(\n    frame,\n    [30, 50],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const logoY = interpolate(\n    frame,\n    [30, 50],\n    [30, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Subheading animation (50-70 frames)\n  const subheadingOpacity = interpolate(\n    frame,\n    [50, 70],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const subheadingY = interpolate(\n    frame,\n    [50, 70],\n    [30, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Adaptive sizing for title and logo\n  const aspectRatio = width / height;\n  const isPortrait = aspectRatio < 1;\n  const isSquare = Math.abs(aspectRatio - 1) < 0.1;\n  \n  const titleFontSize = isPortrait ? width * 0.08 : isSquare ? width * 0.06 : width * 0.04;\n  const subheadingFontSize = titleFontSize * 0.5625; // 25% smaller than original (0.75 * 0.75)\n  const logoWidth = isPortrait ? width * 0.4 : isSquare ? width * 0.3 : width * 0.2;\n  const logoHeight = logoWidth * (145 / 800); // Maintain aspect ratio\n\n  return (\n    <AbsoluteFill\n      style={{\n        background: `radial-gradient(ellipse at center bottom, #d97e6e 0%, #e8a085 15%, #f2c4a8 30%, #e8c4d4 45%, #d8c4e8 60%, #cbcfe8 75%, #c8d5f0 85%, #cddaf5 100%)`,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        paddingTop: height * 0.15,\n      }}\n    >\n      {/* Title and Logo on same line */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: height * 0.2,\n          left: \"50%\",\n          transform: \"translate(-50%, 0)\",\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: titleFontSize * 0.5,\n          zIndex: 10,\n        }}\n      >\n        {/* \"Make\" text */}\n        <div\n          style={{\n            transform: `translateY(${makeY}px)`,\n            opacity: makeOpacity,\n            fontSize: titleFontSize,\n            fontFamily: \"Inter, sans-serif\",\n            fontWeight: \"600\",\n            color: \"#333333\",\n          }}\n        >\n          Make\n        </div>\n\n        {/* \"something\" text */}\n        <div\n          style={{\n            transform: `translateY(${somethingY}px)`,\n            opacity: somethingOpacity,\n            fontSize: titleFontSize,\n            fontFamily: \"Inter, sans-serif\",\n            fontWeight: \"600\",\n            color: \"#333333\",\n          }}\n        >\n          something\n        </div>\n\n        {/* Logo */}\n        <div\n          style={{\n            transform: `translateY(${logoY}px)`,\n            opacity: logoOpacity,\n          }}\n        >\n          <Img\n            src=\"https://cdn.brandfetch.io/idH9OjyiUq/w/800/h/145/theme/dark/logo.png?c=1bxid64Mup7aczewSAYMX&t=1748239860810\"\n            style={{\n              width: logoWidth,\n              height: logoHeight,\n              objectFit: \"contain\",\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Subheading */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: height * 0.2 + titleFontSize * 1.5,\n          left: \"50%\",\n          transform: `translate(-50%, ${subheadingY}px)`,\n          opacity: subheadingOpacity,\n          zIndex: 10,\n          whiteSpace: \"nowrap\",\n        }}\n      >\n        <div\n          style={{\n            fontSize: subheadingFontSize,\n            fontFamily: \"Inter, sans-serif\",\n            fontWeight: \"400\",\n            color: \"#666666\",\n            textAlign: \"center\",\n          }}\n        >\n          Create apps and websites by chatting with AI\n        </div>\n      </div>\n\n      <SearchBar opacity={mainProgress} />\n    </AbsoluteFill>\n  );\n}\n\nexport const durationInFrames_scene1 = 390;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Yellow bar chart animation"},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Img } = window.Remotion;\n\n// Auto-generated defaults for undefined variables\nconst padding = 16;\nconst gap = 12;\n\nconst TemplateScene = () => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Card entrance animation with Apple-style spring physics\n  const cardScale = spring({ frame, fps,\n    config: {\n      damping: 15,\n      stiffness: 300,\n      mass: 0.8,\n      overshootClamping: false,\n    },\n  });\n\n  const cardOpacity = spring({ frame, fps,\n    config: {\n      damping: 20,\n      stiffness: 400,\n      mass: 0.5,\n    },\n  });\n\n  // Main number animation - UPDATED to animate from 0 to 56% over first 2 seconds (60 frames)\n  const elementsProgress = interpolate(frame, [0, 60], [0, 1], {\n    extrapolateLeft: 'clamp',\n    extrapolateRight: 'clamp'\n  });\n\n  const animatedNumber = Math.floor(56 * elementsProgress);\n\n  // Bar animations with staggered spring timing for natural feel\n  const maxBarHeight = 180;\n  \n  const bar1Height = spring({ frame: frame - 10, fps,\n    config: {\n      damping: 16,\n      stiffness: 320,\n      mass: 0.7,\n      overshootClamping: false,\n    },\n  }) * (47 * maxBarHeight / 100);\n\n  const bar2Height = spring({ frame: frame - 15, fps,\n    config: {\n      damping: 16,\n      stiffness: 320,\n      mass: 0.7,\n      overshootClamping: false,\n    },\n  }) * (98 * maxBarHeight / 100);\n\n  const bar3Height = spring({ frame: frame - 20, fps,\n    config: {\n      damping: 16,\n      stiffness: 320,\n      mass: 0.7,\n      overshootClamping: false,\n    },\n  }) * (69 * maxBarHeight / 100);\n\n  const bar4Height = spring({ frame: frame - 25, fps,\n    config: {\n      damping: 16,\n      stiffness: 320,\n      mass: 0.7,\n      overshootClamping: false,\n    },\n  }) * (84 * maxBarHeight / 100);\n\n  const bar5Height = spring({ frame: frame - 30, fps,\n    config: {\n      damping: 16,\n      stiffness: 320,\n      mass: 0.7,\n      overshootClamping: false,\n    },\n  }) * (56 * maxBarHeight / 100);\n\n  const bar6Height = spring({ frame: frame - 35, fps,\n    config: {\n      damping: 16,\n      stiffness: 320,\n      mass: 0.7,\n      overshootClamping: false,\n    },\n  }) * (77 * maxBarHeight / 100);\n\n  // Button animation with delayed spring entrance\n  const buttonOpacity = spring({ frame: frame - 40, fps,\n    config: {\n      damping: 20,\n      stiffness: 400,\n      mass: 0.5,\n    },\n  });\n\n  const buttonScale = spring({\n    frame: frame - 40,\n    fps,\n    config: {\n      damping: 12,\n      stiffness: 350,\n      mass: 0.6,\n      overshootClamping: false,\n    },\n  });\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#e5e5e5\" }}>\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${cardScale})`,\n          opacity: cardOpacity,\n          width: \"600px\",\n          height: \"650px\",\n          backgroundColor: \"#f4e976\",\n          borderRadius: \"24px\",\n          padding: \"60px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          fontFamily: \"Inter\",\n        }}\n      >\n        {/* Header */}\n        <div\n          style={{\n            fontSize: \"18px\",\n            fontWeight: \"600\",\n            color: \"#4a4a4a\",\n            marginBottom: \"20px\",\n            letterSpacing: \"1px\",\n          }}\n        >\n          ENGAGEMENT\n        </div>\n\n        {/* Main Number */}\n        <div\n          style={{\n            fontSize: \"72px\",\n            fontWeight: \"800\",\n            color: \"#2d2d2d\",\n            marginBottom: \"60px\",\n            lineHeight: \"1\",\n          }}\n        >\n          {animatedNumber}%\n        </div>\n\n        {/* Chart Container */}\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            height: `${maxBarHeight}px`,\n            marginBottom: \"60px\",\n            gap: \"8px\",\n            position: \"relative\",\n          }}\n        >\n          {/* Bar 1 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${Math.max(0, bar1Height)}px`,\n                backgroundColor: \"#3d3d3d\",\n                borderRadius: \"4px 4px 0 0\",\n              }}\n            >\n              {bar1Height > 60 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>47%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 2 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${Math.max(0, bar2Height)}px`,\n                backgroundColor: \"#6b6b3d\",\n                borderRadius: \"4px 4px 0 0\",\n              }}\n            >\n              {bar2Height > 140 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>98%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 3 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${Math.max(0, bar3Height)}px`,\n                backgroundColor: \"#8b8b5d\",\n                borderRadius: \"4px 4px 0 0\",\n              }}\n            >\n              {bar3Height > 90 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>69%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 4 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${Math.max(0, bar4Height)}px`,\n                backgroundColor: \"#abab7d\",\n                borderRadius: \"4px 4px 0 0\",\n              }}\n            >\n              {bar4Height > 120 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>84%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 5 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${Math.max(0, bar5Height)}px`,\n                backgroundColor: \"#cbcb9d\",\n                borderRadius: \"4px 4px 0 0\",\n              }}\n            >\n              {bar5Height > 70 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>56%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 6 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${Math.max(0, bar6Height)}px`,\n                backgroundColor: \"#ebebbd\",\n                borderRadius: \"4px 4px 0 0\",\n              }}\n            >\n              {bar6Height > 100 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>77%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Button */}\n        <div\n          style={{\n            opacity: buttonOpacity,\n            transform: `scale(${buttonScale})`,\n            alignSelf: \"flex-start\",\n          }}\n        >\n          <div\n            style={{\n              backgroundColor: \"#2d2d2d\",\n              color: \"white\",\n              padding: \"16px 32px\",\n              borderRadius: \"24px\",\n              fontSize: \"14px\",\n              fontWeight: \"600\",\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"8px\",\n            }}\n          >\n            <div\n              style={{\n                width: \"8px\",\n                height: \"8px\",\n                backgroundColor: \"white\",\n                borderRadius: \"50%\",\n              }}\n            />\n            SEE MORE INSIGHTS\n          </div>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n};\n\nexport const durationInFrames_A7B9C2E1 = 120;\nexport default TemplateScene;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Pill chart portrait"},{"role":"assistant","content":"const { AbsoluteFill, interpolate, useCurrentFrame, spring, useVideoConfig } = window.Remotion;\n\nconst script_mer2yohf = [\n  { type: 'chart', text: 'Animated Histogram', frames: 120 },\n  { type: 'hold', text: 'Final Display', frames: 30 }\n];\n\nconst sequences_mer2yohf = [];\nlet accumulatedFrames_mer2yohf = 0;\n\nscript_mer2yohf.forEach((segment, index) => {\n  sequences_mer2yohf.push({\n    ...segment,\n    start: accumulatedFrames_mer2yohf,\n    end: accumulatedFrames_mer2yohf + segment.frames\n  });\n  accumulatedFrames_mer2yohf += segment.frames;\n});\n\nconst totalFrames_mer2yohf = script_mer2yohf.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_mer2yohf = totalFrames_mer2yohf;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  const histogramData = [\n    { label: '512', value: 512 },\n    { label: '240', value: 240, highlight: true },\n    { label: '480', value: 480 },\n    { label: '360', value: 360 },\n    { label: '440', value: 440, highlight: true },\n    { label: '640', value: 640 },\n    { label: '480', value: 480 },\n    { label: '360', value: 360, highlight: true }\n  ];\n\n  function HistogramChart({ progress }) {\n    const maxValue = Math.max(...histogramData.map(d => d.value));\n    const chartWidth = 600;\n    const maxChartHeight = 500; // Increased for better spacing\n    const chartX = (width - chartWidth) / 2;\n    const chartY = (height - maxChartHeight) / 2; // Centered vertically\n    const barWidth = (chartWidth - 80) / histogramData.length;\n    const padding = 8;\n\n    const visibleBars = Math.floor(progress * histogramData.length);\n\n    return (\n      <div \n        style= {{\n      position: 'absolute',\n        left: chartX,\n          top: chartY,\n            width: chartWidth,\n              height: maxChartHeight,\n                backgroundColor: '#f8f9fa',\n                  borderRadius: '16px',\n                    padding: '32px 24px',\n                      display: 'flex',\n                        flexDirection: 'column'\n    }\n  }\n      >\n    {/* Chart Title */ }\n    < div style = {{\n    fontSize: '48px',\n      fontWeight: '600',\n        color: '#2d3748',\n          marginBottom: '8px',\n            fontFamily: 'Inter'\n  }\n}>\n  Pill Shaped Bar Chart\n    < /div>\n\n{/* Check Level Indicator */ }\n<div style={\n  {\n    display: 'flex',\n      alignItems: 'center',\n        marginBottom: '64px', // Increased padding between title and bars\n          fontSize: '32px',\n            fontFamily: 'Inter'\n  }\n}>\n  <div style={\n    {\n      width: '24px',\n        height: '24px',\n          backgroundColor: '#ff6b35',\n            borderRadius: '50%',\n              marginRight: '8px',\n                display: 'flex',\n                  alignItems: 'center',\n                    justifyContent: 'center',\n                      fontSize: '14px',\n                        color: 'white',\n                          fontWeight: 'bold'\n    }\n}>✓</div>\n  < span style = {{ color: '#ff6b35', fontWeight: '500' }}> Highlight Something < /span>\n    < /div>\n\n{/* Chart Container with Fixed Layout */ }\n<div style={\n  {\n    flex: 1,\n      position: 'relative',\n        display: 'flex',\n          flexDirection: 'column'\n  }\n}>\n  {/* Bars Container */ }\n  < div style = {{\n  height: '280px', // Fixed height for bars area\n    display: 'flex',\n      alignItems: 'flex-end',\n        justifyContent: 'space-between',\n          marginBottom: '20px' // Fixed gap between bars and labels\n}}>\n{\n  histogramData.map((data, index) => {\n    const barHeight = interpolate(\n      data.value,\n      [0, maxValue],\n      [20, 260] // Fixed max height within the bars container\n    );\n\n    const animatedHeight = index < visibleBars\n      ? spring({\n        frame: frame - (index * 6),\n        fps,\n        config: { damping: 12, stiffness: 100 }\n      }) * barHeight\n      : index === visibleBars\n        ? interpolate(\n          progress * histogramData.length - visibleBars,\n          [0, 1],\n          [0, barHeight]\n        )\n        : 0;\n\n    // Determine bar color - bars 2, 5, and 7 should be orange\n    const isOrangeBar = index === 2 || index === 5 || index === 7;\n    const barColor = isOrangeBar ? '#ff6b35' : '#c7d2e7';\n\n    return (\n      <div key= { index } style = {{\n      display: 'flex',\n        flexDirection: 'column',\n          alignItems: 'center',\n            width: barWidth - padding\n    }\n  }>\n  {/* Bar with rounded pill shape */ }\n  < div style = {{\n    width: barWidth - padding,\n    height: Math.max(0, animatedHeight),\n    backgroundColor: barColor,\n    borderRadius: `${(barWidth - padding) / 2}px`,\n    position: 'relative',\n    transition: 'all 0.3s ease'\n  }} >\n  {/* White circle indicator inside orange bars */ }\n{\n  isOrangeBar && animatedHeight > 40 && (\n    <div style={\n      {\n        position: 'absolute',\n          top: '50%',\n            left: '50%',\n              transform: 'translate(-50%, -50%)',\n                width: '20px',\n                  height: '20px',\n                    backgroundColor: 'white',\n                      borderRadius: '50%'\n      }\n  } />\n                    )\n}\n</div>\n  < /div>\n              );\n            })}\n</div>\n\n{/* X-axis labels - Fixed position container */ }\n<div style={\n  {\n    height: '30px', // Fixed height for labels\n      display: 'flex',\n        justifyContent: 'space-between',\n          alignItems: 'center'\n  }\n}>\n{\n  histogramData.map((data, index) => (\n    <div key= { index } style = {{\n    fontSize: '16px',\n    color: '#4a5568',\n    fontFamily: 'Inter',\n    fontWeight: '600',\n    width: barWidth - padding,\n    textAlign: 'center'\n  }} >\n  { data.label }\n  < /div>\n            ))}\n</div>\n  < /div>\n  < /div>\n    );\n  }\n\nconst progress = Math.min(frame / 120, 1);\n\nreturn (\n  <AbsoluteFill style= {{ background: 'linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%)' }}>\n    <HistogramChart progress={ Math.max(0, progress) } />\n      < /AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Gradient globe background"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_a8f3b2c1 = [\n  { type: \"gradient-background\", frames: 180 }\n];\n\nlet accumulatedFrames_a8f3b2c1 = 0;\nconst sequences_a8f3b2c1 = script_a8f3b2c1.map(scene => {\n  const start = accumulatedFrames_a8f3b2c1;\n  accumulatedFrames_a8f3b2c1 += scene.frames;\n  return { ...scene, start, end: accumulatedFrames_a8f3b2c1 };\n});\n\nconst totalFrames_a8f3b2c1 = script_a8f3b2c1.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_a8f3b2c1 = totalFrames_a8f3b2c1;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Slower animated gradient background rotation\n  const gradientRotation = interpolate(\n    frame,\n    [0, totalFrames_a8f3b2c1],\n    [0, 180],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Smoother color shift for gradient with easing\n  const hue1 = spring({\n    frame,\n    fps,\n    config: {\n      damping: 200,\n      stiffness: 50,\n      mass: 1\n    },\n    from: 280,\n    to: interpolate(\n      frame,\n      [0, totalFrames_a8f3b2c1 / 2, totalFrames_a8f3b2c1],\n      [280, 320, 260]\n    )\n  });\n  \n  const hue2 = spring({\n    frame,\n    fps,\n    config: {\n      damping: 200,\n      stiffness: 50,\n      mass: 1\n    },\n    from: 180,\n    to: interpolate(\n      frame,\n      [0, totalFrames_a8f3b2c1 / 2, totalFrames_a8f3b2c1],\n      [180, 220, 160]\n    )\n  });\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#f5f5f5\" }}>\n      {/* Animated gradient background */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          width: \"600px\",\n          height: \"600px\",\n          transform: `translate(-50%, -50%) rotate(${gradientRotation}deg)`,\n          background: `conic-gradient(from 0deg, hsl(${hue1}, 70%, 60%), hsl(${hue2}, 80%, 65%), hsl(${hue1 + 60}, 75%, 70%), hsl(${hue1}, 70%, 60%))`,\n          borderRadius: \"50%\",\n          filter: \"blur(60px)\",\n          opacity: \"0.8\",\n          zIndex: 1\n        }}\n      />\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Responsive text animation"},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, interpolate } = window.Remotion;\n\nconst script_mf165pbn = [\n  { text: \"My name is Jeff\", frames: 30 }\n];\n\nconst sequences_mf165pbn = [];\nlet accumulatedFrames_mf165pbn = 0;\n\nscript_mf165pbn.forEach((item, index) => {\n  sequences_mf165pbn.push({\n    start: accumulatedFrames_mf165pbn,\n    duration: item.frames,\n    text: item.text\n  });\n  accumulatedFrames_mf165pbn += item.frames;\n});\n\nconst totalFrames_mf165pbn = script_mf165pbn.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_mf165pbn = totalFrames_mf165pbn;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  \n  const words = [\"My\", \"name\", \"is\", \"Jeff\"];\n  const animationFrames = 4; // Faster animation per word\n  const pauseFrames = 10; // Pause on final word\n  const totalAnimationTime = 30 - pauseFrames; // 20 frames for all animations\n  const framesPerWord = totalAnimationTime / words.length; // 5 frames per word\n  \n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: \"white\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        gap: \"20px\"\n      }}\n    >\n      {words.map((word, index) => {\n        const startFrame = index * framesPerWord;\n        const endFrame = startFrame + animationFrames;\n        \n        const opacity = interpolate(\n          frame,\n          [startFrame, endFrame],\n          [0, 1],\n          {\n            extrapolateLeft: \"clamp\",\n            extrapolateRight: \"clamp\"\n          }\n        );\n        \n        const translateY = interpolate(\n          frame,\n          [startFrame, endFrame],\n          [30, 0],\n          {\n            extrapolateLeft: \"clamp\",\n            extrapolateRight: \"clamp\"\n          }\n        );\n        \n        return (\n          <div\n            key={index}\n            style={{\n              fontSize: \"80px\",\n              fontFamily: \"Inter\",\n              fontWeight: \"700\",\n              color: \"black\",\n              opacity: opacity,\n              transform: `translateY(${translateY}px)`,\n            }}\n          >\n            {word}\n          </div>\n        );\n      })}\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Sliding headline animation"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig } = window.Remotion;\n\nconst script_A7B9C2D1 = [\n  { type: 'initial', frames: 15 }, // Halved from 30\n  { type: 'pause1', frames: 15 },   // Halved from 30\n  { type: 'swipe1', frames: 10 },   // Halved from 20\n  { type: 'pause2', frames: 15 },   // Halved from 30\n  { type: 'swipe2', frames: 10 },   // Halved from 20\n  { type: 'pause3', frames: 15 },   // Halved from 30\n  { type: 'swipe3', frames: 10 },   // Halved from 20\n  { type: 'pause4', frames: 15 },   // Halved from 30\n  { type: 'swipe4', frames: 10 },   // Halved from 20\n  { type: 'pause5', frames: 15 },   // Halved from 30\n  { type: 'swipe5', frames: 10 },   // Halved from 20\n  { type: 'pause6', frames: 15 },   // Halved from 30\n  { type: 'hold', frames: 15 }      // Halved from 30\n];\n\nconst sequences_A7B9C2D1 = [];\nlet accumulatedFrames_A7B9C2D1 = 0;\n\nscript_A7B9C2D1.forEach((segment, index) => {\n  sequences_A7B9C2D1.push({\n    ...segment,\n    start: accumulatedFrames_A7B9C2D1,\n    end: accumulatedFrames_A7B9C2D1 + segment.frames\n  });\n  accumulatedFrames_A7B9C2D1 += segment.frames;\n});\n\nconst totalFrames_A7B9C2D1 = script_A7B9C2D1.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_A7B9C2D1 = totalFrames_A7B9C2D1;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Reordered words to start with marketplace\n  const words = ['Marketplace', 'Website', 'Portfolio', 'App', 'Business', 'Anything'];\n  \n  const getCurrentWordIndex = () => {\n    // During initial + pause1: show first word (Marketplace) - frames 0-29\n    if (frame < sequences_A7B9C2D1[2].start) return 0; // before frame 30\n    // During swipe1: transition from first to second - frames 30-39\n    if (frame < sequences_A7B9C2D1[3].start) return 0; // before frame 40\n    // During pause2: show second word (Website) - frames 40-54\n    if (frame < sequences_A7B9C2D1[4].start) return 1; // before frame 55\n    // During swipe2: transition from second to third - frames 55-64\n    if (frame < sequences_A7B9C2D1[5].start) return 1; // before frame 65\n    // During pause3: show third word (Portfolio) - frames 65-79\n    if (frame < sequences_A7B9C2D1[6].start) return 2; // before frame 80\n    // During swipe3: transition from third to fourth - frames 80-89\n    if (frame < sequences_A7B9C2D1[7].start) return 2; // before frame 90\n    // During pause4: show fourth word (App) - frames 90-104\n    if (frame < sequences_A7B9C2D1[8].start) return 3; // before frame 105\n    // During swipe4: transition from fourth to fifth - frames 105-114\n    if (frame < sequences_A7B9C2D1[9].start) return 3; // before frame 115\n    // During pause5: show fifth word (Landing Page) - frames 115-129\n    if (frame < sequences_A7B9C2D1[10].start) return 4; // before frame 130\n    // During swipe5: transition from fifth to sixth - frames 130-139\n    if (frame < sequences_A7B9C2D1[11].start) return 4; // before frame 140\n    // During pause6 and hold: show sixth word (Anything) - frames 140+\n    return 5;\n  };\n\n  const getSwipeAnimation = () => {\n    const currentSequence = sequences_A7B9C2D1.find(seq => frame >= seq.start && frame < seq.end);\n    if (!currentSequence || currentSequence.type === 'initial' || currentSequence.type === 'hold' || currentSequence.type.startsWith('pause')) {\n      return { currentY: 0, nextY: 100, opacity: 1, isAnimating: false };\n    }\n    \n    const localFrame = frame - currentSequence.start;\n    const swipeDuration = 10; // Halved from 20\n    \n    const progress = interpolate(localFrame, [0, swipeDuration], [0, 1], {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    });\n    \n    // Current word swipes up and out\n    const currentY = interpolate(progress, [0, 1], [0, -100]);\n    // Next word swipes up from bottom\n    const nextY = interpolate(progress, [0, 1], [100, 0]);\n    \n    return { currentY, nextY, opacity: 1, isAnimating: true, progress };\n  };\n\n  // Initial entrance animation - now completes before swipes start\n  const entranceScale = spring({\n    frame,\n    fps,\n    config: { damping: 12, stiffness: 100 }\n  });\n\n  const entranceOpacity = interpolate(frame, [0, 15], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\"\n  });\n\n  const swipeAnim = getSwipeAnimation();\n  const currentWordIndex = getCurrentWordIndex();\n  const nextWordIndex = currentWordIndex < words.length - 1 ? currentWordIndex + 1 : currentWordIndex;\n\n  return (\n    <AbsoluteFill style={{\n      background: \"linear-gradient(135deg, #1a0d2e 0%, #2d1b4e 50%, #4a2c7a 100%)\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    }}>\n      {/* Purple glowing box */}\n      <div style={{\n        position: \"relative\",\n        padding: \"40px 80px\",\n        background: \"rgba(0, 0, 0, 0.6)\",\n        borderRadius: \"30px\",\n        border: \"3px solid #8b5cf6\",\n        boxShadow: \"0 0 60px rgba(139, 92, 246, 0.6), inset 0 0 30px rgba(139, 92, 246, 0.1)\",\n        transform: `scale(${entranceScale})`,\n        opacity: entranceOpacity\n      }}>\n        {/* Static \"Build a\" text */}\n        <div style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"20px\",\n          fontFamily: \"Inter\",\n          fontWeight: \"600\",\n          fontSize: \"72px\",\n          color: \"white\"\n        }}>\n          <span>Build a</span>\n          \n          {/* Swiping word container */}\n          <div style={{\n            position: \"relative\",\n            minWidth: \"450px\",\n            height: \"90px\",\n            display: \"flex\",\n            alignItems: \"center\",\n            overflow: \"hidden\"\n          }}>\n            {/* Current word */}\n            <span style={{\n              position: \"absolute\",\n              left: 0,\n              transform: `translateY(${swipeAnim.currentY}%)`,\n              transition: \"none\",\n              display: \"block\",\n              opacity: swipeAnim.isAnimating ? interpolate(swipeAnim.progress, [0, 0.5, 1], [1, 1, 0]) : 1\n            }}>\n              {words[currentWordIndex]}\n            </span>\n            \n            {/* Next word (only visible during animation) */}\n            {swipeAnim.isAnimating && (\n              <span style={{\n                position: \"absolute\",\n                left: 0,\n                transform: `translateY(${swipeAnim.nextY}%)`,\n                transition: \"none\",\n                display: \"block\",\n                opacity: interpolate(swipeAnim.progress, [0, 0.5, 1], [0, 0, 1])\n              }}>\n                {words[nextWordIndex]}\n              </span>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Particle effects around the box */}\n      {[...Array(8)].map((_, i) => {\n        const angle = (i / 8) * Math.PI * 2;\n        const radius = 300;\n        const x = Math.cos(angle) * radius;\n        const y = Math.sin(angle) * radius;\n        \n        const particleOpacity = interpolate(\n          frame,\n          [15, 25, totalFrames_A7B9C2D1 - 10, totalFrames_A7B9C2D1],\n          [0, 0.6, 0.6, 0],\n          { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n        );\n\n        return (\n          <div\n            key={i}\n            style={{\n              position: \"absolute\",\n              left: \"50%\",\n              top: \"50%\",\n              width: \"4px\",\n              height: \"4px\",\n              background: \"#8b5cf6\",\n              borderRadius: \"50%\",\n              transform: `translate(${x}px, ${y}px)`,\n              opacity: particleOpacity,\n              boxShadow: \"0 0 10px #8b5cf6\"\n            }}\n          />\n        );\n      })}\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Animated ui card"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_A8B9C2D1 = [\n  { type: \"simultaneous_animation\", frames: 25 }\n];\n\nconst sequences_A8B9C2D1 = [];\nlet accumulatedFrames_A8B9C2D1 = 0;\n\nscript_A8B9C2D1.forEach((segment, index) => {\n  sequences_A8B9C2D1.push({\n    ...segment,\n    start: accumulatedFrames_A8B9C2D1,\n    end: accumulatedFrames_A8B9C2D1 + segment.frames\n  });\n  accumulatedFrames_A8B9C2D1 += segment.frames;\n});\n\nconst totalFrames_A8B9C2D1 = script_A8B9C2D1.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_A8B9C2D1 = totalFrames_A8B9C2D1;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Profile image scaling animation (80% to 100%)\n  const profileScale = interpolate(\n    frame,\n    [0, 15],\n    [0.8, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\", easing: (t) => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t }\n  );\n\n  // Total Revenue card sliding up from bottom - ease in ease out\n  const revenueY = interpolate(\n    frame,\n    [0, 15],\n    [200, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\", easing: (t) => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t }\n  );\n\n  // Data Customer Profile sliding down from top - ease in ease out\n  const dataY = interpolate(\n    frame,\n    [0, 15],\n    [-150, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\", easing: (t) => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t }\n  );\n\n  // Bar chart animation - bars growing and changing\n  const bar1Height = interpolate(\n    frame,\n    [10, 20],\n    [60, 80],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const bar2Height = interpolate(\n    frame,\n    [12, 22],\n    [90, 70],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const bar3Height = interpolate(\n    frame,\n    [14, 24],\n    [100, 120],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const bar4Height = interpolate(\n    frame,\n    [16, 25],\n    [70, 85],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const bar5Height = interpolate(\n    frame,\n    [18, 25],\n    [50, 60],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Percentage values changing\n  const percentage1 = Math.round(interpolate(\n    frame,\n    [10, 20],\n    [57, 62],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  ));\n\n  const percentage2 = Math.round(interpolate(\n    frame,\n    [12, 22],\n    [69, 65],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  ));\n\n  const percentage3 = Math.round(interpolate(\n    frame,\n    [14, 24],\n    [79, 84],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  ));\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#F4E76E\" }}>\n      \n      {/* Data Customer Profile Card - Behind, sliding down, moved more to the left */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"40%\",\n          right: \"20%\",\n          transform: `translate(0, calc(-50% + ${dataY}px))`,\n          backgroundColor: \"#2A2A2A\",\n          borderRadius: \"24px\",\n          padding: \"32px\",\n          width: \"400px\",\n          height: \"320px\",\n          zIndex: 1\n        }}\n      >\n        <div style={{ display: \"flex\", alignItems: \"center\", marginBottom: \"24px\" }}>\n          <div\n            style={{\n              width: \"32px\",\n              height: \"32px\",\n              backgroundColor: \"white\",\n              borderRadius: \"8px\",\n              marginRight: \"16px\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\"\n            }}\n          >\n            <window.IconifyIcon icon=\"mdi:star-four-points\" style={{ fontSize: \"20px\", color: \"#2A2A2A\" }} />\n          </div>\n          <div>\n            <div style={{ color: \"white\", fontSize: \"24px\", fontWeight: \"700\", fontFamily: \"Inter\" }}>DATA</div>\n            <div style={{ color: \"#888\", fontSize: \"18px\", fontFamily: \"Inter\" }}>Customer Profile</div>\n          </div>\n        </div>\n\n        {/* Bar Chart */}\n        <div style={{ display: \"flex\", alignItems: \"end\", justifyContent: \"space-between\", height: \"160px\", marginBottom: \"16px\" }}>\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n            <div style={{ color: \"#888\", fontSize: \"14px\", marginBottom: \"8px\", fontFamily: \"Inter\" }}>{percentage1}%</div>\n            <div\n              style={{\n                width: \"40px\",\n                height: `${bar1Height}px`,\n                backgroundColor: \"#F4E76E\",\n                borderRadius: \"4px\"\n              }}\n            />\n            <div style={{ color: \"#888\", fontSize: \"12px\", marginTop: \"8px\", fontFamily: \"Inter\" }}>I-32</div>\n          </div>\n          \n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n            <div style={{ color: \"#888\", fontSize: \"14px\", marginBottom: \"8px\", fontFamily: \"Inter\" }}>{percentage2}%</div>\n            <div\n              style={{\n                width: \"40px\",\n                height: `${bar2Height}px`,\n                backgroundColor: \"white\",\n                borderRadius: \"4px\"\n              }}\n            />\n            <div style={{ color: \"#888\", fontSize: \"12px\", marginTop: \"8px\", fontFamily: \"Inter\" }}>USA</div>\n          </div>\n\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n            <div style={{ color: \"#888\", fontSize: \"14px\", marginBottom: \"8px\", fontFamily: \"Inter\" }}>{percentage3}%</div>\n            <div\n              style={{\n                width: \"40px\",\n                height: `${bar3Height}px`,\n                backgroundColor: \"#F4E76E\",\n                borderRadius: \"4px\"\n              }}\n            />\n            <div style={{ color: \"#888\", fontSize: \"12px\", marginTop: \"8px\", fontFamily: \"Inter\" }}>W</div>\n          </div>\n\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n            <div style={{ color: \"#888\", fontSize: \"14px\", marginBottom: \"8px\", fontFamily: \"Inter\" }}>51%</div>\n            <div\n              style={{\n                width: \"40px\",\n                height: `${bar4Height}px`,\n                backgroundColor: \"white\",\n                borderRadius: \"4px\"\n              }}\n            />\n            <div style={{ color: \"#888\", fontSize: \"12px\", marginTop: \"8px\", fontFamily: \"Inter\" }}>M</div>\n          </div>\n\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n            <div style={{ color: \"#888\", fontSize: \"14px\", marginBottom: \"8px\", fontFamily: \"Inter\" }}>41%</div>\n            <div\n              style={{\n                width: \"40px\",\n                height: `${bar5Height}px`,\n                backgroundColor: \"white\",\n                borderRadius: \"4px\"\n              }}\n            />\n            <div style={{ color: \"#888\", fontSize: \"12px\", marginTop: \"8px\", fontFamily: \"Inter\" }}>F</div>\n          </div>\n        </div>\n\n        <div\n          style={{\n            position: \"absolute\",\n            bottom: \"20px\",\n            right: \"20px\",\n            width: \"32px\",\n            height: \"32px\",\n            border: \"2px solid #666\",\n            borderRadius: \"50%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          }}\n        >\n          <window.IconifyIcon icon=\"mdi:plus\" style={{ fontSize: \"16px\", color: \"#666\" }} />\n        </div>\n      </div>\n\n      {/* Total Revenue Card - Sliding up from bottom, moved further right */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"55%\",\n          left: \"20%\",\n          transform: `translate(0, calc(-50% + ${revenueY}px))`,\n          backgroundColor: \"#2A2A2A\",\n          borderRadius: \"24px\",\n          padding: \"40px\",\n          width: \"380px\",\n          height: \"200px\",\n          zIndex: 2\n        }}\n      >\n        <div style={{ color: \"white\", fontSize: \"24px\", fontWeight: \"400\", marginBottom: \"16px\", fontFamily: \"Inter\" }}>\n          Total Revenue\n        </div>\n        <div style={{ color: \"#F4E76E\", fontSize: \"72px\", fontWeight: \"700\", fontFamily: \"Inter\" }}>\n          $125K\n        </div>\n      </div>\n\n      {/* Profile Avatar - Black man avatar, moved down and more to the right */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"40%\",\n          left: \"30%\",\n          transform: `translate(-50%, -50%) scale(${profileScale})`,\n          zIndex: 3\n        }}\n      >\n        <div\n          style={{\n            width: \"200px\",\n            height: \"200px\",\n            borderRadius: \"50%\",\n            background: \"linear-gradient(45deg, #FF6B6B, #4ECDC4, #45B7D1, #96CEB4)\",\n            padding: \"6px\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          }}\n        >\n          <Img\n            src={window.BazaarAvatars['black-man']}\n            style={{\n              width: \"180px\",\n              height: \"180px\",\n              borderRadius: \"50%\",\n              objectFit: \"cover\"\n            }}\n          />\n        </div>\n      </div>\n\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Pill bar chart animation"},{"role":"assistant","content":"const { AbsoluteFill, interpolate, useCurrentFrame, spring, useVideoConfig } = window.Remotion;\n\nconst HISTOGRAM_DATA = [\n  { label: \"512\", value: 512 },\n  { label: \"240\", value: 240 },\n  { label: \"480\", value: 480, highlight: true },\n  { label: \"360\", value: 360 },\n  { label: \"440\", value: 440 },\n  { label: \"640\", value: 640, highlight: true },\n  { label: \"420\", value: 420 },\n  { label: \"360\", value: 360 }\n];\n\nfunction HistogramChart({ frame, fps, width, height, progress }) {\n  const maxValue = Math.max(...HISTOGRAM_DATA.map((item) => item.value));\n  const chartWidth = Math.min(640, width * 0.7);\n  const chartHeight = Math.min(420, height * 0.65);\n  const barGap = 12;\n  const barWidth = (chartWidth - barGap * (HISTOGRAM_DATA.length - 1) - 64) / HISTOGRAM_DATA.length;\n  const visibleBars = Math.floor(progress * HISTOGRAM_DATA.length);\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        left: (width - chartWidth) / 2,\n        top: (height - chartHeight) / 2,\n        width: chartWidth,\n        height: chartHeight,\n        backgroundColor: \"#f8fafc\",\n        borderRadius: 24,\n        padding: \"32px 28px 36px\",\n        boxShadow: \"0 40px 80px rgba(15, 23, 42, 0.12)\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 32\n      }}\n    >\n      <div style={{ display: \"flex\", flexDirection: \"column\", gap: 8 }}>\n        <div\n          style={{\n            fontFamily: \"Inter\",\n            fontWeight: 700,\n            fontSize: 40,\n            color: \"#0f172a\"\n          }}\n        >\n          Metrics overview\n        </div>\n        <div\n          style={{\n            display: \"inline-flex\",\n            alignItems: \"center\",\n            gap: 12,\n            padding: \"8px 16px\",\n            borderRadius: 999,\n            background: \"rgba(99, 102, 241, 0.12)\",\n            color: \"#4338ca\",\n            fontFamily: \"Inter\",\n            fontWeight: 600\n          }}\n        >\n          <div\n            style={{\n              width: 20,\n              height: 20,\n              borderRadius: \"50%\",\n              background: \"#4338ca\"\n            }}\n          />\n          <span>Pill shaped bar chart</span>\n        </div>\n      </div>\n\n      <div\n        style={{\n          flex: 1,\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          gap: 16\n        }}\n      >\n        <div\n          style={{\n            height: \"70%\",\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            justifyContent: \"space-between\"\n          }}\n        >\n          {HISTOGRAM_DATA.map((entry, index) => {\n            const baseHeight = interpolate(entry.value, [0, maxValue], [24, chartHeight * 0.65]);\n            const staggerFrame = frame - index * 6;\n            const animation = index < visibleBars\n              ? spring({ frame: staggerFrame, fps, config: { damping: 14, stiffness: 120 } })\n              : index === visibleBars\n              ? interpolate(progress * HISTOGRAM_DATA.length - visibleBars, [0, 1], [0, 1])\n              : 0;\n            const displayHeight = Math.max(0, Math.min(1, animation)) * baseHeight;\n            const highlight = entry.highlight === true;\n\n            return (\n              <div\n                key={entry.label}\n                style={{\n                  width: barWidth,\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  alignItems: \"center\",\n                  gap: 12\n                }}\n              >\n                <div\n                  style={{\n                    width: barWidth,\n                    height: displayHeight,\n                    background: highlight ? \"linear-gradient(160deg, #6366f1, #8b5cf6)\" : \"#cbd5f5\",\n                    borderRadius: barWidth / 2,\n                    position: \"relative\",\n                    transition: \"height 0.3s ease\"\n                  }}\n                >\n                  {highlight && displayHeight > 60 ? (\n                    <div\n                      style={{\n                        position: \"absolute\",\n                        inset: 12,\n                        borderRadius: \"50%\",\n                        background: \"rgba(255, 255, 255, 0.32)\"\n                      }}\n                    />\n                  ) : null}\n                </div>\n                <div\n                  style={{\n                    fontFamily: \"Inter\",\n                    fontWeight: 600,\n                    fontSize: 16,\n                    color: \"#1f2937\"\n                  }}\n                >\n                  {entry.label}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport const durationInFrames = 150;\n\nexport default function PillShapedBarChart() {\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n  const progress = Math.min(frame / 120, 1);\n\n  return (\n    <AbsoluteFill style={{ background: \"linear-gradient(135deg, #eef2ff 0%, #e0e7ff 100%)\" }}>\n      <HistogramChart\n        frame={frame}\n        fps={fps}\n        width={width}\n        height={height}\n        progress={Math.max(0, progress)}\n      />\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Tbpn intro animation"},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nconst TemplateScene = () => {\n  const frame = useCurrentFrame();\n  const { width, height, fps } = useVideoConfig();\n\n  // 2 seconds wave animation (60 frames at 30fps)\n  const waveProgress = interpolate(frame, [0, 60], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n    easing: (t) => t // Linear easing for constant speed\n  });\n\n  const createWaveDelay = (x, y) => {\n    const normalizedX = x / width;\n    const normalizedY = y / height;\n    const distance = Math.sqrt(normalizedX * normalizedX + (1 - normalizedY) * (1 - normalizedY));\n    return distance * 0.4; // Reduced delay multiplier to ensure all elements animate within timeframe\n  };\n\n  const renderPlusPattern = () => {\n    const elements = [];\n    const spacing = 40;\n    const cols = Math.ceil(width / spacing) + 2;\n    const rows = Math.ceil(height / spacing) + 2;\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        const x = col * spacing - spacing;\n        const y = row * spacing - spacing;\n        \n        const delay = createWaveDelay(x, y);\n        // Fixed animation window - each element gets consistent 0.3 duration\n        const elementProgress = interpolate(waveProgress, [delay, delay + 0.3], [0, 1], {\n          extrapolateLeft: \"clamp\",\n          extrapolateRight: \"clamp\"\n        });\n\n        let hue, opacity, scale;\n        \n        if (frame < 50) {\n          // Pure wave animation phase\n          hue = interpolate(elementProgress, [0, 1], [60, 240]);\n          opacity = interpolate(elementProgress, [0, 1], [0.3, 1]);\n          scale = interpolate(elementProgress, [0, 1], [0.5, 1]);\n        } else if (frame < 70) {\n          // Smooth transition phase (20 frames)\n          const transitionProgress = interpolate(frame, [50, 70], [0, 1], {\n            extrapolateLeft: \"clamp\",\n            extrapolateRight: \"clamp\",\n            easing: (t) => t * t * (3 - 2 * t) // Smooth S-curve easing\n          });\n          \n          // Wave animation colors\n          const waveHue = interpolate(elementProgress, [0, 1], [60, 240]);\n          \n          // Gradient colors based on position\n          const normalizedX = (x + spacing) / (width + spacing * 2);\n          const gradientHue = interpolate(normalizedX, [0, 1], [60, 240]);\n          \n          // Blend between wave and gradient colors\n          hue = interpolate(transitionProgress, [0, 1], [waveHue, gradientHue]);\n          opacity = interpolate(elementProgress, [0, 1], [0.3, 1]);\n          scale = interpolate(elementProgress, [0, 1], [0.5, 1]);\n        } else {\n          // Final phase - pure gradient based on x position\n          const normalizedX = (x + spacing) / (width + spacing * 2);\n          hue = interpolate(normalizedX, [0, 1], [60, 240]); // Yellow-green to blue gradient\n          opacity = 1;\n          scale = 1;\n        }\n\n        elements.push(\n          <div\n            key={`${row}-${col}`}\n            style={{\n              position: \"absolute\",\n              left: `${x}px`,\n              top: `${y}px`,\n              fontSize: \"40px\",\n              fontWeight: \"bold\",\n              color: `hsl(${hue}, 70%, 60%)`,\n              opacity: opacity,\n              transform: `scale(${scale})`,\n              transformOrigin: \"center\",\n              fontFamily: \"monospace\"\n            }}\n          >\n            +\n          </div>\n        );\n      }\n    }\n    return elements;\n  };\n\n  const statusProgress = interpolate(frame, [50, 60], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\"\n  });\n\n  const statusOpacity = interpolate(statusProgress, [0, 1], [0, 1]);\n\n  // TBPN logo animation - appears after \"watching\" text\n  const logoProgress = interpolate(frame, [36, 66], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\"\n  });\n\n  const logoOpacity = interpolate(logoProgress, [0, 1], [0, 1]);\n  const logoScale = interpolate(logoProgress, [0, 1], [0.8, 2]); // Changed from [0.8, 1] to [0.8, 2] for 2x scale\n\n  // \"Your\" text overlay animation - appears from frame 8 to frame 21\n  const yourTextOpacity = interpolate(frame, [8, 9, 20, 21], [0, 1, 1, 0], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\"\n  });\n\n  // \"Watching\" text overlay animation - appears from frame 21 to frame 36\n  const watchingTextOpacity = interpolate(frame, [21, 22, 35, 36], [0, 1, 1, 0], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\"\n  });\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#1a1a1a\", overflow: \"hidden\" }}>\n      {renderPlusPattern()}\n\n      {/* \"Your\" text overlay */}\n      <div\n        style={{\n          position: \"absolute\",\n          left: \"50%\",\n          top: \"50%\",\n          transform: \"translate(-50%, -50%)\",\n          opacity: yourTextOpacity,\n          fontSize: \"180px\",\n          fontWeight: \"bold\",\n          color: \"white\",\n          fontFamily: \"Arial, sans-serif\",\n          textShadow: \"0 4px 8px rgba(0,0,0,0.8)\",\n          zIndex: 10\n        }}\n      >\n        You're\n      </div>\n\n      {/* \"Watching\" text overlay */}\n      <div\n        style={{\n          position: \"absolute\",\n          left: \"50%\",\n          top: \"50%\",\n          transform: \"translate(-50%, -50%)\",\n          opacity: watchingTextOpacity,\n          fontSize: \"220px\",\n          fontWeight: \"bold\",\n          color: \"white\",\n          fontFamily: \"Arial, sans-serif\",\n          textShadow: \"0 4px 8px rgba(0,0,0,0.8)\",\n          zIndex: 10\n        }}\n      >\n        Watching\n      </div>\n\n      {/* TBPN Logo */}\n      <div\n        style={{\n          position: \"absolute\",\n          left: \"50%\",\n          top: \"50%\",\n          transform: `translate(-50%, -50%) scale(${logoScale})`,\n          opacity: logoOpacity,\n          textAlign: \"center\"\n        }}\n      >\n        {/* Green gradient bars above TBPN - 4 boxes with increasing darkness */}\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            gap: \"6px\",\n            marginBottom: \"20px\"\n          }}\n        >\n          {[0, 1, 2, 3].map((i) => {\n            // Calculate increasingly darker shades from left to right\n            const lightness = 70 - (i * 15); // 70%, 55%, 40%, 25%\n            return (\n              <div\n                key={i}\n                style={{\n                  width: \"84px\",\n                  height: \"40px\",\n                  backgroundColor: `hsl(140, 60%, ${lightness}%)`,\n                  opacity: 1\n                }}\n              />\n            );\n          })}\n        </div>\n        \n        {/* TBPN Text */}\n        <div\n          style={{\n            fontSize: \"120px\",\n            fontWeight: \"600\",\n            color: \"white\",\n            fontFamily: \"Arial Black, Arial, sans-serif\",\n            letterSpacing: \"6px\",\n            textShadow: \"0 4px 8px rgba(0,0,0,0.5)\"\n          }}\n        >\n          TBPN\n        </div>\n      </div>\n\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"120px\",\n          right: \"60px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"12px\",\n          opacity: statusOpacity\n        }}\n      >\n        <div\n          style={{\n            width: \"12px\",\n            height: \"12px\",\n            borderRadius: \"50%\",\n            backgroundColor: \"#666\"\n          }}\n        />\n        <span\n          style={{\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"500\",\n            fontFamily: \"Inter, sans-serif\"\n          }}\n        >\n          OFFLINE\n        </span>\n      </div>\n    </AbsoluteFill>\n  );\n};\n\nexport const durationInFrames_A7K9M3X2 = 90;\nexport default TemplateScene;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Growth graph portrait"},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Img } = window.Remotion;\n\n// Auto-generated defaults for undefined variables\nconst padding = 16;\nconst gap = 12;\n\nconst TemplateScene = () => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Card entrance animation\n  const cardScale = spring({\n    frame, fps,\n    config: {\n      damping: 12,\n      stiffness: 100,\n      mass: 0.5,\n    },\n  });\n\n  const cardOpacity = interpolate(frame, [0, 20], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // Growth percentage animation\n  const growthProgress = interpolate(frame, [20, 80], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const currentGrowth = interpolate(growthProgress, [0, 1], [0, 24.15], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // Yellow line animation with slow in slow out easing - starts from first frame\n  const lineProgressRaw = interpolate(frame, [0, 120], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // Apply slow in slow out easing (ease-in-out cubic)\n  const lineProgress = lineProgressRaw < 0.5\n    ? 2 * lineProgressRaw * lineProgressRaw\n    : 1 - Math.pow(-2 * lineProgressRaw + 2, 2) / 2;\n\n  // Chart bars animation - visible from start\n  const barsOpacity = 1;\n\n  // Button animation - visible from start\n  const buttonOpacity = 1;\n  const buttonScale = 1;\n\n  // Chart data with custom height sequence - removed final drop, ends at steady level\n  const chartData = [\n    0.3, 0.32, 0.35, 0.38, 0.4, 0.38, 0.35, 0.32, 0.3, 0.32, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.58, 0.55, 0.5, 0.45,\n    0.42, 0.4, 0.38, 0.36, 0.34, 0.32, 0.3, 0.32, 0.35, 0.38, 0.42, 0.46, 0.5, 0.54, 0.58, 0.6, 0.6\n  ];\n\n  // Enhanced smooth interpolation with better curve flattening\n  const getSmoothedValue = (progress) => {\n    const totalPoints = chartData.length - 1;\n    const exactIndex = progress * totalPoints;\n    const lowerIndex = Math.floor(exactIndex);\n    const upperIndex = Math.min(lowerIndex + 1, totalPoints);\n    const fraction = exactIndex - lowerIndex;\n\n    // Enhanced smoothstep for flatter peaks and smoother curves\n    const easedFraction = fraction * fraction * fraction * (fraction * (fraction * 6 - 15) + 10); // smootherstep\n\n    const lowerValue = chartData[lowerIndex] || 0;\n    const upperValue = chartData[upperIndex] || 0;\n\n    return lowerValue + (upperValue - lowerValue) * easedFraction;\n  };\n\n  // Calculate current smoothed value based on line position - updated range to 15-40%\n  const currentValue = getSmoothedValue(lineProgress);\n  const displayValue = interpolate(currentValue, [0, 1], [15, 40], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  return (\n    <AbsoluteFill style= {{ backgroundColor: \"#f0f0f0\" }\n}>\n  <div\n        style={\n  {\n    position: \"absolute\",\n      top: \"50%\",\n        left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${cardScale})`,\n            opacity: cardOpacity,\n              width: \"400px\",\n                height: \"500px\",\n                  backgroundColor: \"#b8a7d9\",\n                    borderRadius: \"24px\",\n                      padding: \"40px\",\n                        display: \"flex\",\n                          flexDirection: \"column\",\n                            fontFamily: \"Inter\",\n        }\n}\n      >\n  {/* Header */ }\n  < div style = {{ marginBottom: \"30px\" }}>\n    <div\n            style={\n  {\n    fontSize: \"16px\",\n      fontWeight: \"600\",\n        color: \"#4a4a4a\",\n          marginBottom: \"20px\",\n            letterSpacing: \"1px\",\n            }\n}\n          >\n  GROWTH\n  < /div>\n  < div\nstyle = {{\n  fontSize: \"48px\",\n    fontWeight: \"800\",\n      color: \"#2d2d2d\",\n        lineHeight: \"1\",\n            }}\n          >\n  +{ displayValue.toFixed(0) } %\n  </div>\n  < /div>\n\n{/* Chart Container */ }\n<div\n          style={\n  {\n    flex: 1,\n      position: \"relative\",\n        marginBottom: \"40px\",\n          opacity: barsOpacity,\n          }\n}\n        >\n  {/* Chart Bars */ }\n  < div\nstyle = {{\n  display: \"flex\",\n    alignItems: \"flex-end\",\n      height: \"200px\",\n        gap: \"3px\",\n          paddingBottom: \"20px\",\n            }}\n          >\n  {\n    chartData.map((height, index) => (\n      <div\n                key= { index }\n                style = {{\n      flex: 1,\n      backgroundColor: \"#9d8bc9\",\n      height: `${height * 100}%`,\n      borderRadius: \"1px\",\n      opacity: 0.8,\n    }}\n  />\n            ))}\n</div>\n\n{/* Yellow Line and Dot */ }\n<div\n            style={\n  {\n    position: \"absolute\",\n      bottom: \"20px\",\n        left: `${lineProgress * 100}%`,\n          transform: \"translateX(-50%)\",\n            height: \"200px\",\n              display: \"flex\",\n                flexDirection: \"column\",\n                  alignItems: \"center\",\n                    justifyContent: \"flex-end\",\n            }\n}\n          >\n  {/* Yellow Line - increased stroke and height matches current value */ }\n  < div\nstyle = {{\n  width: \"4px\", // Increased from 2px\n    height: `${currentValue * 180}px`, // Height matches current value\n      backgroundColor: \"#f4d03f\",\n        boxShadow: \"0 0 8px rgba(244, 208, 63, 0.3)\",\n          position: \"relative\",\n              }}\n            >\n  {/* Yellow Dot positioned at the top of the line */ }\n  < div\nstyle = {{\n  position: \"absolute\",\n    top: \"-6px\", // Position at top of line\n      left: \"50%\",\n        transform: \"translateX(-50%)\",\n          width: \"12px\",\n            height: \"12px\",\n              backgroundColor: \"#f4d03f\",\n                borderRadius: \"50%\",\n                  boxShadow: \"0 2px 8px rgba(244, 208, 63, 0.4)\",\n                }}\n/>\n  < /div>\n  < /div>\n  < /div>\n\n{/* Button */ }\n<div\n          style={\n  {\n    opacity: buttonOpacity,\n      transform: `scale(${buttonScale})`,\n          }\n}\n        >\n  <div\n            style={\n  {\n    backgroundColor: \"#2d2d2d\",\n      color: \"white\",\n        padding: \"16px 24px\",\n          borderRadius: \"8px\",\n            fontSize: \"14px\",\n              fontWeight: \"600\",\n                textAlign: \"center\",\n                  cursor: \"pointer\",\n                    display: \"flex\",\n                      alignItems: \"center\",\n                        justifyContent: \"center\",\n                          gap: \"8px\",\n            }\n}\n          >\n  <div\n              style={\n  {\n    width: \"6px\",\n      height: \"6px\",\n        backgroundColor: \"white\",\n          borderRadius: \"50%\",\n              }\n}\n/>\n            SEE MORE INSIGHTS\n  < /div>\n  < /div>\n  < /div>\n  < /AbsoluteFill>\n  );\n};\n\nexport const durationInFrames_A7K9M3P2 = 150;\nexport default TemplateScene;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Google ai search demo"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img, Video } = window.Remotion;\n\nconst script_e54e7158_v2 = [\n  { type: 'search-bar', frames: 180 }\n];\n\nlet accumulatedFrames_e54e7158_v2 = 0;\nconst sequences_e54e7158_v2 = [];\n\nscript_e54e7158_v2.forEach((item, index) => {\n  sequences_e54e7158_v2.push({\n    ...item,\n    start: accumulatedFrames_e54e7158_v2,\n    id: index\n  });\n  accumulatedFrames_e54e7158_v2 += item.frames;\n});\n\nconst totalFrames_e54e7158_v2 = script_e54e7158_v2.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_e54e7158 = totalFrames_e54e7158_v2;\n\nexport default function TemplateScene() {\n  window.RemotionGoogleFonts.loadFont(\"Roboto\", { weights: [\"400\", \"500\"] });\n  \n  const frame = useCurrentFrame();\n  const { fps, width } = useVideoConfig();\n\n  const searchBarScale = interpolate(frame, [20, 35], [0, 2], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\", easing: (t) => 1 - Math.pow(1 - t, 3) });\n\n  const logoOpacity = interpolate(frame, [0, 20], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\", easing: (t) => 1 - Math.pow(1 - t, 3) });\n  const logoScale = interpolate(frame, [0, 25], [0, 2], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\", easing: (t) => 1 - Math.pow(1 - t, 3) });\n  const searchBarOpacity = interpolate(frame, [20, 40], [0, 1], { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\", easing: (t) => 1 - Math.pow(1 - t, 3) });\n\n  // Typewriter effect for search text\n  const searchText = \"Campervan spots in the French alps that have good views of sunrise and sunset and there's toilets/water nearby but no people.\";\n  const typewriterStartFrame = 45;\n  const typewriterSpeed = 2; // characters per frame\n  const charactersToShow = Math.max(0, Math.floor((frame - typewriterStartFrame) * typewriterSpeed));\n  const displayedText = searchText.slice(0, charactersToShow);\n  \n  // Reverted width to smaller, more standard size\n  const searchBarWidth = Math.min(width * 0.6, 600);\n  \n  // Calculate number of lines based on text length and container width\n  const charsPerLine = Math.floor(searchBarWidth / 12); // More accurate calculation based on actual width\n  const numberOfLines = Math.max(1, Math.ceil(displayedText.length / charsPerLine));\n  \n  // Increased base height and dynamic height calculation\n  const baseHeight = 60; // Increased from 44 to 60\n  const lineHeight = 28;\n  const twoLineHeight = baseHeight + lineHeight + 8; // Height for exactly 2 lines\n  const dynamicHeight = baseHeight + (numberOfLines - 1) * lineHeight + 8;\n  \n  // Animate height change - but at frame 96 keep two lines of height\n  const targetHeight = frame >= 96 ? twoLineHeight : dynamicHeight;\n  const searchBarHeight = interpolate(\n    frame,\n    [typewriterStartFrame, typewriterStartFrame + 30],\n    [baseHeight, targetHeight],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Dynamic border radius - pill shaped for single line, 15px for multi-line\n  const isMultiLine = numberOfLines > 1;\n  const borderRadius = isMultiLine ? \"15px\" : \"50px\";\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#000000\" }}>\n      {/* Google Logo */}\n      <div style={{\n        position: \"absolute\",\n        top: \"calc(35% - 50px)\",\n        left: \"50%\",\n        transform: `translate(-50%, -50%) scale(${logoScale})`,\n        opacity: logoOpacity\n      }}>\n        <div style={{\n          fontSize: \"90px\",\n          fontFamily: \"Roboto\",\n          fontWeight: \"400\",\n          letterSpacing: \"-2px\"\n        }}>\n          <span style={{ color: \"#4285f4\" }}>G</span>\n          <span style={{ color: \"#ea4335\" }}>o</span>\n          <span style={{ color: \"#fbbc05\" }}>o</span>\n          <span style={{ color: \"#4285f4\" }}>g</span>\n          <span style={{ color: \"#34a853\" }}>l</span>\n          <span style={{ color: \"#ea4335\" }}>e</span>\n        </div>\n      </div>\n\n      {/* Search Bar */}\n      <div style={{\n        position: \"absolute\",\n        top: \"55%\",\n        left: \"50%\",\n        transform: `translate(-50%, -50%) scale(${searchBarScale})`,\n        opacity: searchBarOpacity,\n        width: `${searchBarWidth}px`,\n        height: `${searchBarHeight}px`,\n        border: \"2px solid transparent\",\n        borderRadius: borderRadius,\n        background: `\n          linear-gradient(#1F1F1F, #1F1F1F) padding-box,\n          linear-gradient(90deg, #66B2FF, #ADFF00, #FF4D4D, #66B2FF) border-box\n        `,\n        boxShadow: \"0 0 30px rgba(102,178,255,.5), 0 0 60px rgba(173,255,0,.3), 0 0 90px rgba(255,77,77,.2)\",\n        display: \"flex\",\n        alignItems: \"flex-start\",\n        paddingLeft: \"16px\",\n        paddingRight: \"16px\",\n        paddingTop: \"12px\",\n        paddingBottom: \"12px\",\n        transition: \"height 0.3s ease\",\n        position: \"relative\"\n      }}>\n        {/* Main Content Container */}\n        <div style={{\n          flex: 1,\n          display: \"flex\",\n          alignItems: \"flex-start\",\n          minHeight: \"36px\"\n        }}>\n          {/* Search Input with Typewriter Text */}\n          <div style={{\n            flex: 1,\n            fontSize: \"16px\",\n            fontFamily: \"Roboto\",\n            color: \"#e8eaed\",\n            fontWeight: \"400\",\n            lineHeight: \"24px\",\n            textAlign: \"left\",\n            wordWrap: \"break-word\",\n            whiteSpace: \"pre-wrap\",\n            overflow: \"hidden\",\n            paddingTop: \"6px\"\n          }}>\n            {displayedText}\n            {frame >= typewriterStartFrame && charactersToShow < searchText.length && (\n              <span style={{\n                opacity: Math.sin(frame * 0.5) > 0 ? 1 : 0,\n                color: \"#e8eaed\"\n              }}>|</span>\n            )}\n          </div>\n        </div>\n\n        {/* Right Side Icons Container - Positioned at bottom */}\n        <div style={{\n          position: \"absolute\",\n          bottom: \"12px\",\n          right: \"16px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"12px\",\n          flexShrink: 0\n        }}>\n          {/* Microphone Icon */}\n          <window.IconifyIcon \n            icon=\"material-symbols:mic\" \n            style={{\n              fontSize: \"20px\",\n              color: \"#9aa0a6\"\n            }} \n          />\n\n          {/* Blue Submit Button */}\n          <div style={{\n            width: \"36px\",\n            height: \"36px\",\n            backgroundColor: \"#4285f4\",\n            borderRadius: \"50%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            cursor: \"pointer\"\n          }}>\n            <window.IconifyIcon \n              icon=\"material-symbols:arrow-upward\" \n              style={{\n                fontSize: \"18px\",\n                color: \"#ffffff\"\n              }} \n            />\n          </div>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Blue gradient text animation"},{"role":"assistant","content":"const {\nAbsoluteFill,\nuseCurrentFrame,\nuseVideoConfig,\ninterpolate,\n} = window.Remotion;\n\nexport default function BlueGradientText_me44xgz7() {\nconst frame = useCurrentFrame();\nconst { fps, width, height } = useVideoConfig();\n\n// Format detection for responsive sizing\nconst aspectRatio = width / height;\nconst isPortrait = aspectRatio < 1;\nconst isSquare = Math.abs(aspectRatio - 1) < 0.2;\n\n// Fixed sizing (not responsive)\nconst svgWidth = Math.min(width * 0.9, isPortrait ? width * 0.95 : 1400);\nconst svgHeight = isPortrait ? height * 0.4 : 200;\nconst fontSize = 120; // Fixed large font size\n\nconst loopDuration = fps * 2;\nconst hueShift = (frame % loopDuration) * (360 / loopDuration) * 1.5;\n\n// Split text into words for portrait animation\nconst words = \"Create without Limits\".split(\" \");\n\nif (isPortrait) {\n  // Use word-by-word animation for portrait like dark-bg-gradient-text\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: \"#ffffff\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        padding: \"40px\"\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: \"translate(-50%, -50%)\",\n          fontSize: `${fontSize}px`,\n          fontFamily: \"Inter, sans-serif\",\n          fontWeight: \"700\",\n          textAlign: \"center\",\n          display: \"flex\",\n          gap: \"0.4em\",\n          flexDirection: \"row\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          lineHeight: 1.2,\n          maxWidth: \"90%\"\n        }}\n      >\n        {words.map((word, index) => {\n          // Stagger each word by 10 frames\n          const wordStartFrame = index * 10;\n          const wordEndFrame = wordStartFrame + 20;\n          \n          // Slide up animation for each word\n          const wordY = interpolate(\n            frame,\n            [wordStartFrame, wordEndFrame],\n            [50, 0],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\"\n            }\n          );\n          \n          // Opacity animation for each word\n          const wordOpacity = interpolate(\n            frame,\n            [wordStartFrame, wordEndFrame],\n            [0, 1],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\"\n            }\n          );\n          \n          // Generate blue gradient for middle word\n          const gradientStyle = index === 1 ? {\n            background: `linear-gradient(${360 - hueShift}deg, hsl(200, 100%, 60%) 0%, hsl(210, 100%, 60%) 20%, hsl(220, 100%, 60%) 40%, hsl(230, 100%, 60%) 60%, hsl(240, 100%, 60%) 80%, hsl(200, 100%, 60%) 100%)`,\n            backgroundClip: \"text\",\n            WebkitBackgroundClip: \"text\",\n            color: \"transparent\",\n            WebkitTextFillColor: \"transparent\"\n          } : { color: \"#000\" };\n          \n          return (\n            <div\n              key={index}\n              style={{\n                position: \"relative\",\n                transform: `translateY(${wordY}px)`,\n                opacity: wordOpacity,\n                ...gradientStyle\n              }}\n            >\n              {word}\n            </div>\n          );\n        })}\n      </div>\n    </AbsoluteFill>\n  );\n}\n\nreturn (\n  <AbsoluteFill\n    style={{\n      backgroundColor: \"#ffffff\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      display: \"flex\"\n    }}\n  >\n    <svg \n      width={svgWidth} \n      height={svgHeight} \n      viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n      style={{ maxWidth: '90%', height: 'auto' }}\n    >\n      <defs>\n        <linearGradient\n          id=\"blue-gradient\"\n          x1=\"0%\"\n          y1=\"0%\"\n          x2=\"100%\"\n          y2=\"0%\"\n          gradientTransform={`rotate(${360 - hueShift}, 0.5, 0.5)`}\n        >\n          <stop offset=\"0%\" stopColor=\"hsl(200, 100%, 60%)\" />\n          <stop offset=\"20%\" stopColor=\"hsl(210, 100%, 60%)\" />\n          <stop offset=\"40%\" stopColor=\"hsl(220, 100%, 60%)\" />\n          <stop offset=\"60%\" stopColor=\"hsl(230, 100%, 60%)\" />\n          <stop offset=\"80%\" stopColor=\"hsl(240, 100%, 60%)\" />\n          <stop offset=\"100%\" stopColor=\"hsl(200, 100%, 60%)\" />\n        </linearGradient>\n      </defs>\n\n      <text\n        x={svgWidth * 0.15}\n        y={svgHeight * 0.65}\n        fill=\"#000\"\n        fontFamily=\"Inter, sans-serif\"\n        fontWeight=\"700\"\n        fontSize={fontSize}\n        textAnchor=\"middle\"\n      >\n        Create\n      </text>\n\n      <text\n        x={svgWidth * 0.5}\n        y={svgHeight * 0.65}\n        fill=\"url(#blue-gradient)\"\n        fontFamily=\"Inter, sans-serif\"\n        fontWeight=\"700\"\n        fontSize={fontSize}\n        textAnchor=\"middle\"\n      >\n        without\n      </text>\n\n      <text\n        x={svgWidth * 0.85}\n        y={svgHeight * 0.65}\n        fill=\"#000\"\n        fontFamily=\"Inter, sans-serif\"\n        fontWeight=\"700\"\n        fontSize={fontSize}\n        textAnchor=\"middle\"\n      >\n        Limits\n      </text>\n    </svg>\n  </AbsoluteFill>\n);\n}\n\nexport const durationInFrames_me44xgz7 = 90;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Scale down text animation"},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nexport default function DarkBGGradientText_me44v5an() {\n  window.RemotionGoogleFonts.loadFont(\"Inter\", { weights: [\"800\"] });\n  \n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  // Format detection for responsive sizing\n  const aspectRatio = width / height;\n  const isPortrait = aspectRatio < 1;\n  const isSquare = Math.abs(aspectRatio - 1) < 0.2;\n  \n  // Fixed font size for Bazaar\n  const fontSize = 250;\n  \n  const gradientPosition = interpolate(\n    frame,\n    [0, fps * 3],\n    [-200, 200],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n  \n  // Initial scale animation for \"Bazaar\" entry\n  const initialTextScale = interpolate(\n    frame,\n    [0, 8],\n    [0.8, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n  \n  // Scale down animation starting at frame 28 (8 + 20)\n  const scaleDownAnimation = interpolate(\n    frame,\n    [28, 43], // 15 frames for smooth scale down\n    [1, 1/3],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n  \n  // Move to left animation starting at frame 28 - increased distance to prevent overlap\n  const moveLeftAnimation = interpolate(\n    frame,\n    [28, 43],\n    [0, -width * 0.33], // Increased from 0.25 to 0.35 to move further left\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n  \n  // Combined scale (initial entry + scale down)\n  const finalScale = frame < 28 ? initialTextScale : initialTextScale * scaleDownAnimation;\n  \n  // Additional text words animation\n  const additionalWords = [\"is\", \"an\", \"ai\", \"user\", \"interface\", \"animator\"];\n  \n  return (\n    <AbsoluteFill\n      style={{\n        background: \"linear-gradient(135deg, #ff6b9d 0%, #ff8a5c 25%, #ffa726 50%, #ffcc02 75%, #ffeb3b 100%)\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        padding: \"40px\"\n      }}\n    >\n      {/* Bazaar text */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) translateX(${moveLeftAnimation}px) scale(${finalScale})`,\n          fontSize: `${fontSize}px`,\n          fontFamily: \"Inter\",\n          fontWeight: \"800\",\n          textAlign: \"center\",\n          whiteSpace: \"nowrap\",\n          display: \"flex\",\n          gap: \"0.3em\",\n          flexDirection: \"row\",\n          lineHeight: 1.1\n        }}\n      >\n        {/* Bazaar word animation */}\n        <div\n          style={{\n            position: \"relative\",\n            transform: `translateY(${interpolate(\n              frame,\n              [0, 15],\n              [100, 0],\n              {\n                extrapolateLeft: \"clamp\",\n                extrapolateRight: \"clamp\"\n              }\n            )}px)`,\n            opacity: interpolate(\n              frame,\n              [0, 15],\n              [0, 1],\n              {\n                extrapolateLeft: \"clamp\",\n                extrapolateRight: \"clamp\"\n              }\n            )\n          }}\n        >\n          <div\n            style={{\n              color: \"transparent\",\n              userSelect: \"none\"\n            }}\n          >\n            Bazaar\n          </div>\n          \n          <div\n            style={{\n              position: \"absolute\",\n              top: \"0\",\n              left: \"0\",\n              width: \"100%\",\n              height: \"100%\",\n              background: `linear-gradient(90deg, #ffffff 0%, #f0f0f0 25%, #ffffff 50%, #f5f5f5 75%, #ffffff 100%)`,\n              backgroundPosition: `${gradientPosition}px 0`,\n              backgroundSize: \"400px 100%\",\n              backgroundRepeat: \"repeat-x\",\n              backgroundClip: \"text\",\n              WebkitBackgroundClip: \"text\",\n              color: \"transparent\",\n              WebkitTextFillColor: \"transparent\"\n            }}\n          >\n            Bazaar\n          </div>\n        </div>\n      </div>\n      \n      {/* Additional text animation - increased spacing to prevent overlap */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) translateX(${width * 0.11}px)`, // Increased from 0.05 to 0.18 for more spacing\n          fontSize: `${fontSize / 3}px`, // Same size as scaled Bazaar\n          fontFamily: \"Inter\",\n          fontWeight: \"800\",\n          textAlign: \"left\",\n          whiteSpace: \"nowrap\",\n          display: \"flex\",\n          gap: \"0.3em\",\n          flexDirection: \"row\",\n          lineHeight: 1.1\n        }}\n      >\n        {additionalWords.map((word, index) => {\n          const wordStartFrame = 45 + (index * 8); // Start after Bazaar animation completes\n          const wordEndFrame = wordStartFrame + 12;\n          \n          // Slide up animation\n          const wordY = interpolate(\n            frame,\n            [wordStartFrame, wordEndFrame],\n            [50, 0],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\"\n            }\n          );\n          \n          // Opacity animation\n          const wordOpacity = interpolate(\n            frame,\n            [wordStartFrame, wordEndFrame],\n            [0, 1],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\"\n            }\n          );\n          \n          return (\n            <div\n              key={index}\n              style={{\n                position: \"relative\",\n                transform: `translateY(${wordY}px)`,\n                opacity: wordOpacity\n              }}\n            >\n              <div\n                style={{\n                  color: \"transparent\",\n                  userSelect: \"none\"\n                }}\n              >\n                {word}\n              </div>\n              \n              <div\n                style={{\n                  position: \"absolute\",\n                  top: \"0\",\n                  left: \"0\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  background: `linear-gradient(90deg, #ffffff 0%, #f0f0f0 25%, #ffffff 50%, #f5f5f5 75%, #ffffff 100%)`,\n                  backgroundPosition: `${gradientPosition}px 0`,\n                  backgroundSize: \"400px 100%\",\n                  backgroundRepeat: \"repeat-x\",\n                  backgroundClip: \"text\",\n                  WebkitBackgroundClip: \"text\",\n                  color: \"transparent\",\n                  WebkitTextFillColor: \"transparent\"\n                }}\n              >\n                {word}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </AbsoluteFill>\n  );\n}\n\nexport const durationInFrames_me44v5an = 140;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Bar chart card"},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Img } = window.Remotion;\n\n// Auto-generated defaults for undefined variables\nconst padding = 16;\nconst gap = 12;\n\nconst TemplateScene = () => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Card entrance animation\n  const cardScale = spring({ frame, fps,\n    config: {\n      damping: 12,\n      stiffness: 100,\n      mass: 0.5,\n    },\n  });\n\n  const cardOpacity = interpolate(frame, [0, 20], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // All elements animate simultaneously from frame 20-80\n  const elementsProgress = interpolate(frame, [20, 80], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // Main number animation - starts with other elements\n  const animatedNumber = Math.floor(56 * elementsProgress);\n\n  // NEW APPROACH: Direct height interpolation for bars growing from bottom\n  const maxBarHeight = 180; // Maximum height in pixels\n  \n  const bar1Height = interpolate(frame, [30, 70], [0, 47 * maxBarHeight / 100], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const bar2Height = interpolate(frame, [35, 75], [0, 98 * maxBarHeight / 100], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const bar3Height = interpolate(frame, [40, 80], [0, 69 * maxBarHeight / 100], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const bar4Height = interpolate(frame, [45, 85], [0, 84 * maxBarHeight / 100], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const bar5Height = interpolate(frame, [50, 90], [0, 56 * maxBarHeight / 100], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const bar6Height = interpolate(frame, [55, 95], [0, 77 * maxBarHeight / 100], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // Button animation - also starts with other elements\n  const buttonOpacity = interpolate(frame, [20, 80], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const buttonScale = spring({\n    frame: frame - 20,\n    fps,\n    config: {\n      damping: 10,\n      stiffness: 200,\n    },\n  });\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#e5e5e5\" }}>\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${cardScale})`,\n          opacity: cardOpacity,\n          width: \"600px\",\n          height: \"650px\",\n          backgroundColor: \"#f4e976\",\n          borderRadius: \"24px\",\n          padding: \"60px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          fontFamily: \"Inter\",\n        }}\n      >\n        {/* Header */}\n        <div\n          style={{\n            fontSize: \"18px\",\n            fontWeight: \"600\",\n            color: \"#4a4a4a\",\n            marginBottom: \"20px\",\n            letterSpacing: \"1px\",\n          }}\n        >\n          ENGAGEMENT\n        </div>\n\n        {/* Main Number */}\n        <div\n          style={{\n            fontSize: \"72px\",\n            fontWeight: \"800\",\n            color: \"#2d2d2d\",\n            marginBottom: \"60px\",\n            lineHeight: \"1\",\n          }}\n        >\n          +{animatedNumber}%\n        </div>\n\n        {/* Chart Container - NEW APPROACH */}\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            height: `${maxBarHeight}px`,\n            marginBottom: \"60px\",\n            gap: \"8px\",\n            position: \"relative\",\n          }}\n        >\n          {/* Bar 1 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${bar1Height}px`,\n                backgroundColor: \"#3d3d3d\",\n                borderRadius: \"4px 4px 0 0\",\n                transition: \"height 0.3s ease-out\",\n              }}\n            >\n              {bar1Height > 60 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>47%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 2 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${bar2Height}px`,\n                backgroundColor: \"#6b6b3d\",\n                borderRadius: \"4px 4px 0 0\",\n                transition: \"height 0.3s ease-out\",\n              }}\n            >\n              {bar2Height > 140 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>98%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 3 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${bar3Height}px`,\n                backgroundColor: \"#8b8b5d\",\n                borderRadius: \"4px 4px 0 0\",\n                transition: \"height 0.3s ease-out\",\n              }}\n            >\n              {bar3Height > 90 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>69%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 4 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${bar4Height}px`,\n                backgroundColor: \"#abab7d\",\n                borderRadius: \"4px 4px 0 0\",\n                transition: \"height 0.3s ease-out\",\n              }}\n            >\n              {bar4Height > 120 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>84%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 5 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${bar5Height}px`,\n                backgroundColor: \"#cbcb9d\",\n                borderRadius: \"4px 4px 0 0\",\n                transition: \"height 0.3s ease-out\",\n              }}\n            >\n              {bar5Height > 70 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>56%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bar 6 */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flex: 1, position: \"relative\", height: \"100%\" }}>\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                width: \"100%\",\n                height: `${bar6Height}px`,\n                backgroundColor: \"#ebebbd\",\n                borderRadius: \"4px 4px 0 0\",\n                transition: \"height 0.3s ease-out\",\n              }}\n            >\n              {bar6Height > 100 && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"-35px\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    fontSize: \"14px\",\n                    color: \"#2d2d2d\",\n                    fontWeight: \"600\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    gap: \"2px\",\n                  }}\n                >\n                  <span>77%</span>\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"2px\",\n                      backgroundColor: \"#ff4444\",\n                      borderRadius: \"1px\",\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Button */}\n        <div\n          style={{\n            opacity: buttonOpacity,\n            transform: `scale(${buttonScale})`,\n            alignSelf: \"flex-start\",\n          }}\n        >\n          <div\n            style={{\n              backgroundColor: \"#2d2d2d\",\n              color: \"white\",\n              padding: \"16px 32px\",\n              borderRadius: \"24px\",\n              fontSize: \"14px\",\n              fontWeight: \"600\",\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"8px\",\n            }}\n          >\n            <div\n              style={{\n                width: \"8px\",\n                height: \"8px\",\n                backgroundColor: \"white\",\n                borderRadius: \"50%\",\n              }}\n            />\n            SEE MORE INSIGHTS\n          </div>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n};\n\nexport const durationInFrames_A7B9C2E1 = 120;\nexport default TemplateScene;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Fintech app demo"},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Img } = window.Remotion;\n\n// Auto-generated defaults for undefined variables\nconst padding = 16;\nconst margin = 8;\nconst gap = 12;\n\nconst TemplateScene = () => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  const phoneScale = spring({ frame, fps,\n    config: {\n      damping: 200,\n      stiffness: 100,\n      mass: 1,\n    },\n  });\n\n  const contentOpacity = interpolate(frame, [10, 25], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const balanceScale = spring({\n    frame: frame - 15,\n    fps,\n    config: {\n      damping: 200,\n      stiffness: 100,\n      mass: 1,\n    },\n  });\n\n  // Slot machine effect for balance - animate from £12 to £24.14 (slower with cubic easing)\n  const balanceValue = interpolate(frame, [15, 75], [12, 24.14], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n    easing: (t) => t * t * (3 - 2 * t), // cubic easing\n  });\n\n  // Staggered transaction animations with scale effect - slower with cubic easing\n  const transaction1Scale = interpolate(\n    frame,\n    [15, 30, 50],\n    [0, 1.2, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\",\n      easing: (t) => t * t * (3 - 2 * t), // cubic easing\n    }\n  );\n\n  const transaction2Scale = interpolate(\n    frame,\n    [25, 40, 60],\n    [0, 1.2, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\",\n      easing: (t) => t * t * (3 - 2 * t), // cubic easing\n    }\n  );\n\n  const transaction3Scale = interpolate(\n    frame,\n    [35, 50, 70],\n    [0, 1.2, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\",\n      easing: (t) => t * t * (3 - 2 * t), // cubic easing\n    }\n  );\n\n  const transaction4Scale = interpolate(\n    frame,\n    [45, 60, 80],\n    [0, 1.2, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\",\n      easing: (t) => t * t * (3 - 2 * t), // cubic easing\n    }\n  );\n\n  const transactionOpacity = interpolate(frame, [15, 50], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n    easing: (t) => t * t * (3 - 2 * t), // cubic easing\n  });\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"white\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\n      {/* Phone Container */}\n      <div style={{\n        transform: `scale(${phoneScale})`,\n        width: \"375px\",\n        height: \"812px\",\n        position: \"relative\",\n        borderRadius: \"40px\",\n        backgroundColor: \"#000\",\n        padding: \"8px\",\n        boxShadow: \"0 20px 40px rgba(0,0,0,0.3)\",\n      }}>\n        {/* Phone Screen */}\n        <div style={{\n          width: \"100%\",\n          height: \"100%\",\n          borderRadius: \"32px\",\n          overflow: \"hidden\",\n          background: \"linear-gradient(135deg, #3c1361 0%, #5b21b6 50%, #312e81 100%)\",\n          position: \"relative\",\n        }}>\n          {/* Notch */}\n          <div style={{\n            position: \"absolute\",\n            top: \"0\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\",\n            width: \"150px\",\n            height: \"30px\",\n            backgroundColor: \"#000\",\n            borderBottomLeftRadius: \"15px\",\n            borderBottomRightRadius: \"15px\",\n            zIndex: 10,\n          }} />\n\n          {/* Status Bar - Aligned with notch - INCREASED PADDING TOP */}\n          <div style={{\n            opacity: contentOpacity,\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            padding: \"12px 20px\",\n            paddingTop: \"20px\",\n            color: \"white\",\n            fontSize: \"16px\",\n            fontWeight: \"700\",\n            fontFamily: \"Inter\",\n            height: \"30px\",\n          }}>\n            <span>21:15</span>\n            <div style={{ display: \"flex\", alignItems: \"center\", gap: \"6px\" }}>\n              <window.IconifyIcon icon=\"mdi:signal\" style={{ fontSize: \"16px\" }} />\n              <window.IconifyIcon icon=\"mdi:wifi\" style={{ fontSize: \"16px\" }} />\n              <span style={{ fontSize: \"14px\" }}>68</span>\n              <window.IconifyIcon icon=\"mdi:battery\" style={{ fontSize: \"16px\" }} />\n            </div>\n          </div>\n\n          {/* Top Bar with Profile and Search - INCREASED MARGIN TOP */}\n          <div style={{\n            opacity: contentOpacity,\n            display: \"flex\",\n            alignItems: \"center\",\n            padding: \"0 20px\",\n            gap: \"12px\",\n            marginTop: \"18px\",\n          }}>\n            <div style={{\n              width: \"40px\",\n              height: \"40px\",\n              borderRadius: \"20px\",\n              backgroundColor: \"rgba(255,255,255,0.2)\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              overflow: \"hidden\",\n            }}>\n              <Img \n                src={window.BazaarAvatars['asian-woman']} \n                style={{\n                  width: \"100%\",\n                  height: \"100%\",\n                  objectFit: \"cover\"\n                }}\n              />\n            </div>\n            <div style={{\n              flex: 1,\n              height: \"40px\",\n              backgroundColor: \"rgba(255,255,255,0.15)\",\n              borderRadius: \"20px\",\n              display: \"flex\",\n              alignItems: \"center\",\n              padding: \"0 16px\",\n              gap: \"8px\",\n            }}>\n              <window.IconifyIcon icon=\"mdi:magnify\" style={{ fontSize: \"18px\", color: \"rgba(255,255,255,0.7)\" }} />\n              <span style={{ color: \"rgba(255,255,255,0.7)\", fontSize: \"16px\", fontFamily: \"Inter\", fontWeight: \"600\" }}>Search</span>\n            </div>\n            <div style={{\n              width: \"40px\",\n              height: \"40px\",\n              borderRadius: \"20px\",\n              backgroundColor: \"rgba(255,255,255,0.2)\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}>\n              <window.IconifyIcon icon=\"mdi:chart-bar\" style={{ fontSize: \"18px\", color: \"white\" }} />\n            </div>\n            <div style={{\n              width: \"40px\",\n              height: \"40px\",\n              borderRadius: \"20px\",\n              backgroundColor: \"rgba(255,255,255,0.2)\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}>\n              <window.IconifyIcon icon=\"mdi:credit-card\" style={{ fontSize: \"18px\", color: \"white\" }} />\n            </div>\n          </div>\n\n          {/* Main Balance Section */}\n          <div style={{\n            opacity: contentOpacity,\n            textAlign: \"center\",\n            marginTop: \"40px\",\n            transform: `scale(${balanceScale})`,\n          }}>\n            <div style={{\n              color: \"rgba(255,255,255,0.8)\",\n              fontSize: \"16px\",\n              fontFamily: \"Inter\",\n              fontWeight: \"600\",\n              marginBottom: \"8px\",\n            }}>\n              Main • GBP\n            </div>\n            <div style={{\n              color: \"white\",\n              fontSize: \"48px\",\n              fontWeight: \"700\",\n              fontFamily: \"Inter\",\n              marginBottom: \"20px\",\n            }}>\n              £{balanceValue.toFixed(2)}\n            </div>\n            <div style={{\n              display: \"inline-block\",\n              backgroundColor: \"rgba(255,255,255,0.2)\",\n              borderRadius: \"20px\",\n              padding: \"8px 20px\",\n              color: \"white\",\n              fontSize: \"16px\",\n              fontFamily: \"Inter\",\n              fontWeight: \"600\",\n            }}>\n              Accounts\n            </div>\n          </div>\n\n          {/* Action Buttons - Reduced padding/margin */}\n          <div style={{\n            opacity: contentOpacity,\n            display: \"flex\",\n            justifyContent: \"space-around\",\n            padding: \"0 10px\",\n            marginTop: \"50px\",\n          }}>\n            {[\n              { icon: \"mdi:plus\", label: \"Add money\" },\n              { icon: \"mdi:swap-horizontal\", label: \"Exchange\" },\n              { icon: \"mdi:format-list-bulleted\", label: \"Details\" },\n              { icon: \"mdi:dots-horizontal\", label: \"More\" },\n            ].map((item, index) => (\n              <div key={index} style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                gap: \"8px\",\n              }}>\n                <div style={{\n                  width: \"50px\",\n                  height: \"50px\",\n                  borderRadius: \"25px\",\n                  backgroundColor: \"rgba(255,255,255,0.2)\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                }}>\n                  <window.IconifyIcon icon={item.icon} style={{ fontSize: \"20px\", color: \"white\" }} />\n                </div>\n                <span style={{\n                  color: \"white\",\n                  fontSize: \"12px\",\n                  fontFamily: \"Inter\",\n                  fontWeight: \"600\",\n                }}>\n                  {item.label}\n                </span>\n              </div>\n            ))}\n          </div>\n\n          {/* Transaction List - Added Sainsbury's transaction */}\n          <div style={{\n            opacity: transactionOpacity,\n            padding: \"0 20px\",\n            marginTop: \"30px\",\n          }}>\n            <div style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n              padding: \"12px 0\",\n              borderBottom: \"1px solid rgba(255,255,255,0.1)\",\n              transform: `scale(${transaction1Scale})`,\n            }}>\n              <div style={{ display: \"flex\", alignItems: \"center\", gap: \"12px\" }}>\n                <div style={{\n                  width: \"40px\",\n                  height: \"40px\",\n                  borderRadius: \"20px\",\n                  backgroundColor: \"rgba(255,255,255,0.2)\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  overflow: \"hidden\",\n                }}>\n                  <window.IconifyIcon icon=\"emojione:flag-for-united-kingdom\" style={{ fontSize: \"32px\" }} />\n                </div>\n                <div>\n                  <div style={{\n                    color: \"white\",\n                    fontSize: \"16px\",\n                    fontFamily: \"Inter\",\n                    fontWeight: \"600\",\n                  }}>\n                    Personal → Cara Chatfield\n                  </div>\n                  <div style={{\n                    color: \"rgba(255,255,255,0.6)\",\n                    fontSize: \"14px\",\n                    fontFamily: \"Inter\",\n                    fontWeight: \"500\",\n                  }}>\n                    4 November, 23:37\n                  </div>\n                </div>\n              </div>\n              <div style={{\n                color: \"white\",\n                fontSize: \"16px\",\n                fontFamily: \"Inter\",\n                fontWeight: \"600\",\n              }}>\n                -£6\n              </div>\n            </div>\n\n            <div style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n              padding: \"12px 0\",\n              borderBottom: \"1px solid rgba(255,255,255,0.1)\",\n              transform: `scale(${transaction2Scale})`,\n            }}>\n              <div style={{ display: \"flex\", alignItems: \"center\", gap: \"12px\" }}>\n                <div style={{\n                  width: \"40px\",\n                  height: \"40px\",\n                  borderRadius: \"20px\",\n                  backgroundColor: \"#00b894\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  color: \"white\",\n                  fontSize: \"14px\",\n                  fontWeight: \"700\",\n                  fontFamily: \"Inter\",\n                }}>\n                  PP\n                </div>\n                <div>\n                  <div style={{\n                    color: \"white\",\n                    fontSize: \"16px\",\n                    fontFamily: \"Inter\",\n                    fontWeight: \"600\",\n                  }}>\n                    PADDYPOWER\n                  </div>\n                  <div style={{\n                    color: \"rgba(255,255,255,0.6)\",\n                    fontSize: \"14px\",\n                    fontFamily: \"Inter\",\n                    fontWeight: \"500\",\n                  }}>\n                    4 November, 18:52\n                  </div>\n                </div>\n              </div>\n              <div style={{\n                color: \"#10b981\",\n                fontSize: \"16px\",\n                fontFamily: \"Inter\",\n                fontWeight: \"600\",\n              }}>\n                +£18.92\n              </div>\n            </div>\n\n            {/* New Sainsbury's transaction */}\n            <div style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n              padding: \"12px 0\",\n              borderBottom: \"1px solid rgba(255,255,255,0.1)\",\n              transform: `scale(${transaction3Scale})`,\n            }}>\n              <div style={{ display: \"flex\", alignItems: \"center\", gap: \"12px\" }}>\n                <div style={{\n                  width: \"40px\",\n                  height: \"40px\",\n                  borderRadius: \"20px\",\n                  backgroundColor: \"#FF8200\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  color: \"white\",\n                  fontSize: \"14px\",\n                  fontWeight: \"700\",\n                  fontFamily: \"Inter\",\n                }}>\n                  SB\n                </div>\n                <div>\n                  <div style={{\n                    color: \"white\",\n                    fontSize: \"16px\",\n                    fontFamily: \"Inter\",\n                    fontWeight: \"600\",\n                  }}>\n                    SAINSBURY'S\n                  </div>\n                  <div style={{\n                    color: \"rgba(255,255,255,0.6)\",\n                    fontSize: \"14px\",\n                    fontFamily: \"Inter\",\n                    fontWeight: \"500\",\n                  }}>\n                    3 November, 16:45\n                  </div>\n                </div>\n              </div>\n              <div style={{\n                color: \"white\",\n                fontSize: \"16px\",\n                fontFamily: \"Inter\",\n                fontWeight: \"600\",\n              }}>\n                -£11\n              </div>\n            </div>\n\n            {/* Starbucks transaction */}\n            <div style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n              padding: \"12px 0\",\n              marginBottom: \"20px\",\n              transform: `scale(${transaction4Scale})`,\n            }}>\n              <div style={{ display: \"flex\", alignItems: \"center\", gap: \"12px\" }}>\n                <div style={{\n                  width: \"40px\",\n                  height: \"40px\",\n                  borderRadius: \"20px\",\n                  backgroundColor: \"#00704A\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  color: \"white\",\n                  fontSize: \"18px\",\n                }}>\n                  <window.IconifyIcon icon=\"simple-icons:starbucks\" style={{ fontSize: \"28px\", color: \"white\" }} />\n                </div>\n                <div>\n                  <div style={{\n                    color: \"white\",\n                    fontSize: \"16px\",\n                    fontFamily: \"Inter\",\n                    fontWeight: \"600\",\n                  }}>\n                    STARBUCKS COFFEE\n                  </div>\n                  <div style={{\n                    color: \"rgba(255,255,255,0.6)\",\n                    fontSize: \"14px\",\n                    fontFamily: \"Inter\",\n                    fontWeight: \"500\",\n                  }}>\n                    3 November, 14:22\n                  </div>\n                </div>\n              </div>\n              <div style={{\n                color: \"white\",\n                fontSize: \"16px\",\n                fontFamily: \"Inter\",\n                fontWeight: \"600\",\n              }}>\n                -£4.75\n              </div>\n            </div>\n          </div>\n\n          {/* Bottom Navigation - Reduced padding */}\n          <div style={{\n            position: \"absolute\",\n            bottom: \"30px\",\n            left: \"0\",\n            right: \"0\",\n            display: \"flex\",\n            justifyContent: \"space-around\",\n            padding: \"0 10px\",\n            opacity: transactionOpacity,\n          }}>\n            {[\n              { icon: \"mdi:home\", label: \"Home\", active: true },\n              { icon: \"mdi:chart-line\", label: \"Invest\" },\n              { icon: \"mdi:star\", label: \"Transfers\" },\n              { icon: \"mdi:bitcoin\", label: \"Crypto\" },\n              { icon: \"mdi:heart\", label: \"Lifestyle\" },\n            ].map((item, index) => (\n              <div key={index} style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                gap: \"2px\",\n              }}>\n                <window.IconifyIcon \n                  icon={item.icon} \n                  style={{ \n                    fontSize: \"24px\", \n                    color: item.active ? \"white\" : \"rgba(255,255,255,0.5)\" \n                  }} \n                />\n                <span style={{\n                  color: item.active ? \"white\" : \"rgba(255,255,255,0.5)\",\n                  fontSize: \"10px\",\n                  fontFamily: \"Inter\",\n                  fontWeight: \"600\",\n                }}>\n                  {item.label}\n                </span>\n              </div>\n            ))}\n          </div>\n\n          {/* Home Indicator */}\n          <div style={{\n            position: \"absolute\",\n            bottom: \"8px\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\",\n            width: \"134px\",\n            height: \"5px\",\n            backgroundColor: \"white\",\n            borderRadius: \"3px\",\n            opacity: 0.3,\n          }} />\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n};\n\nexport const durationInFrames_A7B9C2E1 = 120;\nexport default TemplateScene;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Line chart animation"},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Img } = window.Remotion;\n\n// Auto-generated defaults for undefined variables\nconst padding = 16;\nconst gap = 12;\n\nconst TemplateScene = () => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Card entrance animation\n  const cardScale = spring({ frame, fps,\n    config: {\n      damping: 12,\n      stiffness: 100,\n      mass: 0.5,\n    },\n  });\n\n  const cardOpacity = interpolate(frame, [0, 20], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // Growth percentage animation\n  const growthProgress = interpolate(frame, [20, 80], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  const currentGrowth = interpolate(growthProgress, [0, 1], [0, 24.15], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  // Yellow line animation with slow in slow out easing - starts from first frame\n  const lineProgressRaw = interpolate(frame, [0, 120], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n  \n  // Apply slow in slow out easing (ease-in-out cubic)\n  const lineProgress = lineProgressRaw < 0.5 \n    ? 2 * lineProgressRaw * lineProgressRaw \n    : 1 - Math.pow(-2 * lineProgressRaw + 2, 2) / 2;\n\n  // Chart bars animation - visible from start\n  const barsOpacity = 1;\n\n  // Button animation - visible from start\n  const buttonOpacity = 1;\n  const buttonScale = 1;\n\n  // Chart data with custom height sequence - removed final drop, ends at steady level\n  const chartData = [\n    0.3, 0.32, 0.35, 0.38, 0.4, 0.38, 0.35, 0.32, 0.3, 0.32, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.58, 0.55, 0.5, 0.45,\n    0.42, 0.4, 0.38, 0.36, 0.34, 0.32, 0.3, 0.32, 0.35, 0.38, 0.42, 0.46, 0.5, 0.54, 0.58, 0.6, 0.6\n  ];\n\n  // Enhanced smooth interpolation with better curve flattening\n  const getSmoothedValue = (progress) => {\n    const totalPoints = chartData.length - 1;\n    const exactIndex = progress * totalPoints;\n    const lowerIndex = Math.floor(exactIndex);\n    const upperIndex = Math.min(lowerIndex + 1, totalPoints);\n    const fraction = exactIndex - lowerIndex;\n    \n    // Enhanced smoothstep for flatter peaks and smoother curves\n    const easedFraction = fraction * fraction * fraction * (fraction * (fraction * 6 - 15) + 10); // smootherstep\n    \n    const lowerValue = chartData[lowerIndex] || 0;\n    const upperValue = chartData[upperIndex] || 0;\n    \n    return lowerValue + (upperValue - lowerValue) * easedFraction;\n  };\n\n  // Calculate current smoothed value based on line position - updated range to 15-40%\n  const currentValue = getSmoothedValue(lineProgress);\n  const displayValue = interpolate(currentValue, [0, 1], [15, 40], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#f0f0f0\" }}>\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${cardScale})`,\n          opacity: cardOpacity,\n          width: \"400px\",\n          height: \"500px\",\n          backgroundColor: \"#b8a7d9\",\n          borderRadius: \"24px\",\n          padding: \"40px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          fontFamily: \"Inter\",\n        }}\n      >\n        {/* Header */}\n        <div style={{ marginBottom: \"30px\" }}>\n          <div\n            style={{\n              fontSize: \"16px\",\n              fontWeight: \"600\",\n              color: \"#4a4a4a\",\n              marginBottom: \"20px\",\n              letterSpacing: \"1px\",\n            }}\n          >\n            GROWTH\n          </div>\n          <div\n            style={{\n              fontSize: \"48px\",\n              fontWeight: \"800\",\n              color: \"#2d2d2d\",\n              lineHeight: \"1\",\n            }}\n          >\n            +{displayValue.toFixed(0)}%\n          </div>\n        </div>\n\n        {/* Chart Container */}\n        <div\n          style={{\n            flex: 1,\n            position: \"relative\",\n            marginBottom: \"40px\",\n            opacity: barsOpacity,\n          }}\n        >\n          {/* Chart Bars */}\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"flex-end\",\n              height: \"200px\",\n              gap: \"3px\",\n              paddingBottom: \"20px\",\n            }}\n          >\n            {chartData.map((height, index) => (\n              <div\n                key={index}\n                style={{\n                  flex: 1,\n                  backgroundColor: \"#9d8bc9\",\n                  height: `${height * 100}%`,\n                  borderRadius: \"1px\",\n                  opacity: 0.8,\n                }}\n              />\n            ))}\n          </div>\n\n          {/* Yellow Line and Dot */}\n          <div\n            style={{\n              position: \"absolute\",\n              bottom: \"20px\",\n              left: `${lineProgress * 100}%`,\n              transform: \"translateX(-50%)\",\n              height: \"200px\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              justifyContent: \"flex-end\",\n            }}\n          >\n            {/* Yellow Line - increased stroke and height matches current value */}\n            <div\n              style={{\n                width: \"4px\", // Increased from 2px\n                height: `${currentValue * 180}px`, // Height matches current value\n                backgroundColor: \"#f4d03f\",\n                boxShadow: \"0 0 8px rgba(244, 208, 63, 0.3)\",\n                position: \"relative\",\n              }}\n            >\n              {/* Yellow Dot positioned at the top of the line */}\n              <div\n                style={{\n                  position: \"absolute\",\n                  top: \"-6px\", // Position at top of line\n                  left: \"50%\",\n                  transform: \"translateX(-50%)\",\n                  width: \"12px\",\n                  height: \"12px\",\n                  backgroundColor: \"#f4d03f\",\n                  borderRadius: \"50%\",\n                  boxShadow: \"0 2px 8px rgba(244, 208, 63, 0.4)\",\n                }}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Button */}\n        <div\n          style={{\n            opacity: buttonOpacity,\n            transform: `scale(${buttonScale})`,\n          }}\n        >\n          <div\n            style={{\n              backgroundColor: \"#2d2d2d\",\n              color: \"white\",\n              padding: \"16px 24px\",\n              borderRadius: \"8px\",\n              fontSize: \"14px\",\n              fontWeight: \"600\",\n              textAlign: \"center\",\n              cursor: \"pointer\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              gap: \"8px\",\n            }}\n          >\n            <div\n              style={{\n                width: \"6px\",\n                height: \"6px\",\n                backgroundColor: \"white\",\n                borderRadius: \"50%\",\n              }}\n            />\n            SEE MORE INSIGHTS\n          </div>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n};\n\nexport const durationInFrames_A7K9M3P2 = 150;\nexport default TemplateScene;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Profile screen animation"},{"role":"assistant","content":"const {\n  AbsoluteFill,\n  interpolate,\n  useCurrentFrame,\n  spring,\n  Img,\n} = window.Remotion;\n\nconst GradientCircle = ({ x, y, size, color1, color2, opacity, direction }) => {\n  const frame = useCurrentFrame();\n  \n  // Slow drifting motion\n  const driftX = Math.sin(frame / 180) * direction.x;\n  const driftY = Math.cos(frame / 180) * direction.y;\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        left: x + driftX,\n        top: y + driftY,\n        width: size,\n        height: size,\n        borderRadius: \"50%\",\n        background: `radial-gradient(circle at 30% 30%, ${color1}, ${color2})`,\n        opacity: 0.6 * opacity,\n        filter: \"blur(60px)\",\n        transition: \"all 0.5s ease-out\",\n      }}\n    />\n  );\n};\n\nconst PhoneFrame = ({ opacity, children, x }) => {\n  const frame = useCurrentFrame();\n  \n  const timeProgress = spring({\n    frame,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  return (\n    <div\n      style={{\n        width: \"375px\",\n        height: \"812px\",\n        background: \"white\",\n        borderRadius: \"32px\",\n        position: \"relative\",\n        overflow: \"hidden\",\n        opacity,\n        boxShadow: \"0 24px 48px rgba(0, 0, 0, 0.15)\",\n      }}\n    >\n      <div\n        style={{\n          height: \"44px\",\n          padding: \"0 24px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          background: \"white\",\n          position: \"relative\",\n          zIndex: 2,\n          opacity: timeProgress,\n          transform: `translateY(${interpolate(timeProgress, [0, 1], [20, 0])}px)`,\n        }}\n      >\n        <div style={{ \n          fontSize: \"17px\",\n          fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n          fontWeight: 700,\n        }}>\n          9:41\n        </div>\n        <div style={{ fontSize: \"17px\", display: \"flex\", alignItems: \"center\", gap: \"6px\" }}>\n          <window.IconifyIcon icon=\"material-symbols:signal-cellular-4-bar\" width=\"18\" height=\"18\" />\n          <window.IconifyIcon icon=\"material-symbols:wifi\" width=\"18\" height=\"18\" />\n          <window.IconifyIcon icon=\"material-symbols:battery-full\" width=\"24\" height=\"12\" />\n        </div>\n      </div>\n\n      {children}\n    </div>\n  );\n};\n\nconst ProfileScreen = ({ delay }) => {\n  const frame = useCurrentFrame();\n  \n  const progress = spring({\n    frame: frame - delay,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        background: \"#F8F9FA\",\n        padding: \"24px\",\n      }}\n    >\n      <div\n        style={{\n          opacity: progress,\n          transform: `translateY(${interpolate(progress, [0, 1], [20, 0])}px)`,\n        }}\n      >\n        <div\n          style={{\n            fontSize: \"34px\",\n            fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n            fontWeight: 700,\n            color: \"#1A1A1A\",\n            marginBottom: \"32px\",\n          }}\n        >\n          Profile\n        </div>\n\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            gap: \"16px\",\n            marginBottom: \"48px\",\n          }}\n        >\n          <Img\n            src={window.BazaarAvatars['asian-woman']}\n            style={{\n              width: \"120px\",\n              height: \"120px\",\n              borderRadius: \"60px\",\n              objectFit: \"cover\",\n            }}\n          />\n          <div\n            style={{\n              fontSize: \"24px\",\n              fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n              fontWeight: 700,\n              color: \"#1A1A1A\",\n            }}\n          >\n            Sarah Wilson\n          </div>\n          <div\n            style={{\n              fontSize: \"17px\",\n              fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n              color: \"#666666\",\n            }}\n          >\n            Product Designer\n          </div>\n        </div>\n      </div>\n\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: \"16px\",\n        }}\n      >\n        {[\n          { icon: \"material-symbols:settings\", label: \"Account Settings\" },\n          { icon: \"material-symbols:notifications\", label: \"Notifications\" },\n          { icon: \"material-symbols:lock\", label: \"Privacy & Security\" },\n          { icon: \"material-symbols:credit-card\", label: \"Payment Methods\" },\n          { icon: \"material-symbols:help\", label: \"Help & Support\" },\n        ].map((item, i) => (\n          <div\n            key={i}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"16px\",\n              padding: \"16px\",\n              background: \"white\",\n              borderRadius: \"12px\",\n              opacity: spring({\n                frame: frame - delay - 15 - i * 5,\n                fps: 30,\n                config: { damping: 12, stiffness: 200 },\n              }),\n              transform: `translateX(${interpolate(\n                spring({\n                  frame: frame - delay - 15 - i * 5,\n                  fps: 30,\n                  config: { damping: 12, stiffness: 200 },\n                }),\n                [0, 1],\n                [50, 0]\n              )}px)`,\n            }}\n          >\n            <window.IconifyIcon \n              icon={item.icon} \n              width=\"24\" \n              height=\"24\" \n              style={{ color: \"#4A90E2\" }}\n            />\n            <div\n              style={{\n                fontSize: \"17px\",\n                fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n                fontWeight: 500,\n                color: \"#1A1A1A\",\n              }}\n            >\n              {item.label}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst MessagesScreen = ({ delay }) => {\n  const frame = useCurrentFrame();\n  \n  const progress = spring({\n    frame: frame - delay,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  const avatars = [\n    window.BazaarAvatars['black-man'],\n    window.BazaarAvatars['hispanic-man'],\n    window.BazaarAvatars['middle-eastern-man'],\n    window.BazaarAvatars['white-woman'],\n    window.BazaarAvatars['asian-woman'],\n    window.BazaarAvatars['black-man']\n  ];\n\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        background: \"#F8F9FA\",\n        padding: \"24px\",\n      }}\n    >\n      <div\n        style={{\n          opacity: progress,\n          transform: `translateY(${interpolate(progress, [0, 1], [20, 0])}px)`,\n        }}\n      >\n        <div\n          style={{\n            fontSize: \"34px\",\n            fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n            fontWeight: 700,\n            color: \"#1A1A1A\",\n            marginBottom: \"32px\",\n          }}\n        >\n          Messages\n        </div>\n\n        <div\n          style={{\n            background: \"white\",\n            borderRadius: \"12px\",\n            padding: \"16px\",\n            marginBottom: \"32px\",\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"16px\",\n          }}\n        >\n          <window.IconifyIcon \n            icon=\"material-symbols:search\" \n            width=\"24\" \n            height=\"24\" \n            style={{ color: \"#666666\" }}\n          />\n          <div\n            style={{\n              fontSize: \"17px\",\n              fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n              color: \"#666666\",\n              flex: 1,\n            }}\n          >\n            Search messages...\n          </div>\n        </div>\n      </div>\n\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: \"16px\",\n        }}\n      >\n        {[\n          { name: \"Alex Johnson\", message: \"Hey, how's the project going?\", time: \"2m ago\" },\n          { name: \"Maria Garcia\", message: \"Can we meet tomorrow?\", time: \"1h ago\" },\n          { name: \"David Chen\", message: \"The design looks great!\", time: \"3h ago\" },\n          { name: \"Emma Wilson\", message: \"Thanks for the feedback\", time: \"1d ago\" },\n          { name: \"Sarah Kim\", message: \"Let's schedule a call\", time: \"2d ago\" },\n          { name: \"Mike Rodriguez\", message: \"Perfect! See you then\", time: \"3d ago\" },\n        ].map((conversation, i) => (\n          <div\n            key={i}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"16px\",\n              padding: \"16px\",\n              background: \"white\",\n              borderRadius: \"12px\",\n              opacity: spring({\n                frame: frame - delay - 20 - i * 5,\n                fps: 30,\n                config: { damping: 12, stiffness: 200 },\n              }),\n              transform: `translateX(${interpolate(\n                spring({\n                  frame: frame - delay - 20 - i * 5,\n                  fps: 30,\n                  config: { damping: 12, stiffness: 200 },\n                }),\n                [0, 1],\n                [50, 0]\n              )}px)`,\n            }}\n          >\n            <Img\n              src={avatars[i]}\n              style={{\n                width: \"48px\",\n                height: \"48px\",\n                borderRadius: \"24px\",\n                objectFit: \"cover\",\n              }}\n            />\n            <div style={{ flex: 1 }}>\n              <div\n                style={{\n                  fontSize: \"17px\",\n                  fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n                  fontWeight: 600,\n                  color: \"#1A1A1A\",\n                  marginBottom: \"4px\",\n                }}\n              >\n                {conversation.name}\n              </div>\n              <div\n                style={{\n                  fontSize: \"15px\",\n                  fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n                  color: \"#666666\",\n                }}\n              >\n                {conversation.message}\n              </div>\n            </div>\n            <div\n              style={{\n                fontSize: \"13px\",\n                fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n                color: \"#999999\",\n              }}\n            >\n              {conversation.time}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default function DualScreenApp() {\n  const frame = useCurrentFrame();\n  \n  const mainProgress = spring({\n    frame,\n    fps: 30,\n    config: {\n      damping: 20,\n      stiffness: 80,\n    },\n  });\n\n  const rightScreenProgress = spring({\n    frame,\n    fps: 30,\n    config: {\n      damping: 20,\n      stiffness: 80,\n    },\n  });\n\n  return (\n    <AbsoluteFill\n      style={{\n        background: \"#F8F9FA\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <GradientCircle\n        x={200}\n        y={200}\n        size={600}\n        color1=\"#4A90E2\"\n        color2=\"#45B7D1\"\n        opacity={mainProgress}\n        direction={{ x: 100, y: 50 }}\n      />\n      <GradientCircle\n        x={1400}\n        y={200}\n        size={600}\n        color1=\"#45B7D1\"\n        color2=\"#4A90E2\"\n        opacity={mainProgress}\n        direction={{ x: -80, y: 120 }}\n      />\n      <GradientCircle\n        x={800}\n        y={800}\n        size={600}\n        color1=\"#4A90E2\"\n        color2=\"#45B7D1\"\n        opacity={mainProgress}\n        direction={{ x: 60, y: -90 }}\n      />\n\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          gap: \"120px\",\n          position: \"relative\",\n          zIndex: 1,\n        }}\n      >\n        <PhoneFrame opacity={mainProgress} x={0}>\n          <ProfileScreen delay={15} />\n        </PhoneFrame>\n\n        <PhoneFrame opacity={rightScreenProgress} x={0}>\n          <MessagesScreen delay={15} />\n        </PhoneFrame>\n      </div>\n    </AbsoluteFill>\n  );\n}\n\nexport const durationInFrames_scene1 = 180;"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Pricing section animation"},{"role":"assistant","content":"const { AbsoluteFill, spring, interpolate, useCurrentFrame, useVideoConfig } = window.Remotion;\n\nconst script_a8f3b2c1 = [\n  { type: \"gradient-background\", frames: 120 },\n  { type: \"card-entrance\", frames: 15 },\n  { type: \"hold\", frames: 95 }\n];\n\nlet accumulatedFrames_a8f3b2c1 = 0;\nconst sequences_a8f3b2c1 = script_a8f3b2c1.map(scene => {\n  const start = accumulatedFrames_a8f3b2c1;\n  accumulatedFrames_a8f3b2c1 += scene.frames;\n  return { ...scene, start, end: accumulatedFrames_a8f3b2c1 };\n});\n\nconst totalFrames_a8f3b2c1 = script_a8f3b2c1.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_a8f3b2c1 = totalFrames_a8f3b2c1;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Color shift for gradient\n  const hue1 = interpolate(\n    frame,\n    [0, totalFrames_a8f3b2c1 / 2, totalFrames_a8f3b2c1],\n    [280, 320, 260],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const hue2 = interpolate(\n    frame,\n    [0, totalFrames_a8f3b2c1 / 2, totalFrames_a8f3b2c1],\n    [180, 220, 160],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Card entrance animation\n  const cardScale = spring({\n    frame: frame,\n    fps,\n    config: { damping: 15, stiffness: 120 }\n  });\n\n  const cardOpacity = interpolate(\n    frame,\n    [0, 15],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#f5f5f5\" }}>\n      {/* Gradient background - changed to rectangle with proportional height */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"53%\",\n          left: \"50%\",\n          width: \"380px\",\n          height: \"560px\", // Increased height to match card proportions\n          transform: \"translate(-50%, -50%)\",\n          background: `conic-gradient(from 0deg, hsl(${hue1}, 70%, 60%), hsl(${hue2}, 80%, 65%), hsl(${hue1 + 60}, 75%, 70%), hsl(${hue1}, 70%, 60%))`,\n          borderRadius: \"22px\",\n          filter: \"blur(80px)\",\n          opacity: \"0.8\",\n          zIndex: 1\n        }}\n      />\n\n      {/* Pricing Card container */}\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${cardScale})`,\n          opacity: cardOpacity,\n          backgroundColor: \"white\",\n          borderRadius: \"22px\",\n          padding: \"40px\",\n          maxWidth: \"400px\",\n          boxShadow: \"0 25px 50px -12px rgba(0, 0, 0, 0.25)\",\n          zIndex: 2\n        }}\n      >\n        {/* Pricing Card Content */}\n        <div style={{\n          textAlign: \"center\"\n        }}>\n          {/* Plan Name */}\n          <h1 style={{\n            fontFamily: \"Inter\",\n            fontWeight: \"700\",\n            fontSize: \"2.5rem\",\n            color: \"#111827\",\n            marginBottom: \"24px\",\n            lineHeight: \"1.2\"\n          }}>\n            Bazaar Pro\n          </h1>\n\n          {/* Price */}\n          <div style={{\n            marginBottom: \"32px\"\n          }}>\n            <span style={{\n              fontFamily: \"Inter\",\n              fontWeight: \"800\",\n              fontSize: \"4.5rem\", // Increased from 3.5rem\n              color: \"#111827\",\n              lineHeight: \"1\"\n            }}>$29</span>\n            <span style={{\n              fontFamily: \"Inter\",\n              fontWeight: \"500\",\n              fontSize: \"1.75rem\", // Increased from 1.25rem\n              color: \"#6b7280\",\n              marginLeft: \"4px\"\n            }}>/month</span>\n          </div>\n\n          {/* Features List */}\n          <div style={{\n            textAlign: \"left\",\n            marginBottom: \"40px\"\n          }}>\n            {[\n              \"Create Unlimited Videos\",\n              \"Turn Code into Content\",\n              \"Full AGI mode\",\n              \"Back Scratcher\"\n            ].map((feature, index) => (\n              <div key={index} style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                marginBottom: \"16px\"\n              }}>\n                <div style={{\n                  width: \"20px\",\n                  height: \"20px\",\n                  backgroundColor: \"#10b981\",\n                  borderRadius: \"50%\",\n                  marginRight: \"16px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  fontSize: \"12px\",\n                  color: \"white\",\n                  fontWeight: \"bold\"\n                }}>✓</div>\n                <span style={{\n                  fontFamily: \"Inter\",\n                  fontSize: \"1.375rem\", // Increased from 1.125rem\n                  color: \"#374151\",\n                  fontWeight: \"400\"\n                }}>{feature}</span>\n              </div>\n            ))}\n          </div>\n\n          {/* CTA Button */}\n          <button style={{\n            backgroundColor: \"#111827\",\n            color: \"white\",\n            padding: \"16px 32px\",\n            borderRadius: \"8px\",\n            fontSize: \"1.375rem\", // Increased from 1rem\n            fontFamily: \"Inter\",\n            fontWeight: \"600\",\n            border: \"none\",\n            cursor: \"pointer\",\n            width: \"100%\",\n            transition: \"all 0.2s ease\"\n          }}>\n            Buy Now\n          </button>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Integrations animation"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_meinfm5f = [\n  { type: \"background-setup\", frames: 10 },\n  { type: \"hold\", frames: 100 }\n];\n\nconst sequences_meinfm5f = [];\nlet accumulatedFrames_meinfm5f = 0;\n\nscript_meinfm5f.forEach((item, index) => {\n  sequences_meinfm5f.push({\n    ...item,\n    start: accumulatedFrames_meinfm5f,\n    end: accumulatedFrames_meinfm5f + item.frames\n  });\n  accumulatedFrames_meinfm5f += item.frames;\n});\n\nconst totalFrames_meinfm5f = script_meinfm5f.reduce((sum, item) => sum + item.frames, 0);\nexport const durationInFrames_meinfm5f = totalFrames_meinfm5f;\n\n// Integration icons data - using symbol-only versions\nconst integrationIcons = [\n  { icon: \"simple-icons:googlemeet\", color: \"#00897b\" },\n  { icon: \"simple-icons:asana\", color: \"#f06a6a\" },\n  { icon: \"logos:microsoft-teams\", color: \"#6264a7\" },\n  { icon: \"simple-icons:clickup\", color: \"#7b68ee\" },\n  { icon: \"logos:dropbox\", color: \"#0061ff\" },\n  { icon: \"logos:firefox\", color: \"#ff9500\" },\n  { icon: \"logos:figma\", color: \"#f24e1e\" },\n  { icon: \"simple-icons:miro\", color: \"#050038\" },\n  { icon: \"logos:slack-icon\", color: \"#4a154b\" },\n  { icon: \"logos:notion-icon\", color: \"#000000\" },\n  { icon: \"logos:trello\", color: \"#0079bf\" },\n  { icon: \"logos:zoom-icon\", color: \"#2d8cff\" },\n  { icon: \"simple-icons:microsoftoutlook\", color: \"#0078d4\" },\n  { icon: \"simple-icons:googlecalendar\", color: \"#4285f4\" },\n  { icon: \"simple-icons:hubspot\", color: \"#ff7a59\" },\n  { icon: \"logos:salesforce\", color: \"#00a1e0\" },\n  { icon: \"logos:jira\", color: \"#0052cc\" },\n  { icon: \"logos:github-icon\", color: \"#181717\" },\n  { icon: \"logos:gitlab\", color: \"#fc6d26\" },\n  { icon: \"logos:discord-icon\", color: \"#5865f2\" },\n  { icon: \"simple-icons:whatsapp\", color: \"#25d366\" },\n  { icon: \"logos:telegram\", color: \"#0088cc\" },\n  { icon: \"simple-icons:x\", color: \"#1da1f2\" },\n  { icon: \"logos:linkedin-icon\", color: \"#0077b5\" },\n  { icon: \"simple-icons:instagram\", color: \"#e4405f\" }\n];\n\nexport default function TemplateScene() {\n  window.RemotionGoogleFonts.loadFont(\"Poppins\", { weights: [\"500\", \"600\", \"800\"] });\n\n  const frame = useCurrentFrame();\n  const { width, height } = useVideoConfig();\n\n  // Fixed circle size - same for all\n  const circleSize = Math.min(width * 0.08, 80);\n  const borderWidth = 3;\n\n  // Background transition animations - old background fades out with opacity AND zooms in\n  const oldBackgroundOpacity = interpolate(\n    frame,\n    [80, 90],\n    [1, 0],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // NEW: Initial background zoom-in animation\n  const oldBackgroundScale = interpolate(\n    frame,\n    [0, 90],\n    [1, 1.5],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const newBackgroundScale = interpolate(\n    frame,\n    [80, 100, 110],\n    [2, 1.6, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Extended fade-in duration for new background - now 10 frames instead of 5\n  const newBackgroundOpacity = interpolate(\n    frame,\n    [80, 90],\n    [0, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // \"50+ Integrations\" text animation - appears early and slides out when grid scales up\n  const integrationsOpacity = interpolate(\n    frame,\n    [10, 15, 30, 35],\n    [0, 1, 1, 0],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Text slide out animation - slides up and out of view when grid scales up\n  const integrationsTranslateY = interpolate(\n    frame,\n    [30, 35],\n    [0, -100],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Grid animation - icons appear with staggered timing\n  const gridOpacity = interpolate(\n    frame,\n    [15, 20, 48],\n    [0, 1, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Perspective rotation animation - starts at frame 25\n  const perspectiveRotation = interpolate(\n    frame,\n    [25, 45, 80, 90],\n    [0, 10, 12, 0],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Grid scale up during perspective rotation\n  const gridScale = interpolate(\n    frame,\n    [30, 35, 70],\n    [1, 1.7, 2],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // New image animation - zoom in from 0 scale with rotation\n  const imageScale = interpolate(\n    frame,\n    [85, 105],\n    [0, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const imageRotation = interpolate(\n    frame,\n    [85, 105],\n    [0, 360],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const imageOpacity = interpolate(\n    frame,\n    [85, 100],\n    [0, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Image movement to left side after rotation completes\n  const imageTranslateX = interpolate(\n    frame,\n    [105, 110],\n    [0, -width * 0.2],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // Scale down the image when moving to left\n  const imageScaleDown = interpolate(\n    frame,\n    [105, 110],\n    [1, 0.7],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  // \"FELLOW\" text animation - appears DURING image movement, not after\n  const fellowOpacity = interpolate(\n    frame,\n    [107, 110],\n    [0, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  const fellowScale = interpolate(\n    frame,\n    [107, 110],\n    [0.5, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"rgba(0, 0, 0, 0.5)\" }}>\n      {/* Old background image - fades out with opacity AND zooms in */}\n      {frame < 90 && (\n        <Img\n          src=\"https://i.postimg.cc/XvQGvww9/Untitled-1kjn.png\"\n          style={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            width: \"100%\",\n            height: \"100%\",\n            objectFit: \"cover\",\n            transform: `translate(-50%, -50%) scale(${oldBackgroundScale})`,\n            opacity: oldBackgroundOpacity\n          }}\n        />\n      )}\n\n      {/* New background image - slides in with scale down and extended fade-in */}\n      {frame >= 80 && (\n        <Img\n          src=\"https://i.postimg.cc/FFb1ydz8/gradientsf.png\"\n          style={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            width: \"100%\",\n            height: \"100%\",\n            objectFit: \"cover\",\n            transform: `translate(-50%, -50%) scale(${newBackgroundScale})`,\n            opacity: newBackgroundOpacity\n          }}\n        />\n      )}\n\n      {/* \"50+ Integrations\" text at the top with outro animation */}\n      {frame >= 10 && frame <= 35 && (\n        <div style={{\n          position: \"absolute\",\n          top: \"10%\",\n          left: \"50%\",\n          transform: `translateX(-50%) translateY(${integrationsTranslateY}%)`,\n          opacity: integrationsOpacity,\n          fontFamily: \"Poppins\",\n          fontSize: `${Math.min(width * 0.03, 48)}px`,\n          fontWeight: \"600\",\n          color: \"white\",\n          textShadow: \"0 5px 15px rgba(0,0,0,0.5)\",\n          textAlign: \"center\"\n        }}>\n          50+ Integrations\n        </div>\n      )}\n\n      {/* Integration icons grid with perspective rotation */}\n      {frame >= 15 && (\n        <div style={{\n          position: \"absolute\",\n          top: \"25%\",\n          left: \"50%\",\n          transform: `translateX(-50%) scale(${gridScale})`,\n          opacity: gridOpacity,\n          perspective: \"1000px\",\n          perspectiveOrigin: \"center center\"\n        }}>\n          <div style={{\n            display: \"grid\",\n            gridTemplateColumns: \"repeat(5, 1fr)\",\n            gridTemplateRows: \"repeat(5, 1fr)\",\n            gap: `${Math.min(width * 0.02, 20)}px`,\n            width: `${circleSize * 5 + Math.min(width * 0.02, 20) * 4}px`,\n            height: `${circleSize * 5 + Math.min(width * 0.02, 20) * 4}px`,\n            transform: `rotateY(${perspectiveRotation}deg)`,\n            transformStyle: \"preserve-3d\"\n          }}>\n            {integrationIcons.map((item, index) => {\n              const staggerDelay = Math.floor(index / 5) * 1;\n              const iconOpacity = interpolate(\n                frame,\n                [15 + staggerDelay, 18 + staggerDelay],\n                [0, 1],\n                {\n                  extrapolateLeft: \"clamp\",\n                  extrapolateRight: \"clamp\"\n                }\n              );\n\n              const iconScale = interpolate(\n                frame,\n                [15 + staggerDelay, 18 + staggerDelay],\n                [0.5, 1],\n                {\n                  extrapolateLeft: \"clamp\",\n                  extrapolateRight: \"clamp\"\n                }\n              );\n\n              // Calculate column position for depth effect\n              const col = index % 5;\n              const depthTranslation = interpolate(\n                frame,\n                [25, 40, 48],\n                [0, (col - 2) * -20, (col - 2) * -20],\n                {\n                  extrapolateLeft: \"clamp\",\n                  extrapolateRight: \"clamp\"\n                }\n              );\n\n              // Calculate current position in grid\n              const currentRow = Math.floor(index / 5);\n              const currentCol = index % 5;\n\n              // Target position (13th circle - index 12, which is row 2, col 2)\n              const targetRow = 2;\n              const targetCol = 2;\n\n              // Calculate movement to center (13th position) - delayed to start at frame 80\n              const moveToCenter = interpolate(\n                frame,\n                [80, 85],\n                [0, 1],\n                {\n                  extrapolateLeft: \"clamp\",\n                  extrapolateRight: \"clamp\"\n                }\n              );\n\n              // Calculate translation needed to move to center position\n              let translateX = moveToCenter * (targetCol - currentCol) * (circleSize + Math.min(width * 0.02, 20));\n              let translateY = moveToCenter * (targetRow - currentRow) * (circleSize + Math.min(width * 0.02, 20));\n\n              // Special handling for WhatsApp circle (index 20) - MOVED BEFORE FIRST USE\n              const isWhatsApp = index === 20;\n              const gatheringComplete = frame >= 85;\n\n              // Lock WhatsApp position at center when it starts disappearing\n              if (isWhatsApp && frame >= 85) {\n                translateX = 1 * (targetCol - currentCol) * (circleSize + Math.min(width * 0.02, 20));\n                translateY = 1 * (targetRow - currentRow) * (circleSize + Math.min(width * 0.02, 20));\n              }\n\n              // Fade out all non-WhatsApp circles after gathering is complete\n              let finalOpacity = isWhatsApp ? iconOpacity : interpolate(\n                frame,\n                [85, 90],\n                [iconOpacity, 0],\n                {\n                  extrapolateLeft: \"clamp\",\n                  extrapolateRight: \"clamp\"\n                }\n              );\n\n              // NEW: Make WhatsApp circle (white circle) scale down and disappear during image animation\n              if (isWhatsApp && frame >= 90) {\n                finalOpacity = interpolate(\n                  frame,\n                  [90, 95],\n                  [iconOpacity, 0],\n                  {\n                    extrapolateLeft: \"clamp\",\n                    extrapolateRight: \"clamp\"\n                  }\n                );\n              }\n\n              // NEW: Scale down the WhatsApp circle during image animation\n              let finalScale = iconScale;\n              if (isWhatsApp && frame >= 100) {\n                const whatsAppScaleDown = interpolate(\n                  frame,\n                  [85, 90],\n                  [1, 0],\n                  {\n                    extrapolateLeft: \"clamp\",\n                    extrapolateRight: \"clamp\"\n                  }\n                );\n                finalScale = iconScale * whatsAppScaleDown;\n              }\n\n              // WhatsApp circle becomes plain white after gathering\n              const circleColor = isWhatsApp && gatheringComplete ? \"white\" : item.color;\n              const iconColor = isWhatsApp && gatheringComplete ? \"white\" : item.color;\n              const backgroundColor = isWhatsApp && gatheringComplete ? \"white\" : \"transparent\";\n\n              return (\n                <div\n                  key={index}\n                  style={{\n                    width: `${circleSize}px`,\n                    height: `${circleSize}px`,\n                    borderRadius: \"50%\",\n                    backgroundColor: backgroundColor,\n                    border: `${borderWidth}px solid ${circleColor}`,\n                    boxShadow: `0 0 20px ${circleColor}40, inset 0 0 20px ${circleColor}20`,\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    opacity: finalOpacity,\n                    transform: `scale(${finalScale}) translateZ(${depthTranslation}px) translate(${translateX}px, ${translateY}px)`,\n                    transition: \"all 0.3s ease\"\n                  }}\n                >\n                  <window.IconifyIcon\n                    icon={item.icon}\n                    style={{\n                      fontSize: `${circleSize * 0.4}px`,\n                      color: iconColor\n                    }}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* New centered image with zoom and rotation animation, then moves to left and scales down */}\n      {frame >= 95 && (\n        <div style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) translateX(${imageTranslateX}px) scale(${imageScale * imageScaleDown}) rotate(${imageRotation}deg)`,\n          opacity: imageOpacity\n        }}>\n          <Img\n            src=\"https://i.postimg.cc/RVLHxwpQ/Vfgh-D76o-TQ0c-T5-Gdro-MBt-FJRa-Y8dfd.png\"\n            style={{\n              width: `${Math.min(width * 0.3, 300)}px`,\n              height: \"auto\",\n              maxHeight: `${Math.min(height * 0.4, 400)}px`,\n              objectFit: \"contain\"\n            }}\n          />\n        </div>\n      )}\n\n      {/* \"FELLOW\" text appears during image movement with reduced gap */}\n      {frame >= 107 && (\n        <div style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"52%\",\n          transform: `translate(-50%, -50%) scale(${fellowScale})`,\n          opacity: fellowOpacity,\n          fontFamily: \"Poppins\",\n          fontSize: `${Math.min(width * 0.08, 160)}px`,\n          fontWeight: \"800\",\n          color: \"white\"\n        }}>\n          FELLOW\n        </div>\n      )}\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Rainbow text animation"},{"role":"assistant","content":"const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nconst script_mf6jwjwe = [\n  { type: \"text\", content: \"Meet\", frames: 50 }\n];\n\nlet accumulatedFrames_mf6jwjwe = 0;\nconst sequences_mf6jwjwe = [];\n\nscript_mf6jwjwe.forEach((item, index) => {\n  sequences_mf6jwjwe.push({\n    ...item,\n    start: accumulatedFrames_mf6jwjwe,\n    end: accumulatedFrames_mf6jwjwe + item.frames\n  });\n  accumulatedFrames_mf6jwjwe += item.frames;\n});\n\nconst totalFrames_mf6jwjwe = script_mf6jwjwe.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_mf6jwjwe = totalFrames_mf6jwjwe;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  const aspectRatio = width / height;\n  const isPortrait = aspectRatio < 1;\n  const isSquare = Math.abs(aspectRatio - 1) < 0.2;\n\n  const svgWidth = Math.min(width * 0.9, isPortrait ? width * 0.95 : 1400);\n  const svgHeight = isPortrait ? height * 0.6 : 450;\n  const baseFontSize = Math.min(svgWidth, svgHeight) * 0.35 * 2.5; // 2.5x bigger\n  const fontSize = isPortrait ? baseFontSize * 0.8 : baseFontSize;\n\n  const word = \"Meet\";\n  const letters = word.split(\"\");\n\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: \"#000000\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        display: \"flex\",\n      }}\n    >\n      <svg \n        width={svgWidth} \n        height={svgHeight} \n        viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n        style={{ maxWidth: '90%', height: 'auto' }}\n      >\n        <defs>\n          <linearGradient id=\"rainbow-gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" stopColor=\"#ff0000\" />\n            <stop offset=\"16.66%\" stopColor=\"#ff8800\" />\n            <stop offset=\"33.33%\" stopColor=\"#ffff00\" />\n            <stop offset=\"50%\" stopColor=\"#00ff00\" />\n            <stop offset=\"66.66%\" stopColor=\"#0088ff\" />\n            <stop offset=\"83.33%\" stopColor=\"#4400ff\" />\n            <stop offset=\"100%\" stopColor=\"#8800ff\" />\n          </linearGradient>\n          \n          <filter id=\"neon-glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n            <feGaussianBlur stdDeviation=\"12\" result=\"coloredBlur\"/>\n            <feMerge> \n              <feMergeNode in=\"coloredBlur\"/>\n              <feMergeNode in=\"SourceGraphic\"/>\n            </feMerge>\n          </filter>\n          \n          <filter id=\"outer-glow\" x=\"-100%\" y=\"-100%\" width=\"300%\" height=\"300%\">\n            <feGaussianBlur stdDeviation=\"20\" result=\"outerGlow\"/>\n            <feMerge> \n              <feMergeNode in=\"outerGlow\"/>\n              <feMergeNode in=\"SourceGraphic\"/>\n            </feMerge>\n          </filter>\n          \n          <filter id=\"blue-edge-glow\" x=\"-150%\" y=\"-150%\" width=\"400%\" height=\"400%\">\n            <feGaussianBlur stdDeviation=\"25\" result=\"blueGlow\"/>\n            <feColorMatrix in=\"blueGlow\" type=\"matrix\" values=\"0 0 0 0 0.2  0 0 0 0 0.4  0 0 0 0 1  0 0 0 1 0\"/>\n            <feMerge> \n              <feMergeNode in=\"blueGlow\"/>\n              <feMergeNode in=\"SourceGraphic\"/>\n            </feMerge>\n          </filter>\n        </defs>\n\n        {letters.map((letter, index) => {\n          // Each letter starts its sequence independently\n          const letterStartFrame = index * 3; // Stagger letters by 3 frames\n          const rainbowStartFrame = letterStartFrame;\n          const rainbowEndFrame = letterStartFrame + 5; // Rainbow for 5 frames\n          const fillStartFrame = rainbowEndFrame; // Fill starts when rainbow ends\n          const fillEndFrame = fillStartFrame + 5; // Fill for 5 frames\n          \n          const letterOpacity = interpolate(\n            frame,\n            [letterStartFrame, letterStartFrame + 1],\n            [0, 1],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\"\n            }\n          );\n\n          // Rainbow effect: appears for 5 frames, then disappears immediately when fill completes\n          const glowOpacity = interpolate(\n            frame,\n            [rainbowStartFrame, rainbowEndFrame, fillEndFrame, fillEndFrame + 1],\n            [0, 1, 1, 0],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\"\n            }\n          );\n          \n          // Fill effect: starts after rainbow, fills white over 5 frames\n          const fillProgress = interpolate(\n            frame,\n            [fillStartFrame, fillEndFrame],\n            [0, 1],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\",\n              easing: (t) => {\n                return t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2;\n              }\n            }\n          );\n          \n          const letterColor = `rgb(${Math.round(fillProgress * 255)}, ${Math.round(fillProgress * 255)}, ${Math.round(fillProgress * 255)})`;\n\n          // Simplified uniform letter spacing\n          const letterSpacing = fontSize * 0.1; // Consistent spacing for all letters\n          const letterWidth = fontSize * 0.6; // Approximate letter width\n          \n          // Calculate total word width for centering\n          const totalWordWidth = (letters.length * letterWidth) + ((letters.length - 1) * letterSpacing);\n          const startX = (svgWidth - totalWordWidth) / 2;\n          \n          // Simple uniform positioning - each letter gets same spacing\n          let letterX = startX + (index * (letterWidth + letterSpacing));\n          \n          // Move the first 'e' (index 1) 60 pixels to the right for more spacing between M and E\n          if (index === 1) {\n            letterX += 60;\n          }\n          \n          // Move the 't' (index 3) closer to the 'e' (index 2) by reducing its spacing more\n          if (index === 3) {\n            letterX -= 45;\n          }\n\n          return (\n            <g key={index} opacity={letterOpacity}>\n              {/* Blue edge glow effect - outermost layer */}\n              <text\n                x={letterX}\n                y={svgHeight * 0.65}\n                fill=\"none\"\n                stroke=\"url(#rainbow-gradient)\"\n                strokeWidth=\"12\"\n                fontFamily=\"Roboto, sans-serif\"\n                fontWeight=\"400\"\n                fontSize={fontSize}\n                textAnchor=\"start\"\n                filter=\"url(#blue-edge-glow)\"\n                opacity={glowOpacity * 0.4}\n              >\n                {letter}\n              </text>\n              \n              {/* Rainbow neon glow - behind the letter */}\n              <text\n                x={letterX}\n                y={svgHeight * 0.65}\n                fill=\"none\"\n                stroke=\"url(#rainbow-gradient)\"\n                strokeWidth=\"8\"\n                fontFamily=\"Roboto, sans-serif\"\n                fontWeight=\"400\"\n                fontSize={fontSize}\n                textAnchor=\"start\"\n                filter=\"url(#outer-glow)\"\n                opacity={glowOpacity * 0.6}\n              >\n                {letter}\n              </text>\n              \n              {/* Inner neon glow - behind the letter */}\n              <text\n                x={letterX}\n                y={svgHeight * 0.65}\n                fill=\"none\"\n                stroke=\"url(#rainbow-gradient)\"\n                strokeWidth=\"4\"\n                fontFamily=\"Roboto, sans-serif\"\n                fontWeight=\"400\"\n                fontSize={fontSize}\n                textAnchor=\"start\"\n                filter=\"url(#neon-glow)\"\n                opacity={glowOpacity}\n              >\n                {letter}\n              </text>\n              \n              {/* Main letter with color transition - topmost layer */}\n              <text\n                x={letterX}\n                y={svgHeight * 0.65}\n                fill={letterColor}\n                stroke=\"none\"\n                fontFamily=\"Roboto, sans-serif\"\n                fontWeight=\"400\"\n                fontSize={fontSize}\n                textAnchor=\"start\"\n              >\n                {letter}\n              </text>\n            </g>\n          );\n        })}\n      </svg>\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Login form animation"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_A8B9C2D3 = [\n  { type: \"modal-scale-and-typing\", frames: 75 }\n];\n\nlet accumulatedFrames_A8B9C2D3 = 0;\nconst sequences_A8B9C2D3 = script_A8B9C2D3.map(scene => {\n  const start = accumulatedFrames_A8B9C2D3;\n  accumulatedFrames_A8B9C2D3 += scene.frames;\n  return { ...scene, start, end: accumulatedFrames_A8B9C2D3 };\n});\n\nconst totalFrames_A8B9C2D3 = script_A8B9C2D3.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_A8B9C2D3 = totalFrames_A8B9C2D3;\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animated gradient background from scene 2\n  const cycleDuration = fps * 8;\n  \n  // Animate hue 1: 240° → 230° (dark blue variations)\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [240, 230, 240],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: 192° → 185° (light blue variations)\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [192, 185, 192],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 100% → 95% → 100% for dark blue, 77% → 85% → 77% for light blue\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [100, 95, 100],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [77, 85, 77],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 14% → 18% → 14% for dark blue, 62% → 58% → 62% for light blue\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [14, 18, 14],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [62, 58, 62],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: ±25° around 135° (110° → 160°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [110, 160, 110],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%))`;\n\n  // Modal scales up by 20% over the animation duration\n  const modalScaleProgress = spring({\n    frame,\n    fps,\n    config: { damping: 15, stiffness: 80 }\n  });\n  const modalScale = interpolate(modalScaleProgress, [0, 1], [1, 1.4]);\n\n  // Typing animations start immediately\n  const emailText = \"elon@spacex.com\";\n  const passwordText = \"••••••••••••\";\n  \n  const typedEmailLength = Math.max(0, Math.min(emailText.length, Math.floor(frame / 3)));\n  const typedPasswordLength = Math.max(0, Math.min(passwordText.length, Math.floor((frame - 30) / 2.5)));\n\n  return (\n    <AbsoluteFill style={{ background: gradientStyle }}>\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"40%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${modalScale})`,\n          width: \"400px\",\n          borderRadius: \"24px\",\n          background: \"linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(18,18,18,1) 100%)\",\n          backdropFilter: \"blur(10px)\",\n          boxShadow: \"0 25px 50px rgba(0,0,0,0.5)\",\n          padding: \"32px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\"\n        }}\n      >\n        <div\n          style={{\n            width: \"48px\",\n            height: \"48px\",\n            borderRadius: \"50%\",\n            background: \"rgba(255,255,255,0.2)\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            marginBottom: \"24px\"\n          }}\n        >\n          <window.IconifyIcon \n            icon=\"mdi:hexagon-multiple\" \n            style={{ \n              fontSize: \"24px\", \n              color: \"white\" \n            }} \n          />\n        </div>\n\n        <h2\n          style={{\n            fontSize: \"28px\",\n            fontFamily: \"Inter\",\n            fontWeight: \"600\",\n            color: \"white\",\n            marginBottom: \"32px\",\n            textAlign: \"center\"\n          }}\n        >\n          Bazaar\n        </h2>\n\n        <div style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", gap: \"16px\" }}>\n          <input\n            style={{\n              width: \"100%\",\n              padding: \"12px 20px\",\n              borderRadius: \"12px\",\n              background: \"rgba(255,255,255,0.1)\",\n              border: \"none\",\n              color: \"white\",\n              fontSize: \"14px\",\n              fontFamily: \"Inter\",\n              outline: \"none\"\n            }}\n            placeholder=\"Email\"\n            value={emailText.substring(0, typedEmailLength)}\n            readOnly\n          />\n\n          <input\n            type=\"password\"\n            style={{\n              width: \"100%\",\n              padding: \"12px 20px\",\n              borderRadius: \"12px\",\n              background: \"rgba(255,255,255,0.1)\",\n              border: \"none\",\n              color: \"white\",\n              fontSize: \"14px\",\n              fontFamily: \"Inter\",\n              outline: \"none\"\n            }}\n            placeholder=\"Password\"\n            value={frame >= 30 ? passwordText.substring(0, typedPasswordLength) : \"\"}\n            readOnly\n          />\n        </div>\n\n        <div style={{ width: \"100%\", height: \"1px\", background: \"rgba(255,255,255,0.1)\", margin: \"24px 0\" }} />\n\n        <button\n          style={{\n            width: \"100%\",\n            padding: \"12px 20px\",\n            borderRadius: \"50px\",\n            background: \"rgba(255,255,255,0.1)\",\n            border: \"none\",\n            color: \"white\",\n            fontSize: \"14px\",\n            fontFamily: \"Inter\",\n            fontWeight: \"500\",\n            marginBottom: \"12px\",\n            cursor: \"pointer\"\n          }}\n        >\n          Sign in\n        </button>\n\n        <button\n          style={{\n            width: \"100%\",\n            padding: \"12px 20px\",\n            borderRadius: \"50px\",\n            background: \"linear-gradient(180deg, #232526 0%, #2d2e30 100%)\",\n            border: \"none\",\n            color: \"white\",\n            fontSize: \"14px\",\n            fontFamily: \"Inter\",\n            fontWeight: \"500\",\n            marginBottom: \"16px\",\n            cursor: \"pointer\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            gap: \"8px\"\n          }}\n        >\n          <window.IconifyIcon \n            icon=\"mdi:google\" \n            style={{ \n              fontSize: \"20px\", \n              color: \"#4285f4\" \n            }} \n          />\n          Continue with Google\n        </button>\n      </div>\n\n      <div\n        style={{\n          position: \"absolute\",\n          bottom: \"80px\",\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          textAlign: \"center\"\n        }}\n      >\n        <p\n          style={{\n            fontSize: \"28px\",\n            color: \"rgba(255,255,255,0.6)\",\n            fontFamily: \"Inter\",\n            marginBottom: \"24px\"\n          }}\n        >\n          Join <span style={{ color: \"white\", fontWeight: \"500\" }}>thousands</span> of developers who are already using Bazaar.\n        </p>\n\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            gap: \"-16px\"\n          }}\n        >\n          <img\n            src={window.BazaarAvatars['middle-eastern-man']}\n            style={{\n              width: \"64px\",\n              height: \"64px\",\n              borderRadius: \"50%\",\n              border: \"2px solid #181824\",\n              objectFit: \"cover\",\n              marginRight: \"-16px\"\n            }}\n          />\n          <img\n            src={window.BazaarAvatars['white-woman']}\n            style={{\n              width: \"64px\",\n              height: \"64px\",\n              borderRadius: \"50%\",\n              border: \"2px solid #181824\",\n              objectFit: \"cover\",\n              marginRight: \"-16px\"\n            }}\n          />\n          <img\n            src={window.BazaarAvatars['black-man']}\n            style={{\n              width: \"64px\",\n              height: \"64px\",\n              borderRadius: \"50%\",\n              border: \"2px solid #181824\",\n              objectFit: \"cover\",\n              marginRight: \"-16px\"\n            }}\n          />\n          <img\n            src={window.BazaarAvatars['asian-woman']}\n            style={{\n              width: \"64px\",\n              height: \"64px\",\n              borderRadius: \"50%\",\n              border: \"2px solid #181824\",\n              objectFit: \"cover\"\n            }}\n          />\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n}"}]}
{"messages":[{"role":"system","content":"You are Bazaar's Remotion code generator. Respond with valid TSX only. Start with imports/const declarations and never add prose."},{"role":"user","content":"Sparkle text animation"},{"role":"assistant","content":"const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig, Img } = window.Remotion;\n\nconst script_A8B9C2D1 = [\n  { type: \"sparkleText\", text: \"Sparkles\", frames: 120 }\n];\n\nlet accumulatedFrames_A8B9C2D1 = 0;\nconst sequences_A8B9C2D1 = [];\n\nscript_A8B9C2D1.forEach((item, index) => {\n  sequences_A8B9C2D1.push({\n    ...item,\n    start: accumulatedFrames_A8B9C2D1,\n    end: accumulatedFrames_A8B9C2D1 + item.frames\n  });\n  accumulatedFrames_A8B9C2D1 += item.frames;\n});\n\nconst totalFrames_A8B9C2D1 = script_A8B9C2D1.reduce((sum, s) => sum + s.frames, 0);\nexport const durationInFrames_A8B9C2D1 = totalFrames_A8B9C2D1;\n\nconst Sparkle = ({ x, y, color, delay, scale, frame, fps }) => {\n  const sparkleProgress = spring({\n    frame: frame - delay,\n    fps,\n    config: { damping: 15, stiffness: 200 }\n  });\n\n  const opacity = interpolate(\n    frame - delay,\n    [0, 15, 45, 60],\n    [0, 1, 1, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const sparkleScale = interpolate(\n    sparkleProgress,\n    [0, 1],\n    [0, scale * 2],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const rotation = interpolate(\n    frame - delay,\n    [0, 60],\n    [75, 225],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        left: x,\n        top: y,\n        opacity,\n        transform: `scale(${sparkleScale}) rotate(${rotation}deg)`,\n        pointerEvents: \"none\",\n        zIndex: 20\n      }}\n    >\n      <svg width=\"28\" height=\"28\" viewBox=\"0 0 21 21\">\n        <path\n          d=\"M9.82531 0.843845C10.0553 0.215178 10.9446 0.215178 11.1746 0.843845L11.8618 2.72026C12.4006 4.19229 12.3916 6.39157 13.5 7.5C14.6084 8.60843 16.8077 8.59935 18.2797 9.13822L20.1561 9.82534C20.7858 10.0553 20.7858 10.9447 20.1561 11.1747L18.2797 11.8618C16.8077 12.4007 14.6084 12.3916 13.5 13.5C12.3916 14.6084 12.4006 16.8077 11.8618 18.2798L11.1746 20.1562C10.9446 20.7858 10.0553 20.7858 9.82531 20.1562L9.13819 18.2798C8.59932 16.8077 8.60843 14.6084 7.5 13.5C6.39157 12.3916 4.19225 12.4007 2.72023 11.8618L0.843814 11.1747C0.215148 10.9447 0.215148 10.0553 0.843814 9.82534L2.72023 9.13822C4.19225 8.59935 6.39157 8.60843 7.5 7.5C8.60843 6.39157 8.59932 4.19229 9.13819 2.72026L9.82531 0.843845Z\"\n          fill={color}\n        />\n      </svg>\n    </div>\n  );\n};\n\nexport default function TemplateScene() {\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  const sparkles = [\n    { id: \"1\", x: \"20%\", y: \"30%\", color: \"#9E7AFF\", delay: 10, scale: 1.0 },\n    { id: \"2\", x: \"80%\", y: \"25%\", color: \"#FE8BBB\", delay: 20, scale: 1.5 },\n    { id: \"3\", x: \"25%\", y: \"70%\", color: \"#9E7AFF\", delay: 30, scale: 0.8 },\n    { id: \"4\", x: \"75%\", y: \"75%\", color: \"#FE8BBB\", delay: 15, scale: 1.2 },\n    { id: \"5\", x: \"50%\", y: \"20%\", color: \"#9E7AFF\", delay: 25, scale: 1.1 },\n    { id: \"6\", x: \"15%\", y: \"50%\", color: \"#FE8BBB\", delay: 35, scale: 0.9 },\n    { id: \"7\", x: \"85%\", y: \"55%\", color: \"#9E7AFF\", delay: 40, scale: 1.4 },\n    { id: \"8\", x: \"55%\", y: \"85%\", color: \"#FE8BBB\", delay: 18, scale: 1.0 }\n  ];\n\n  const textProgress = spring({\n    frame: frame - 5,\n    fps,\n    config: { damping: 12, stiffness: 100 }\n  });\n\n  const textOpacity = interpolate(\n    textProgress,\n    [0, 1],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const textScale = interpolate(\n    textProgress,\n    [0, 1],\n    [1.6, 2],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Calculate responsive font size based on viewport width\n  const responsiveFontSize = Math.min(width * 0.12, height * 0.15);\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#ffffff\" }}>\n      {frame >= 0 && frame < 120 && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: `translate(-50%, -50%) scale(${textScale})`,\n            opacity: textOpacity\n          }}\n        >\n          <div style={{ position: \"relative\", display: \"inline-block\" }}>\n            {sparkles.map((sparkle) => (\n              <Sparkle\n                key={sparkle.id}\n                x={sparkle.x}\n                y={sparkle.y}\n                color={sparkle.color}\n                delay={sparkle.delay}\n                scale={sparkle.scale}\n                frame={frame}\n                fps={fps}\n              />\n            ))}\n            <div\n              style={{\n                fontFamily: \"Inter\",\n                fontWeight: \"900\",\n                fontSize: `${responsiveFontSize}px`,\n                color: \"#000000\",\n                textAlign: \"center\",\n                letterSpacing: \"-0.02em\",\n                whiteSpace: \"nowrap\"\n              }}\n            >\n              Sparkles\n            </div>\n          </div>\n        </div>\n      )}\n    </AbsoluteFill>\n  );\n}"}]}
