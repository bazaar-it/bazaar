// Auto-generated by scripts/precompile-templates.ts
// DO NOT EDIT MANUALLY

export const COMPILED_TEMPLATES: Record<string, {
  jsCode: string | null;
  compiledAt: Date | null;
  error?: string;
}> = {
  "fast-text": {
    "jsCode": "const { AbsoluteFill, Sequence, spring, interpolate, useCurrentFrame, useVideoConfig } = window.Remotion;\n\nconst script_A7B9C2D4 = [\n  { text: \"This is a fast typography scene.\", frames: 45, pause: 40 },\n  { text: \"It breaks long sentences down into chunks\", frames: 50, pause: 40 },\n  { text: \"and combines multiple text effects\", frames: 40, pause: 40 },\n  { text: \"to make an engaging video.\", frames: 40, pause: 40 },\n  { text: \"Try it by pasting in your script.\", frames: 45, pause: 50 }\n];\n\nlet accumulatedFrames_A7B9C2D4 = 0;\nlet sequences_A7B9C2D4 = [];\n\nscript_A7B9C2D4.forEach((item, index) => {\n  sequences_A7B9C2D4.push({\n    ...item,\n    startFrame: accumulatedFrames_A7B9C2D4,\n    endFrame: accumulatedFrames_A7B9C2D4 + item.frames + item.pause\n  });\n  accumulatedFrames_A7B9C2D4 += item.frames + item.pause;\n});\n\nconst totalFrames_A7B9C2D4 = script_A7B9C2D4.reduce((sum, item) => sum + item.frames + item.pause, 0);\nconst durationInFrames_A7B9C2D4 = totalFrames_A7B9C2D4;\n\nfunction Scene_A7B9C2D4() {\n  window.RemotionGoogleFonts.loadFont(\"Inter\", { weights: [\"700\"] });\n  \n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  const gradientOffset = interpolate(\n    frame,\n    [0, totalFrames_A7B9C2D4],\n    [0, 360],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const backgroundStyle = {\n    background: `linear-gradient(45deg, \n      hsl(${280 + Math.sin(gradientOffset * Math.PI / 180) * 20}, 80%, 60%), \n      hsl(${30 + Math.cos(gradientOffset * Math.PI / 180) * 15}, 85%, 65%))`\n  };\n\n  return (\n    React.createElement(AbsoluteFill, { style: backgroundStyle,}\n      , sequences_A7B9C2D4.map((seq, index) => (\n        React.createElement(Sequence, {\n          key: index,\n          from: seq.startFrame,\n          durationInFrames: seq.frames + seq.pause,}\n\n          , React.createElement(AbsoluteFill, {\n            style: {\n              position: \"absolute\",\n              width: \"100%\",\n              height: \"100%\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\"\n            },}\n\n            , React.createElement(TextReveal, { text: seq.text, animationType: index % 4, width: width, height: height, animationFrames: seq.frames, pauseFrames: seq.pause,} )\n          )\n        )\n      ))\n    )\n  );\n}\n\nfunction TextReveal({ text, animationType, width, height, animationFrames, pauseFrames }) {\n  const frame = useCurrentFrame();\n  const words = text.split(\" \");\n  const wordCount = words.length;\n  const charCount = text.length;\n  \n  // Increased font size calculation - made significantly bigger\n  let fontSize = Math.min(width, height) * 0.12; // Increased from 0.08 to 0.12 (50% bigger)\n  \n  // Adjust for text length - less aggressive scaling to keep text bigger\n  if (charCount > 30) {\n    fontSize *= 0.8; // Increased from 0.7 to 0.8\n  } else if (charCount > 20) {\n    fontSize *= 0.9; // Increased from 0.85 to 0.9\n  }\n  \n  // Ensure minimum readable size - increased minimum\n  fontSize = Math.max(fontSize, width * 0.045); // Increased from 0.03 to 0.045\n\n  // Dynamic timing based on allocated animation frames\n  const revealDuration = Math.max(6, animationFrames * 0.15); // Scale reveal duration with animation frames\n  const holdStart = revealDuration + 3;\n\n  // Text stays visible during animation phase and pause phase\n  const containerOpacity = interpolate(\n    frame,\n    [0, 3],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Function to break text into lines if needed\n  const breakTextIntoLines = (text) => {\n    const words = text.split(\" \");\n    if (words.length <= 4) return [text]; // Short sentences stay on one line\n    \n    const lines = [];\n    let currentLine = \"\";\n    \n    words.forEach((word, index) => {\n      const testLine = currentLine ? `${currentLine} ${word}` : word;\n      \n      // Estimate if line would be too long (rough character count)\n      if (testLine.length > 25 && currentLine !== \"\") {\n        lines.push(currentLine);\n        currentLine = word;\n      } else {\n        currentLine = testLine;\n      }\n    });\n    \n    if (currentLine) lines.push(currentLine);\n    return lines;\n  };\n\n  const textLines = breakTextIntoLines(text);\n  const isMultiLine = textLines.length > 1;\n\n  const renderWords = () => {\n    if (animationType === 3) {\n      // Typewriter effect - scale timing with animation frames\n      const typewriterDuration = animationFrames * 0.8; // Use 80% of animation frames for typing\n      const charsToShow = Math.floor(interpolate(\n        frame,\n        [0, typewriterDuration],\n        [0, text.length],\n        { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n      ));\n      \n      // Show cursor only during animation phase, not during pause\n      const showCursor = frame < animationFrames && frame % 20 < 10;\n      \n      return (\n        React.createElement('div', { style: { textAlign: \"center\" },}\n          , textLines.map((line, lineIndex) => {\n            const lineStart = textLines.slice(0, lineIndex).join(\" \").length + (lineIndex > 0 ? lineIndex : 0);\n            const lineEnd = lineStart + line.length;\n            const lineCharsToShow = Math.max(0, Math.min(line.length, charsToShow - lineStart));\n            \n            return (\n              React.createElement('div', { key: lineIndex, style: { minHeight: \"1.2em\" },}\n                , line.substring(0, lineCharsToShow)\n                , lineCharsToShow < line.length && lineCharsToShow > 0 && showCursor && (\n                  React.createElement('span', { style: { opacity: 1 },}, \"|\")\n                )\n              )\n            );\n          })\n        )\n      );\n    }\n\n    // For other animation types, render each line separately with dynamic timing\n    return (\n      React.createElement('div', { style: { textAlign: \"center\" },}\n        , textLines.map((line, lineIndex) => {\n          const lineWords = line.split(\" \");\n          \n          return (\n            React.createElement('div', { key: lineIndex, style: { minHeight: \"1.2em\", marginBottom: isMultiLine ? \"0.2em\" : \"0\" },}\n              , lineWords.map((word, wordIndex) => {\n                const globalWordIndex = textLines.slice(0, lineIndex).reduce((acc, prevLine) => acc + prevLine.split(\" \").length, 0) + wordIndex;\n                const totalWords = text.split(\" \").length;\n                \n                // Dynamic word timing based on animation frames\n                const wordDelay = (animationFrames * 0.7) / totalWords; // Spread words across 70% of animation time\n                \n                switch (animationType) {\n                  case 0: // Slide from right\n                    const wordStart = globalWordIndex * wordDelay;\n                    const wordOpacity = interpolate(\n                      frame,\n                      [wordStart, wordStart + revealDuration],\n                      [0, 1],\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    );\n                    const wordX = interpolate(\n                      frame,\n                      [wordStart, wordStart + revealDuration],\n                      [50, 0],\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    );\n                    \n                    return (\n                      React.createElement('span', {\n                        key: wordIndex,\n                        style: {\n                          opacity: wordOpacity,\n                          transform: `translateX(${wordX}px)`,\n                          marginRight: \"0.3em\",\n                          display: \"inline-block\"\n                        },}\n\n                        , word\n                      )\n                    );\n\n                  case 1: // Cascade from left\n                    const cascadeStart = globalWordIndex * wordDelay;\n                    const cascadeOpacity = interpolate(\n                      frame,\n                      [cascadeStart, cascadeStart + revealDuration],\n                      [0, 1],\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    );\n                    const wordY = interpolate(\n                      frame,\n                      [cascadeStart, cascadeStart + revealDuration],\n                      [-30, 0],\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    );\n                    \n                    return (\n                      React.createElement('span', {\n                        key: wordIndex,\n                        style: {\n                          opacity: cascadeOpacity,\n                          transform: `translateY(${wordY}px)`,\n                          marginRight: \"0.3em\",\n                          display: \"inline-block\"\n                        },}\n\n                        , word\n                      )\n                    );\n\n                  case 2: // Scale reveal\n                    const scaleStart = globalWordIndex * wordDelay;\n                    const scaleOpacity = interpolate(\n                      frame,\n                      [scaleStart, scaleStart + revealDuration],\n                      [0, 1],\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    );\n                    const wordScale = interpolate(\n                      frame,\n                      [scaleStart, scaleStart + revealDuration],\n                      [0.3, 1],\n                      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n                    );\n                    \n                    return (\n                      React.createElement('span', {\n                        key: wordIndex,\n                        style: {\n                          opacity: scaleOpacity,\n                          transform: `scale(${wordScale})`,\n                          marginRight: \"0.3em\",\n                          display: \"inline-block\"\n                        },}\n\n                        , word\n                      )\n                    );\n\n                  default:\n                    return (\n                      React.createElement('span', { key: wordIndex, style: { marginRight: \"0.3em\" },}\n                        , word\n                      )\n                    );\n                }\n              })\n            )\n          );\n        })\n      )\n    );\n  };\n\n  return (\n    React.createElement('div', {\n      style: {\n        fontSize: `${fontSize}px`,\n        fontFamily: \"Inter\",\n        fontWeight: \"700\",\n        color: \"#ffffff\",\n        textAlign: \"center\",\n        lineHeight: \"1.2\",\n        wordSpacing: \"0.05em\",\n        opacity: containerOpacity,\n        maxWidth: \"85%\",\n        padding: \"0 2rem\",\n        wordWrap: \"break-word\",\n        overflowWrap: \"break-word\"\n      },}\n\n      , renderWords()\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.567Z"
  },
  "prompt-ui": {
    "jsCode": "const { AbsoluteFill, interpolate, useCurrentFrame, spring, useVideoConfig } = window.Remotion;\n\nconst SearchBar = ({ opacity }) => {\n  const frame = useCurrentFrame();\n  const { width, height } = useVideoConfig();\n  \n  // Detect format based on aspect ratio\n  const aspectRatio = width / height;\n  const isPortrait = aspectRatio < 1;\n  const isSquare = Math.abs(aspectRatio - 1) < 0.1;\n  const isLandscape = aspectRatio > 1.5;\n  \n  // Adaptive sizing based on format\n  const boxWidth = isPortrait ? width * 0.99 : isSquare ? width * 0.8 : width * 0.83;\n  const fontSize = isPortrait ? width * 0.045 : isSquare ? width * 0.05 : width * 0.034;\n  const iconSize = isPortrait ? width * 0.06 : isSquare ? width * 0.065 : width * 0.037;\n  const padding = isPortrait ? width * 0.04 : width * 0.025;\n  const borderRadius = width * 0.026;\n  \n  // Adaptive text based on format\n  const line1 = isPortrait ? \"Start creating by adding\" : \"Start creating by adding a detailed prompt\";\n  const line2 = isPortrait ? \"a prompt and image.\" : \"and uploading an image.\";\n  \n  const line1CharCount = Math.floor(\n    interpolate(\n      frame,\n      [30, 90],\n      [0, line1.length],\n      { extrapolateLeft: \"clamp\" }\n    )\n  );\n  \n  const line2CharCount = Math.floor(\n    interpolate(\n      frame,\n      [90, 150],\n      [0, line2.length],\n      { extrapolateLeft: \"clamp\" }\n    )\n  );\n  \n  const cursorVisible = Math.floor(frame / 15) % 2 === 0;\n  const showLine2 = frame >= 90;\n  const showCursorOnLine2 = frame >= 90 && frame <= 150;\n  const iconProgress = 1;\n  const boxHeight = isPortrait \n    ? (showLine2 ? height * 0.3 : height * 0.25)\n    : (showLine2 ? height * 0.37 : height * 0.3);\n\n  return (\n    React.createElement(React.Fragment, null\n      , React.createElement('div', {\n        style: {\n          width: boxWidth,\n          height: boxHeight,\n          background: \"#F5F5F5\",\n          borderRadius: borderRadius,\n          padding: padding,\n          opacity,\n          boxShadow: \"0 8px 64px rgba(0, 0, 0, 0.1)\",\n          position: \"relative\",\n          transition: \"height 0.3s ease\",\n        },}\n\n        , React.createElement('div', {\n          style: {\n            fontSize: fontSize,\n            fontFamily: \"Inter, sans-serif\",\n            color: \"#000000\",\n            opacity: 0.8,\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: fontSize * 0.12,\n            marginBottom: padding * 0.83,\n            zIndex: 1,\n            position: \"relative\",\n          },}\n\n          , React.createElement('div', { style: { display: \"flex\", alignItems: \"center\" },}\n            , line1.slice(0, line1CharCount)\n            , cursorVisible && frame <= 90 && (\n              React.createElement('span', {\n                style: {\n                  width: fontSize * 0.1,\n                  height: fontSize * 0.74,\n                  background: \"#000000\",\n                  display: \"inline-block\",\n                  marginLeft: fontSize * 0.06,\n                },}\n              )\n            )\n          )\n          , showLine2 && (\n            React.createElement('div', { style: { display: \"flex\", alignItems: \"center\" },}\n              , line2.slice(0, line2CharCount)\n              , cursorVisible && showCursorOnLine2 && (\n                React.createElement('span', {\n                  style: {\n                    width: fontSize * 0.1,\n                    height: fontSize * 0.74,\n                    background: \"#000000\",\n                    display: \"inline-block\",\n                    marginLeft: fontSize * 0.06,\n                  },}\n                )\n              )\n            )\n          )\n        )\n\n        , React.createElement('div', {\n          style: {\n            position: \"absolute\",\n            bottom: padding * 0.83,\n            left: padding,\n            display: \"flex\",\n            gap: iconSize * 0.44,\n            alignItems: \"center\",\n            opacity: iconProgress,\n            zIndex: 2,\n          },}\n\n          , React.createElement('div', {\n            style: {\n              fontSize: iconSize,\n              color: \"#666666\",\n              cursor: \"pointer\",\n              width: iconSize,\n              height: iconSize,\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              borderRadius: iconSize * 0.17,\n            },}\n\n            , React.createElement(window.IconifyIcon, {\n              icon: \"akar-icons:image\",\n              style: {\n                fontSize: iconSize,\n                color: \"#666666\",\n              },}\n            )\n          )\n          , React.createElement('div', {\n            style: {\n              fontSize: iconSize,\n              color: \"#666666\",\n              cursor: \"pointer\",\n              width: iconSize,\n              height: iconSize,\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              borderRadius: iconSize * 0.17,\n            },}\n\n            , React.createElement(window.IconifyIcon, {\n              icon: \"material-symbols:mic-outline\",\n              style: {\n                fontSize: iconSize,\n                color: \"#666666\",\n              },}\n            )\n          )\n        )\n\n        , React.createElement('div', {\n          style: {\n            position: \"absolute\",\n            bottom: padding * 0.83,\n            right: padding,\n            opacity: iconProgress,\n          },}\n\n          , React.createElement('div', {\n            style: {\n              width: iconSize * 1.67,\n              height: iconSize * 1.67,\n              borderRadius: \"50%\",\n              background: \"#333333\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              cursor: \"pointer\",\n            },}\n\n            , React.createElement(window.IconifyIcon, {\n              icon: \"quill:send\",\n              style: {\n                fontSize: iconSize * 0.83,\n                color: \"#FFFFFF\",\n              },}\n            )\n          )\n        )\n      )\n    )\n  );\n};\n\nfunction PromptUI() {\n  const frame = useCurrentFrame();\n  \n  const mainProgress = spring({\n    frame: frame > 5 ? frame : 0,\n    fps: 30,\n    config: {\n      damping: 20,\n      stiffness: 80,\n    },\n  });\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: \"#FFFFFF\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      },}\n\n      , React.createElement(SearchBar, { opacity: mainProgress,} )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.570Z"
  },
  "today-1-percent": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring } = window.Remotion;\n\nfunction Today1Percent() {\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  // Grid configuration - centered on canvas with extra columns\n  const gridCols = 10; // Increased from 8 to 10 (2 extra columns)\n  const gridRows = 6;\n  const spacing = 200;\n  \n  // Center the grid on the canvas based on the focus circle position\n  const focusCircleX = width / 2;\n  const focusCircleY = height / 2;\n  \n  // Calculate grid start position so focus circle aligns with grid center\n  const gridCenterCol = Math.floor(gridCols / 2);\n  const gridCenterRow = Math.floor(gridRows / 2);\n  const startX = focusCircleX - (gridCenterCol * spacing);\n  const startY = focusCircleY - (gridCenterRow * spacing);\n\n  // Base color palette - similar but with slight variations\n  const baseColors = [\n    { h1: 285, h2: 30, s1: 78, s2: 82, l1: 58, l2: 62 }, // Purple-orange\n    { h1: 290, h2: 25, s1: 75, s2: 85, l1: 60, l2: 58 }, // Magenta-orange\n    { h1: 280, h2: 35, s1: 80, s2: 80, l1: 57, l2: 63 }, // Violet-orange\n    { h1: 295, h2: 20, s1: 77, s2: 88, l1: 59, l2: 61 }, // Pink-red\n    { h1: 275, h2: 40, s1: 82, s2: 78, l1: 61, l2: 59 }, // Blue-purple-yellow\n    { h1: 300, h2: 15, s1: 76, s2: 84, l1: 58, l2: 64 }, // Magenta-red\n  ];\n\n  // Generate animated gradients for each circle with color variations\n  const generateAnimatedGradient = (index) => {\n    // Select base color with some variation\n    const colorIndex = index % baseColors.length;\n    const baseColor = baseColors[colorIndex];\n    \n    // Add slight random variations to each circle\n    const hueVariation1 = (index * 3) % 15 - 7; // ±7 degrees\n    const hueVariation2 = (index * 5) % 12 - 6; // ±6 degrees\n    const satVariation1 = (index * 2) % 8 - 4; // ±4%\n    const satVariation2 = (index * 4) % 6 - 3; // ±3%\n    const lightVariation1 = (index * 1) % 6 - 3; // ±3%\n    const lightVariation2 = (index * 7) % 4 - 2; // ±2%\n    \n    // Animate hue with variations - twice as fast\n    const hue1 = interpolate(\n      frame,\n      [0, 45], // Half the original duration (90 -> 45)\n      [baseColor.h1 + hueVariation1, baseColor.h1 + hueVariation1 + 10],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n    );\n    \n    const hue2 = interpolate(\n      frame,\n      [0, 45], // Half the original duration (90 -> 45)\n      [baseColor.h2 + hueVariation2, baseColor.h2 + hueVariation2 + 8],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n    );\n    \n    // Animate saturation with variations - twice as fast\n    const sat1 = interpolate(\n      frame,\n      [0, 45], // Half the original duration (90 -> 45)\n      [baseColor.s1 + satVariation1, baseColor.s1 + satVariation1 + 5],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n    );\n    \n    const sat2 = interpolate(\n      frame,\n      [0, 45], // Half the original duration (90 -> 45)\n      [baseColor.s2 + satVariation2, baseColor.s2 + satVariation2 + 3],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n    );\n    \n    // Animate lightness with variations - twice as fast\n    const light1 = interpolate(\n      frame,\n      [0, 45], // Half the original duration (90 -> 45)\n      [baseColor.l1 + lightVariation1, baseColor.l1 + lightVariation1 + 4],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n    );\n    \n    const light2 = interpolate(\n      frame,\n      [0, 45], // Half the original duration (90 -> 45)\n      [baseColor.l2 + lightVariation2, baseColor.l2 + lightVariation2 + 3],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n    );\n    \n    // Animate gradient angle with slight variations - twice as fast\n    const angleVariation = (index * 11) % 20 - 10; // ±10 degrees\n    const angle = interpolate(\n      frame,\n      [0, 45], // Half the original duration (90 -> 45)\n      [135 + angleVariation, 135 + angleVariation + 15],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n    );\n    \n    return `linear-gradient(${angle}deg, hsl(${hue1}, ${sat1}%, ${light1}%), hsl(${hue2}, ${sat2}%, ${light2}%), transparent)`;\n  };\n\n  // Generate circles in a perfect grid pattern\n  const circles = [];\n  for (let row = 0; row < gridRows; row++) {\n    for (let col = 0; col < gridCols; col++) {\n      // Skip the center position for the focus circle\n      if (row === gridCenterRow && col === gridCenterCol) {\n        continue;\n      }\n      \n      circles.push({\n        x: startX + col * spacing,\n        y: startY + row * spacing,\n        index: row * gridCols + col\n      });\n    }\n  }\n\n  // Focus circle - positioned at exact center of screen\n  const focusCircle = { \n    x: focusCircleX, \n    y: focusCircleY\n  };\n  \n  // Generate animated gradient for focus circle - twice as fast\n  const focusGradient = (() => {\n    const hue1 = interpolate(\n      frame,\n      [0, 45], // Half the original duration (90 -> 45)\n      [280, 310],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n    );\n    \n    const hue2 = interpolate(\n      frame,\n      [0, 45], // Half the original duration (90 -> 45)\n      [25, 35],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n    );\n    \n    const angle = interpolate(\n      frame,\n      [0, 45], // Half the original duration (90 -> 45)\n      [125, 145],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n    );\n    \n    return `linear-gradient(${angle}deg, hsl(${hue1}, 80%, 60%), hsl(${hue2}, 85%, 62%))`;\n  })();\n  \n  // Get animated colors for icon\n  const iconColor1 = (() => {\n    const hue1 = interpolate(\n      frame,\n      [0, 45],\n      [280, 310],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }\n    );\n    return `hsl(${hue1}, 80%, 60%)`;\n  })();\n  \n  // Zoom animation - twice as fast, immediate after fade in\n  const zoomScale = interpolate(\n    frame,\n    [15, 30], // Half the original duration (30-60 -> 15-30)\n    [1, 3],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: (t) => 1 - Math.pow(1 - t, 3) // ease-out cubic\n    }\n  );\n\n  // Text opacity - starts fading in when zoom begins\n  const textOpacity = interpolate(\n    frame,\n    [15, 45], // Changed from [30, 60] to [15, 45] to start with zoom\n    [0, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  // Other circles fade out after frame 60 (2 seconds at 30fps)\n  const otherCirclesOpacity = interpolate(\n    frame,\n    [60, 75], // Quick fade out over 15 frames (0.5 seconds)\n    [1, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  // Icon opacity - fades in during transition (overlapping with hello fade out)\n  const iconOpacity = interpolate(\n    frame,\n    [60, 75], // Changed from [75, 90] to [60, 75] to overlap with hello fade out\n    [0, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  // Today text opacity - disappears when circle becomes transparent (when icon appears)\n  const todayOpacity = interpolate(\n    frame,\n    [60, 75], // Same timing as when the circle becomes transparent\n    [1, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  // New text animations - \"Less than 1%\" and \"of the world\" - now appear with icon\n  const leftTextOpacity = interpolate(\n    frame,\n    [60, 75], // Changed from [90, 105] to match icon timing\n    [0, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const rightTextOpacity = interpolate(\n    frame,\n    [60, 75], // Changed from [105, 120] to match icon timing\n    [0, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  // Text slide-in animations - now synchronized with icon\n  const leftTextX = interpolate(\n    frame,\n    [60, 75], // Changed from [90, 105] to match icon timing\n    [-50, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: (t) => 1 - Math.pow(1 - t, 3) // ease-out cubic\n    }\n  );\n\n  const rightTextX = interpolate(\n    frame,\n    [60, 75], // Changed from [105, 120] to match icon timing\n    [50, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: (t) => 1 - Math.pow(1 - t, 3) // ease-out cubic\n    }\n  );\n\n  // Define text spacing and icon size for positioning\n  const textSpacing = 250; // Space between text and center\n  const iconSize = 100; // Size of the world icon\n\n  return (\n    React.createElement(AbsoluteFill, { style: {\n      background: 'linear-gradient(135deg, #F8F9FA, #E5E7EB)',\n      overflow: 'hidden'\n    },}\n      , React.createElement('div', { style: {\n        transform: `scale(${zoomScale})`,\n        transformOrigin: `${focusCircle.x}px ${focusCircle.y}px`,\n        width: '100%',\n        height: '100%',\n        position: 'relative'\n      },}\n        , circles.map((circle, index) => {\n          const scale = spring({\n            frame: frame,\n            fps,\n            config: {\n              damping: 15,\n              stiffness: 200,\n              mass: 1\n            }\n          });\n\n          const opacity = interpolate(\n            frame,\n            [0, 5], // Half the original duration (10 -> 5)\n            [0, 1],\n            {\n              extrapolateLeft: 'clamp',\n              extrapolateRight: 'clamp'\n            }\n          );\n\n          return (\n            React.createElement('div', {\n              key: index,\n              style: {\n                position: 'absolute',\n                left: `${circle.x}px`,\n                top: `${circle.y}px`,\n                width: '120px',\n                height: '120px',\n                borderRadius: '50%',\n                background: generateAnimatedGradient(circle.index),\n                transform: `translate(-50%, -50%) scale(${scale})`,\n                opacity: opacity * otherCirclesOpacity,\n                filter: 'blur(0.5px)'\n              },}\n            )\n          );\n        })\n\n        /* Focus circle - now positioned at exact center of screen */\n        , React.createElement('div', {\n          style: {\n            position: 'absolute',\n            left: `${focusCircle.x}px`,\n            top: `${focusCircle.y}px`,\n            width: '120px',\n            height: '120px',\n            borderRadius: '50%',\n            background: iconOpacity > 0 ? 'transparent' : focusGradient, // Transparent when icon is visible\n            transform: `translate(-50%, -50%)`,\n            opacity: interpolate(\n              frame,\n              [0, 5], // Half the original duration (10 -> 5)\n              [0, 1],\n              {\n                extrapolateLeft: 'clamp',\n                extrapolateRight: 'clamp'\n              }\n            ),\n            filter: 'blur(0.5px)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          },}\n\n          /* Today text with opacity transition - now tied to circle transparency */\n          , React.createElement('span', { style: {\n            color: 'white',\n            fontSize: '32px',\n            fontWeight: '600',\n            fontFamily: 'Arial, sans-serif',\n            opacity: textOpacity * todayOpacity,\n            textShadow: '0 2px 4px rgba(0,0,0,0.3)',\n            position: 'absolute'\n          },}, \"Today\"\n\n          )\n\n          /* World icon with solid color instead of gradient */\n          , React.createElement('div', { style: {\n            opacity: iconOpacity,\n            position: 'absolute'\n          },}\n            , React.createElement(window.IconifyIcon, { \n              icon: \"mdi:earth\", \n              style: {\n                fontSize: '100px',\n                color: iconColor1,\n                filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.3))'\n              },}\n            )\n          )\n        )\n      )\n\n      /* Left text: \"Less than 1%\" */\n      , React.createElement('div', { style: {\n        position: 'absolute',\n        left: `${width / 2 - 850}px`,\n        top: `${height / 2}px`,\n        transform: `translate(${leftTextX}px, -50%)`,\n        opacity: leftTextOpacity,\n        fontSize: '100px',\n        fontWeight: '700',\n        fontFamily: 'Arial, sans-serif',\n        color: '#2D3748',\n        textShadow: '0 2px 4px rgba(0,0,0,0.1)',\n        whiteSpace: 'nowrap'\n      },}, \"Less than 1%\"\n\n      )\n\n      /* Right text: \"of the world\" */\n      , React.createElement('div', { style: {\n        position: 'absolute',\n        left: `${width / 2 + 200}px`,\n        top: `${height / 2}px`,\n        transform: `translate(${rightTextX}px, -50%)`,\n        opacity: rightTextOpacity,\n        fontSize: '100px',\n        fontWeight: '700',\n        fontFamily: 'Arial, sans-serif',\n        color: '#2D3748',\n        textShadow: '0 2px 4px rgba(0,0,0,0.1)',\n        whiteSpace: 'nowrap'\n      },}, \"of the world\"\n\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.573Z"
  },
  "app-download": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nfunction AppDownload() {\n  window.RemotionGoogleFonts.loadFont(\"Inter\", { weights: [\"500\", \"600\"] });\n  \n  const frame = useCurrentFrame();\n  const { width, height } = useVideoConfig();\n  \n  const radius = 280;\n  const circumference = 2 * Math.PI * radius;\n  \n  const progress = interpolate(frame, [0, 180], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\"\n  });\n  \n  const strokeDashoffset = circumference * (1 - progress);\n  \n  const labelOpacity = interpolate(frame, [0, 45], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\"\n  });\n  \n  const labelY = interpolate(frame, [0, 45], [20, 0], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\"\n  });\n\n  return (\n    React.createElement(AbsoluteFill, { style: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      fontFamily: \"Inter\",\n      position: \"relative\"\n    },}\n\n      , React.createElement('div', { style: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        background: \"linear-gradient(135deg, #2a2a2a 0%, #3d8a4d 100%)\",\n        zIndex: 0\n      },} )\n\n      , React.createElement('div', { style: {\n        position: \"relative\",\n        zIndex: 2,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        gap: \"50px\"\n      },}\n\n        , React.createElement('div', { style: {\n          position: \"relative\",\n          width: \"560px\",\n          height: \"560px\"\n        },}\n\n          , React.createElement('svg', { style: {\n            position: \"absolute\",\n            top: \"0\",\n            left: \"0\",\n            width: \"560px\",\n            height: \"560px\",\n            pointerEvents: \"none\"\n          },}\n            , React.createElement('defs', null\n              , React.createElement('mask', { id: \"circularMask\",}\n                , React.createElement('rect', { width: \"560\", height: \"560\", fill: \"black\",} )\n                , React.createElement('circle', {\n                  cx: \"280\",\n                  cy: \"280\",\n                  r: radius,\n                  fill: \"none\",\n                  stroke: \"white\",\n                  strokeWidth: \"560\",\n                  strokeDasharray: circumference,\n                  strokeDashoffset: strokeDashoffset,\n                  transform: \"rotate(-90 280 280)\"  ,}\n                )\n              )\n            )\n          )\n\n          , React.createElement('div', { style: {\n            position: \"absolute\",\n            top: \"0\",\n            left: \"0\",\n            width: \"560px\",\n            height: \"560px\",\n            borderRadius: \"120px\",\n            background: \"#25D366\",\n            opacity: \"0.3\",\n            filter: \"grayscale(0.5)\"\n          },}\n            , React.createElement(window.IconifyIcon, { \n              icon: \"logos:whatsapp-icon\", \n              style: {\n                fontSize: \"420px\",\n                position: \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                transform: \"translate(-50%, -50%)\",\n                color: \"white\"\n              },} \n            )\n          )\n\n          , React.createElement('div', { style: {\n            position: \"absolute\",\n            top: \"0\",\n            left: \"0\",\n            width: \"560px\",\n            height: \"560px\",\n            borderRadius: \"120px\",\n            background: \"#25D366\",\n            mask: \"url(#circularMask)\",\n            WebkitMask: \"url(#circularMask)\"\n          },}\n            , React.createElement(window.IconifyIcon, { \n              icon: \"logos:whatsapp-icon\", \n              style: {\n                fontSize: \"420px\",\n                position: \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                transform: \"translate(-50%, -50%)\",\n                color: \"white\"\n              },} \n            )\n          )\n        )\n\n        , React.createElement('div', { style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"20px\",\n          opacity: labelOpacity,\n          transform: `translateY(${labelY}px)`\n        },}\n          , React.createElement(window.IconifyIcon, { \n            icon: \"heroicons:cloud-arrow-down-20-solid\", \n            style: {\n              fontSize: \"42px\",\n              color: \"white\"\n            },} \n          )\n          , React.createElement('span', { style: {\n            fontSize: \"36px\",\n            fontWeight: \"600\",\n            color: \"white\",\n            textShadow: \"0 3px 6px rgba(0,0,0,0.5)\"\n          },}, \"WhatsApp\"\n\n          )\n        )\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.575Z"
  },
  "audio-animation": {
    "jsCode": "const {\n  AbsoluteFill,\n  interpolate,\n  useCurrentFrame,\n  spring,\n} = window.Remotion;\n\nconst Square = () => {\n  const frame = useCurrentFrame();\n  \n  // Continuous rotation animation\n  const rotation = frame * 2;\n\n  return (\n    React.createElement('div', {\n      style: {\n        width: \"160px\",\n        height: \"160px\",\n        background: \"black\",\n        borderRadius: \"15px\",\n        transform: `rotate(${rotation}deg)`,\n      },}\n    )\n  );\n};\n\nconst Soundwaves = () => {\n  const frame = useCurrentFrame();\n  \n  // Generate bars with more realistic wave patterns\n  const bars = Array.from({ length: 40 }, (_, i) => {\n    // Combine multiple sine waves for more natural movement\n    const wave1 = Math.sin((frame + i * 8) / 10) * 40;\n    const wave2 = Math.sin((frame + i * 12) / 15) * 30;\n    const wave3 = Math.sin((frame + i * 5) / 8) * 20;\n    \n    // Add random pauses\n    const pause = Math.sin(frame / 30 + i) < -0.7 ? 0.2 : 1;\n    \n    const height = Math.abs((wave1 + wave2 + wave3) * pause);\n\n    return (\n      React.createElement('div', {\n        key: i,\n        style: {\n          width: \"8px\",\n          height: `${height}px`,\n          background: \"black\",\n          borderRadius: \"4px\",\n        },}\n      )\n    );\n  });\n\n  return (\n    React.createElement('div', {\n      style: {\n        display: \"flex\",\n        gap: \"6px\",\n        alignItems: \"center\",\n        height: \"160px\",\n        width: \"600px\",\n      },}\n\n      , bars\n    )\n  );\n};\n\nconst Counter = () => {\n  const frame = useCurrentFrame();\n  \n  // Calculate minutes and seconds\n  const totalSeconds = Math.floor(frame / 30); // 30 fps\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n  \n  // Format time as MM:SS\n  const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n\n  return (\n    React.createElement('div', {\n      style: {\n        fontSize: \"64px\",\n        fontFamily: \"Inter, sans-serif\",\n        fontWeight: 700,\n        color: \"black\",\n      },}\n\n      , timeString\n    )\n  );\n};\n\nfunction AudioAnimation() {\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: \"white\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: \"32px\",\n      },}\n\n      , React.createElement(Square, null )\n      , React.createElement(Soundwaves, null )\n      , React.createElement(Counter, null )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.575Z"
  },
  "gradient-text": {
    "jsCode": "const {\nAbsoluteFill,\nuseCurrentFrame,\nuseVideoConfig,\ninterpolate,\n} = window.Remotion;\n\nfunction GradientText() {\nconst frame = useCurrentFrame();\nconst { fps, width, height } = useVideoConfig();\n\n// Format detection for responsive sizing\nconst aspectRatio = width / height;\nconst isPortrait = aspectRatio < 1;\nconst isSquare = Math.abs(aspectRatio - 1) < 0.2;\n\n// Responsive sizing\nconst svgWidth = Math.min(width * 0.9, isPortrait ? width * 0.95 : 1400);\nconst svgHeight = isPortrait ? height * 0.4 : 200;\nconst baseFontSize = Math.min(svgWidth, svgHeight) * 0.2;\nconst fontSize = isPortrait ? baseFontSize * 0.8 : baseFontSize;\n\nconst loopDuration = fps * 2;\nconst hueBase = (frame % loopDuration) * (360 / loopDuration);\nconst getHue = (offset) => `hsl(${(hueBase + offset) % 360}, 100%, 60%)`;\n\n// Split text into words for portrait animation\nconst words = \"Design without Limits\".split(\" \");\n\nif (isPortrait) {\n  // Use word-by-word animation for portrait like dark-bg-gradient-text\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        backgroundColor: \"#ffffff\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        padding: \"40px\"\n      },}\n\n      , React.createElement('div', {\n        style: {\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: \"translate(-50%, -50%)\",\n          fontSize: `${fontSize}px`,\n          fontFamily: \"Inter, sans-serif\",\n          fontWeight: \"700\",\n          textAlign: \"center\",\n          display: \"flex\",\n          gap: \"0.4em\",\n          flexDirection: \"row\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          lineHeight: 1.2,\n          maxWidth: \"90%\"\n        },}\n\n        , words.map((word, index) => {\n          // Stagger each word by 10 frames\n          const wordStartFrame = index * 10;\n          const wordEndFrame = wordStartFrame + 20;\n          \n          // Slide up animation for each word\n          const wordY = interpolate(\n            frame,\n            [wordStartFrame, wordEndFrame],\n            [50, 0],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\"\n            }\n          );\n          \n          // Opacity animation for each word\n          const wordOpacity = interpolate(\n            frame,\n            [wordStartFrame, wordEndFrame],\n            [0, 1],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\"\n            }\n          );\n          \n          // Generate gradient for middle word\n          const gradientStyle = index === 1 ? {\n            background: `linear-gradient(90deg, ${getHue(0)} 0%, ${getHue(60)} 20%, ${getHue(120)} 40%, ${getHue(180)} 60%, ${getHue(240)} 80%, ${getHue(300)} 100%)`,\n            backgroundClip: \"text\",\n            WebkitBackgroundClip: \"text\",\n            color: \"transparent\",\n            WebkitTextFillColor: \"transparent\"\n          } : { color: \"#000\" };\n          \n          return (\n            React.createElement('div', {\n              key: index,\n              style: {\n                position: \"relative\",\n                transform: `translateY(${wordY}px)`,\n                opacity: wordOpacity,\n                ...gradientStyle\n              },}\n\n              , word\n            )\n          );\n        })\n      )\n    )\n  );\n}\n\nreturn (\n  React.createElement(AbsoluteFill, {\n    style: {\n      backgroundColor: \"#ffffff\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      display: \"flex\",\n    },}\n\n    , React.createElement('svg', { \n      width: svgWidth, \n      height: svgHeight, \n      viewBox: `0 0 ${svgWidth} ${svgHeight}`,\n      style: { maxWidth: '90%', height: 'auto' },}\n\n      , React.createElement('defs', null\n        , React.createElement('linearGradient', { id: \"text-gradient\", x1: \"0%\", y1: \"0%\", x2: \"100%\", y2: \"0%\",}\n          , React.createElement('stop', { offset: \"0%\", stopColor: getHue(0),} )\n          , React.createElement('stop', { offset: \"20%\", stopColor: getHue(60),} )\n          , React.createElement('stop', { offset: \"40%\", stopColor: getHue(120),} )\n          , React.createElement('stop', { offset: \"60%\", stopColor: getHue(180),} )\n          , React.createElement('stop', { offset: \"80%\", stopColor: getHue(240),} )\n          , React.createElement('stop', { offset: \"100%\", stopColor: getHue(300),} )\n        )\n      )\n\n      , React.createElement('text', {\n        x: svgWidth * 0.15,\n        y: svgHeight * 0.65,\n        fill: \"#000\",\n        fontFamily: \"Inter, sans-serif\" ,\n        fontWeight: \"700\",\n        fontSize: fontSize,\n        textAnchor: \"middle\",}\n, \"Design\"\n\n      )\n\n      , React.createElement('text', {\n        x: svgWidth * 0.5,\n        y: svgHeight * 0.65,\n        fill: \"url(#text-gradient)\",\n        fontFamily: \"Inter, sans-serif\" ,\n        fontWeight: \"700\",\n        fontSize: fontSize,\n        textAnchor: \"middle\",}\n, \"without\"\n\n      )\n\n      , React.createElement('text', {\n        x: svgWidth * 0.85,\n        y: svgHeight * 0.65,\n        fill: \"#000\",\n        fontFamily: \"Inter, sans-serif\" ,\n        fontWeight: \"700\",\n        fontSize: fontSize,\n        textAnchor: \"middle\",}\n, \"Limits\"\n\n      )\n    )\n  )\n);\n}",
    "compiledAt": "2025-09-03T19:32:29.576Z"
  },
  "dark-bg-gradient-text": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nfunction DarkBGGradientText() {\n  window.RemotionGoogleFonts.loadFont(\"Inter\", { weights: [\"800\"] });\n  \n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  // Format detection for responsive sizing\n  const aspectRatio = width / height;\n  const isPortrait = aspectRatio < 1;\n  const isSquare = Math.abs(aspectRatio - 1) < 0.2;\n  \n  // Responsive font sizing\n  const baseFontSize = Math.min(width, height) * 0.12;\n  const fontSize = isPortrait ? baseFontSize * 0.8 : isSquare ? baseFontSize * 0.9 : baseFontSize;\n  \n  const gradientPosition = interpolate(\n    frame,\n    [0, fps * 4],\n    [-width, width * 2],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n  \n  const textScale = interpolate(\n    frame,\n    [0, 8],\n    [0.8, 1],\n    {\n      extrapolateLeft: \"clamp\",\n      extrapolateRight: \"clamp\"\n    }\n  );\n  \n  // Split text into words for individual animation\n  const words = \"Welcome to Bazaar\".split(\" \");\n  \n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: \"black\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        padding: \"40px\"\n      },}\n\n      , React.createElement('div', {\n        style: {\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: `translate(-50%, -50%) scale(${textScale})`,\n          fontSize: `${fontSize}px`,\n          fontFamily: \"Inter\",\n          fontWeight: \"800\",\n          textAlign: \"center\",\n          whiteSpace: isPortrait ? \"normal\" : \"nowrap\",\n          display: \"flex\",\n          gap: \"0.3em\",\n          flexDirection: isPortrait ? \"column\" : \"row\",\n          lineHeight: 1.1\n        },}\n\n        , words.map((word, index) => {\n          // Stagger each word by 8 frames (faster)\n          const wordStartFrame = index * 8;\n          const wordEndFrame = wordStartFrame + 15;\n          \n          // Slide up animation for each word\n          const wordY = interpolate(\n            frame,\n            [wordStartFrame, wordEndFrame],\n            [100, 0],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\"\n            }\n          );\n          \n          // Opacity animation for each word\n          const wordOpacity = interpolate(\n            frame,\n            [wordStartFrame, wordEndFrame],\n            [0, 1],\n            {\n              extrapolateLeft: \"clamp\",\n              extrapolateRight: \"clamp\"\n            }\n          );\n          \n          return (\n            React.createElement('div', {\n              key: index,\n              style: {\n                position: \"relative\",\n                transform: `translateY(${wordY}px)`,\n                opacity: wordOpacity\n              },}\n\n              , React.createElement('div', {\n                style: {\n                  color: index < 2 ? \"white\" : \"transparent\",\n                  userSelect: \"none\"\n                },}\n\n                , word\n              )\n\n              , index === 2 && (\n                React.createElement('div', {\n                  style: {\n                    position: \"absolute\",\n                    top: \"0\",\n                    left: \"0\",\n                    width: \"100%\",\n                    height: \"100%\",\n                    background: `linear-gradient(90deg, #ff5f6d 0%, #ffc371 25%, #a18cd1 50%, #fbc2eb 75%, #ff5f6d 100%) ${gradientPosition}px 0 / ${width * 2}px 100%`,\n                    backgroundClip: \"text\",\n                    WebkitBackgroundClip: \"text\",\n                    color: \"transparent\",\n                    WebkitTextFillColor: \"transparent\"\n                  },}\n\n                  , word\n                )\n              )\n            )\n          );\n        })\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.577Z"
  },
  "keyboard": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, interpolate, useVideoConfig } = window.Remotion;\n\nfunction Keyboard() {\n  window.RemotionGoogleFonts.loadFont(\"Inter\", { weights: [\"400\", \"500\"] });\n  \n  const frame = useCurrentFrame();\n  const { width, height } = useVideoConfig();\n\n  // Format detection for responsive sizing\n  const aspectRatio = width / height;\n  const isPortrait = aspectRatio < 1;\n  const isSquare = Math.abs(aspectRatio - 1) < 0.2;\n  \n  // Responsive scaling for different formats\n  const keyboardScale = isPortrait ? 0.6 : isSquare ? 0.8 : 1.0;\n\n  const script = [\n    { type: 'keyboard', frames: 30 },\n    { type: 'key-A', frames: 12 },\n    { type: 'key-n', frames: 12 },\n    { type: 'key-i', frames: 12 },\n    { type: 'key-m', frames: 12 },\n    { type: 'key-a', frames: 12 },\n    { type: 'key-t', frames: 12 },\n    { type: 'key-e', frames: 12 },\n    { type: 'key-d', frames: 12 },\n    { type: 'key-space', frames: 12 },\n    { type: 'key-K', frames: 12 },\n    { type: 'key-e2', frames: 12 },\n    { type: 'key-y', frames: 12 },\n    { type: 'key-b', frames: 12 },\n    { type: 'key-o', frames: 12 },\n    { type: 'key-a2', frames: 12 },\n    { type: 'key-r', frames: 12 },\n    { type: 'key-d2', frames: 12 }\n  ];\n\n  let accumulatedFrames = 0;\n  const sequences = [];\n\n  script.forEach((item) => {\n    sequences.push({\n      ...item,\n      start: accumulatedFrames,\n      end: accumulatedFrames + item.frames\n    });\n    accumulatedFrames += item.frames;\n  });\n\n  const keyboardOpacity = interpolate(frame, [0, 20], [0, 1], { \n    extrapolateLeft: \"clamp\", \n    extrapolateRight: \"clamp\" \n  });\n\n  const getKeyGlow = (keyFrame) => {\n    const sequence = sequences.find(seq => seq.type === keyFrame);\n    if (!sequence) return { opacity: 0, scale: 1 };\n    \n    const progress = interpolate(frame, [sequence.start, sequence.start + 6, sequence.end - 3, sequence.end], [0, 1, 1, 0], { \n      extrapolateLeft: \"clamp\", \n      extrapolateRight: \"clamp\" \n    });\n    \n    const scale = interpolate(\n      frame, \n      [sequence.start, sequence.start + 3, sequence.end - 2, sequence.end], \n      [1.0, 1.2, 1.2, 1.0], \n      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n    );\n    \n    return { opacity: progress, scale };\n  };\n\n  const keyGlows = {\n    A: getKeyGlow('key-A'),\n    n: getKeyGlow('key-n'),\n    i: getKeyGlow('key-i'),\n    m: getKeyGlow('key-m'),\n    a: getKeyGlow('key-a'),\n    t: getKeyGlow('key-t'),\n    e: getKeyGlow('key-e'),\n    d: getKeyGlow('key-d'),\n    space: getKeyGlow('key-space'),\n    K: getKeyGlow('key-K'),\n    e2: getKeyGlow('key-e2'),\n    y: getKeyGlow('key-y'),\n    b: getKeyGlow('key-b'),\n    o: getKeyGlow('key-o'),\n    a2: getKeyGlow('key-a2'),\n    r: getKeyGlow('key-r'),\n    d2: getKeyGlow('key-d2')\n  };\n\n  const KeyButton = ({ children, style = {}, isActive = false, glowData = { opacity: 0, scale: 1 } }) => (\n    React.createElement('div', { style: {\n      width: \"72px\",\n      height: \"72px\",\n      backgroundColor: \"#f8f9fa\",\n      border: `2px solid ${isActive ? \"#007bff\" : \"#e9ecef\"}`,\n      borderRadius: \"8px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      fontSize: \"21.6px\",\n      fontWeight: \"500\",\n      color: \"#495057\",\n      boxShadow: isActive ? `0 0 20px rgba(0, 123, 255, ${glowData.opacity * 0.6})` : \"0 2px 4px rgba(0,0,0,0.1)\",\n      transform: `scale(${glowData.scale})`,\n      transition: \"all 0.1s ease\",\n      ...style\n    },}\n      , children\n    )\n  );\n\n  const getTypedText = () => {\n    const characterTimings = [\n      { char: 'A', startFrame: 30 },\n      { char: 'n', startFrame: 42 },\n      { char: 'i', startFrame: 54 },\n      { char: 'm', startFrame: 66 },\n      { char: 'a', startFrame: 78 },\n      { char: 't', startFrame: 90 },\n      { char: 'e', startFrame: 102 },\n      { char: 'd', startFrame: 114 },\n      { char: ' ', startFrame: 126 },\n      { char: 'K', startFrame: 138 },\n      { char: 'e', startFrame: 150 },\n      { char: 'y', startFrame: 162 },\n      { char: 'b', startFrame: 174 },\n      { char: 'o', startFrame: 186 },\n      { char: 'a', startFrame: 198 },\n      { char: 'r', startFrame: 210 },\n      { char: 'd', startFrame: 222 }\n    ];\n\n    let result = \"\";\n    for (const timing of characterTimings) {\n      if (frame >= timing.startFrame) {\n        result += timing.char;\n      }\n    }\n    return result;\n  };\n\n  return (\n    React.createElement(AbsoluteFill, { style: { backgroundColor: \"#f5f5f5\" },}\n      , React.createElement('div', { style: {\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: `translate(-50%, -50%) scale(${1.2 * keyboardScale})`,\n        opacity: keyboardOpacity,\n        width: \"98%\",\n        maxWidth: \"1200px\"\n      },}\n        , React.createElement('div', { style: { display: \"flex\", gap: \"9.6px\", marginBottom: \"9.6px\", justifyContent: \"center\" },}\n          , React.createElement(KeyButton, { style: { width: \"96px\" },}, \"esc\")\n          , React.createElement(KeyButton, null\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols:wb-sunny-outline\", style: { fontSize: \"24px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, null\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols:brightness-high\", style: { fontSize: \"24px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, null\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols:tab-outline\", style: { fontSize: \"24px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, null\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols:search\", style: { fontSize: \"24px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, null\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols:mic-outline\", style: { fontSize: \"24px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, null\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols:bedtime-outline\", style: { fontSize: \"24px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, null\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols:fast-rewind\", style: { fontSize: \"24px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, null\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols:pause\", style: { fontSize: \"24px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, null\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols:fast-forward\", style: { fontSize: \"24px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, null\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols:volume-mute\", style: { fontSize: \"24px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, null\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols:volume-down\", style: { fontSize: \"24px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, null\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols:volume-up\", style: { fontSize: \"24px\", color: \"#495057\" },} )\n          )\n        )\n\n        , React.createElement('div', { style: { display: \"flex\", gap: \"9.6px\", marginBottom: \"9.6px\", justifyContent: \"center\" },}\n          , React.createElement(KeyButton, null, \"~\")\n          , React.createElement(KeyButton, null, \"1\")\n          , React.createElement(KeyButton, null, \"2\")\n          , React.createElement(KeyButton, null, \"3\")\n          , React.createElement(KeyButton, null, \"4\")\n          , React.createElement(KeyButton, null, \"5\")\n          , React.createElement(KeyButton, null, \"6\")\n          , React.createElement(KeyButton, null, \"7\")\n          , React.createElement(KeyButton, null, \"8\")\n          , React.createElement(KeyButton, null, \"9\")\n          , React.createElement(KeyButton, null, \"0\")\n          , React.createElement(KeyButton, null, \"-\")\n          , React.createElement(KeyButton, null, \"=\")\n        )\n\n        , React.createElement('div', { style: { display: \"flex\", gap: \"9.6px\", marginBottom: \"9.6px\", justifyContent: \"center\" },}\n          , React.createElement(KeyButton, { style: { width: \"108px\" },}, \"tab\")\n          , React.createElement(KeyButton, null, \"Q\")\n          , React.createElement(KeyButton, null, \"W\")\n          , React.createElement(KeyButton, { isActive: keyGlows.e.opacity > 0 || keyGlows.e2.opacity > 0, glowData: keyGlows.e.opacity > 0 ? keyGlows.e : keyGlows.e2,}, \"E\")\n          , React.createElement(KeyButton, { isActive: keyGlows.r.opacity > 0, glowData: keyGlows.r,}, \"R\")\n          , React.createElement(KeyButton, { isActive: keyGlows.t.opacity > 0, glowData: keyGlows.t,}, \"T\")\n          , React.createElement(KeyButton, { isActive: keyGlows.y.opacity > 0, glowData: keyGlows.y,}, \"Y\")\n          , React.createElement(KeyButton, null, \"U\")\n          , React.createElement(KeyButton, { isActive: keyGlows.i.opacity > 0, glowData: keyGlows.i,}, \"I\")\n          , React.createElement(KeyButton, { isActive: keyGlows.o.opacity > 0, glowData: keyGlows.o,}, \"O\")\n          , React.createElement(KeyButton, null, \"P\")\n          , React.createElement(KeyButton, null, \"[\")\n          , React.createElement(KeyButton, null, \"]\")\n        )\n\n        , React.createElement('div', { style: { display: \"flex\", gap: \"9.6px\", marginBottom: \"9.6px\", justifyContent: \"center\" },}\n          , React.createElement(KeyButton, { style: { width: \"120px\" },}, \"caps lock\" )\n          , React.createElement(KeyButton, { isActive: keyGlows.A.opacity > 0 || keyGlows.a.opacity > 0 || keyGlows.a2.opacity > 0, glowData: keyGlows.A.opacity > 0 ? keyGlows.A : (keyGlows.a.opacity > 0 ? keyGlows.a : keyGlows.a2),}, \"A\")\n          , React.createElement(KeyButton, null, \"S\")\n          , React.createElement(KeyButton, { isActive: keyGlows.d.opacity > 0 || keyGlows.d2.opacity > 0, glowData: keyGlows.d.opacity > 0 ? keyGlows.d : keyGlows.d2,}, \"D\")\n          , React.createElement(KeyButton, null, \"F\")\n          , React.createElement(KeyButton, null, \"G\")\n          , React.createElement(KeyButton, null, \"H\")\n          , React.createElement(KeyButton, null, \"J\")\n          , React.createElement(KeyButton, { isActive: keyGlows.K.opacity > 0, glowData: keyGlows.K,}, \"K\")\n          , React.createElement(KeyButton, null, \"L\")\n          , React.createElement(KeyButton, null, \";\")\n          , React.createElement(KeyButton, null, \"'\")\n        )\n\n        , React.createElement('div', { style: { display: \"flex\", gap: \"9.6px\", marginBottom: \"9.6px\", justifyContent: \"center\" },}\n          , React.createElement(KeyButton, { style: { width: \"144px\" },}, \"shift\")\n          , React.createElement(KeyButton, null, \"Z\")\n          , React.createElement(KeyButton, null, \"X\")\n          , React.createElement(KeyButton, null, \"C\")\n          , React.createElement(KeyButton, null, \"V\")\n          , React.createElement(KeyButton, { isActive: keyGlows.b.opacity > 0, glowData: keyGlows.b,}, \"B\")\n          , React.createElement(KeyButton, { isActive: keyGlows.n.opacity > 0, glowData: keyGlows.n,}, \"N\")\n          , React.createElement(KeyButton, { isActive: keyGlows.m.opacity > 0, glowData: keyGlows.m,}, \"M\")\n          , React.createElement(KeyButton, null, \",\")\n          , React.createElement(KeyButton, null, \".\")\n          , React.createElement(KeyButton, null, \"/\")\n        )\n\n        , React.createElement('div', { style: { display: \"flex\", gap: \"9.6px\", justifyContent: \"center\", alignItems: \"flex-end\" },}\n          , React.createElement(KeyButton, { style: { width: \"72px\", height: \"48px\" },}, \"fn\")\n          , React.createElement(KeyButton, { style: { width: \"72px\", height: \"48px\" },}\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols--keyboard-control-key-rounded\", style: { fontSize: \"19.2px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, { style: { width: \"72px\", height: \"48px\" },}\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols--keyboard-option-key-rounded\", style: { fontSize: \"19.2px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, { style: { width: \"96px\", height: \"48px\" },}\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols--keyboard-command-key\", style: { fontSize: \"19.2px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, { \n            style: { width: \"360px\", height: \"48px\" }, \n            isActive: keyGlows.space.opacity > 0, \n            glowData: keyGlows.space,}\n)\n          , React.createElement(KeyButton, { style: { width: \"96px\", height: \"48px\" },}\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols--keyboard-command-key\", style: { fontSize: \"19.2px\", color: \"#495057\" },} )\n          )\n          , React.createElement(KeyButton, { style: { width: \"72px\", height: \"48px\" },}\n            , React.createElement(window.IconifyIcon, { icon: \"material-symbols--keyboard-option-key-rounded\", style: { fontSize: \"19.2px\", color: \"#495057\" },} )\n          )\n        )\n\n        , frame > 30 && (\n          React.createElement('div', { style: {\n            position: \"absolute\",\n            top: \"-120px\",\n            left: \"50%\",\n            transform: \"translate(-50%, 0)\",\n            fontSize: \"56px\",\n            fontWeight: \"500\",\n            color: \"#007bff\",\n            textAlign: \"center\",\n            fontFamily: \"Inter\",\n            whiteSpace: \"nowrap\",\n            width: \"max-content\"\n          },}\n            , getTypedText()\n          )\n        )\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.581Z"
  },
  "flare-bg": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nfunction FlareBG() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animate the gradient properties over time\n  // Cycle duration: 3 seconds (90 frames at 30fps)\n  const cycleDuration = fps * 3;\n  \n  // Animate hue 1: 10° → 30°\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [10, 30, 10],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: 35° → 55°\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [35, 55, 35],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 85% → 95%\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [85, 95, 85],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [90, 85, 90],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 55% → 65%\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [55, 65, 55],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [60, 55, 60],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: ±20° around 135° (115° → 155°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [115, 155, 115],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%))`;\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: gradientStyle,\n      },}\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.582Z"
  },
  "pink-bg": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nfunction PinkBG() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animate the gradient properties over time\n  // Cycle duration: 5 seconds (150 frames at 30fps)\n  const cycleDuration = fps * 5;\n  \n  // Animate hue 1: 258° → 240° (purple variations)\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [258, 240, 258],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: 320° → 340° (pink variations)\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [320, 340, 320],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 98% → 90% → 98%\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [98, 90, 98],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [82, 88, 82],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 38% → 45% → 38% for purple, 57% → 50% → 57% for pink\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [38, 45, 38],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [57, 50, 57],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: ±30° around 135° (105° → 165°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [105, 165, 105],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%))`;\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: gradientStyle,\n      },}\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.583Z"
  },
  "summer-bg": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nfunction SummerBG() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animate the gradient properties over time\n  // Cycle duration: 8 seconds (240 frames at 30fps)\n  const cycleDuration = fps * 8;\n  \n  // Animate hue 1: 66° → 80° (yellow-green variations)\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [66, 80, 66],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: 122° → 135° (green variations)\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [122, 135, 122],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 69% → 75% → 69%\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [69, 75, 69],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [45, 55, 45],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 62% → 55% → 62% for yellow-green, 50% → 58% → 50% for green\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [62, 55, 62],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [50, 58, 50],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: ±25° around 135° (110° → 160°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [110, 160, 110],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%))`;\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: gradientStyle,\n      },}\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.584Z"
  },
  "dark-forest-bg": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nfunction DarkForestBG() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animate the gradient properties over time\n  // Cycle duration: 8 seconds (240 frames at 30fps)\n  const cycleDuration = fps * 8;\n  \n  // Animate hue 1: 0° → 15° (black to very dark variations)\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [0, 15, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: 120° → 135° (green variations)\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [120, 135, 120],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 0% → 10% → 0% for dark, 86% → 76% → 86% for green\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [0, 10, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [86, 76, 86],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 0% → 8% → 0% for black, 34% → 28% → 34% for green\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [0, 8, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [34, 28, 34],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: ±25° around 135° (110° → 160°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [110, 160, 110],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%))`;\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: gradientStyle,\n      },}\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.584Z"
  },
  "blue-bg": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nfunction BlueBG() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animate the gradient properties over time\n  // Cycle duration: 8 seconds (240 frames at 30fps)\n  const cycleDuration = fps * 8;\n  \n  // Animate hue 1: 240° → 230° (dark blue variations)\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [240, 230, 240],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: 192° → 185° (light blue variations)\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [192, 185, 192],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 100% → 95% → 100% for dark blue, 77% → 85% → 77% for light blue\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [100, 95, 100],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [77, 85, 77],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 14% → 18% → 14% for dark blue, 62% → 58% → 62% for light blue\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [14, 18, 14],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [62, 58, 62],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: ±25° around 135° (110° → 160°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [110, 160, 110],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%))`;\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: gradientStyle,\n      },}\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.584Z"
  },
  "space-grey-bg": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nfunction SpaceGreyBG() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animate the gradient properties over time\n  // Cycle duration: 8 seconds (240 frames at 30fps)\n  const cycleDuration = fps * 8;\n  \n  // Animate hue 1: 0° → 10° (black variations)\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [0, 10, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: 0° → 15° (grey variations)\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [0, 15, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 0% → 5% → 0% for black, 0% → 8% → 0% for grey\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [0, 5, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [0, 8, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 0% → 5% → 0% for black, 26% → 30% → 26% for grey\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [0, 5, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [26, 30, 26],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: ±25° around 135° (110° → 160°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [110, 160, 110],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%))`;\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: gradientStyle,\n      },}\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.585Z"
  },
  "insta-bg": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nfunction InstaBG() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animate the gradient properties over time\n  // Cycle duration: 8 seconds (240 frames at 30fps)\n  const cycleDuration = fps * 8;\n  \n  // Animate hue 1: 290° → 285° (purple variations)\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [290, 285, 290],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: 350° → 345° (pink/red variations)\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [350, 345, 350],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 3: 22° → 28° (orange variations)\n  const hue3 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [22, 28, 22],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 72% → 78% → 72% for purple, 75% → 80% → 75% for pink, 85% → 90% → 85% for orange\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [72, 78, 72],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [75, 80, 75],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation3 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [85, 90, 85],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 36% → 32% → 36% for purple, 59% → 55% → 59% for pink, 56% → 60% → 56% for orange\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [36, 32, 36],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [59, 55, 59],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness3 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [56, 60, 56],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: ±25° around 135° (110° → 160°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [110, 160, 110],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%), hsl(${hue3}, ${saturation3}%, ${lightness3}%))`;\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: gradientStyle,\n      },}\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.585Z"
  },
  "sunrise-bg": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nfunction SunriseBG() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animate the gradient properties over time\n  // Cycle duration: 8 seconds (240 frames at 30fps)\n  const cycleDuration = fps * 8;\n  \n  // Animate hue 1: 195° → 205° (blue variations)\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [195, 205, 195],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: 22° → 28° (orange variations)\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [22, 28, 22],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 85% → 80% → 85% for blue, 82% → 88% → 82% for orange\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [85, 80, 85],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [82, 88, 82],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 42% → 38% → 42% for blue, 58% → 62% → 58% for orange\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [42, 38, 42],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [58, 62, 58],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: ±25° around 135° (110° → 160°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [110, 160, 110],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%))`;\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: gradientStyle,\n      },}\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.585Z"
  },
  "fruit-bg": {
    "jsCode": "function FruitBG() {\n  const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animate the gradient properties over time\n  // Cycle duration: 8 seconds (240 frames at 30fps)\n  const cycleDuration = fps * 8;\n  \n  // Animate hue 1: 170° → 175° (cyan/mint variations)\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [170, 175, 170],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: 25° → 20° (orange variations)\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [25, 20, 25],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 79% → 85% → 79% for cyan, 100% → 95% → 100% for orange\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [79, 85, 79],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [100, 95, 100],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 56% → 60% → 56% for cyan, 59% → 55% → 59% for orange\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [56, 60, 56],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [59, 55, 59],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: ±25° around 135° (110° → 160°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [110, 160, 110],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%))`;\n\n  return React.createElement(AbsoluteFill, {\n    style: {\n      background: gradientStyle,\n    }\n  });\n}",
    "compiledAt": "2025-09-03T19:32:29.586Z"
  },
  "bahamas-bg": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nfunction BahamasBG() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animate the gradient properties over time\n  // Cycle duration: 8 seconds (240 frames at 30fps)\n  const cycleDuration = fps * 8;\n  \n  // Animate hue 1: 178° → 185° (light cyan variations)\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [178, 185, 178],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: 192° → 188° (blue-cyan variations)\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [192, 188, 192],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 70% → 80% → 70% for light cyan, 94% → 88% → 94% for blue-cyan\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [70, 80, 70],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [94, 88, 94],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 85% → 80% → 85% for light cyan, 51% → 55% → 51% for blue-cyan\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [85, 80, 85],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [51, 55, 51],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: ±25° around 135° (110° → 160°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [110, 160, 110],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%))`;\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: gradientStyle,\n      },}\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.586Z"
  },
  "cool-sky-bg": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nfunction CoolSkyBG() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animate the gradient properties over time\n  // Cycle duration: 8 seconds (240 frames at 30fps)\n  const cycleDuration = fps * 8;\n  \n  // Animate hue 1: 210° → 205° (blue variations)\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [210, 205, 210],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: 192° → 198° (cyan variations)\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [192, 198, 192],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 3: 0° → 210° (white with slight blue tint variations)\n  const hue3 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [0, 210, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 65% → 70% → 65% for blue, 69% → 75% → 69% for cyan, 0% → 5% → 0% for white\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [65, 70, 65],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [69, 75, 69],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation3 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [0, 5, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 49% → 45% → 49% for blue, 71% → 75% → 71% for cyan, 100% → 95% → 100% for white\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [49, 45, 49],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [71, 75, 71],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness3 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [100, 95, 100],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: ±25° around 135° (110° → 160°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [110, 160, 110],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%), hsl(${hue3}, ${saturation3}%, ${lightness3}%))`;\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: gradientStyle,\n      },}\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.586Z"
  },
  "vibey-bg": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nfunction VibeyBG() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animate the gradient properties over time\n  // Cycle duration: 8 seconds (240 frames at 30fps)\n  const cycleDuration = fps * 8;\n  \n  // Animate hue 1: 299° → 295° (magenta variations)\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [299, 295, 299],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: 187° → 193° (cyan variations)\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [187, 193, 187],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 100% → 95% → 100% for magenta, 100% → 90% → 100% for cyan\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [100, 95, 100],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [100, 90, 100],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 49% → 52% → 49% for magenta, 61% → 58% → 61% for cyan\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [49, 52, 49],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [61, 58, 61],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: ±25° around 135° (110° → 160°)\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [110, 160, 110],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%))`;\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: gradientStyle,\n      },}\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.586Z"
  },
  "vibes-bg-gradient": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nfunction VibesBG() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Animate the gradient properties over time\n  // Cycle duration: 20 seconds (600 frames at 30fps) - very slow for ambient effect\n  const cycleDuration = fps * 20;\n  \n  // Color progression: #40e0d0 (turquoise) → #ff8c00 (orange) → #ff0080 (deep pink)\n  // Converting to HSL: 174° → 33° → 330°\n  \n  // Animate hue 1: 174° → 33° → 330° → back to 174°\n  const hue1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 3, (cycleDuration * 2) / 3, cycleDuration],\n    [174, 33, 330, 174],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate hue 2: Offset by ~20° for gradient variation\n  const hue2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 3, (cycleDuration * 2) / 3, cycleDuration],\n    [194, 53, 350, 194],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate saturation: 70% → 100% for vibrant colors\n  const saturation1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [70, 100, 70],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const saturation2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [85, 90, 85],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate lightness: 50% → 60% for good vibrancy\n  const lightness1 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [50, 60, 50],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  const lightness2 = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [55, 50, 55],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n  \n  // Animate angle: ±25° around 45° (20° → 70°) for more dynamic movement\n  const angle = interpolate(\n    frame % cycleDuration,\n    [0, cycleDuration / 2, cycleDuration],\n    [20, 70, 20],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp'\n    }\n  );\n\n  const gradientStyle = `linear-gradient(${angle}deg, hsl(${hue1}, ${saturation1}%, ${lightness1}%), hsl(${hue2}, ${saturation2}%, ${lightness2}%))`;\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: gradientStyle,\n      },}\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.587Z"
  },
  "apple-signin": {
    "jsCode": "const {\n  AbsoluteFill,\n  interpolate,\n  useCurrentFrame,\n  spring,\n  useVideoConfig,\n} = window.Remotion;\n\nfunction AppleSignIn() {\nconst frame = useCurrentFrame();\nconst { fps } = useVideoConfig();\n\nconst fadeIn = spring({\n  frame,\n  fps,\n  config: { damping: 20, stiffness: 80 },\n});\n\nconst buttonScale = spring({\n  frame: frame - 15,\n  fps,\n  config: { damping: 12, stiffness: 200 },\n});\n\nconst hover = spring({\n  frame: frame - 45,\n  fps,\n  config: { damping: 12, stiffness: 200 },\n});\n\nconst shadowSize = interpolate(hover, [0, 1], [30, 45]);\n\nconst pulse = Math.sin(frame / 30) * 0.1 + 0.9;\n\nreturn (\n  React.createElement(AbsoluteFill, {\n    style: {\n      backgroundColor: \"white\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      fontFamily: \"Inter, -apple-system, system-ui, sans-serif\",\n      padding: \"0 10%\",\n    },}\n\n    , React.createElement('div', {\n      style: {\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        width: \"90%\",\n        height: \"60%\",\n        transform: `translate(-50%, -50%) scale(${pulse})`,\n        background:\n          \"radial-gradient(ellipse at center, rgba(255,255,255,0.15) 0%, transparent 70%)\",\n        filter: \"blur(60px)\",\n        opacity: fadeIn,\n      },}\n    )\n\n    , React.createElement('button', {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: \"20px\",\n        background: \"black\",\n        color: \"white\",\n        border: \"none\",\n        borderRadius: \"100px\",\n        padding: \"40px 60px\",\n        fontSize: \"48px\",\n        fontWeight: 500,\n        cursor: \"pointer\",\n        opacity: fadeIn,\n        transform: `scale(${interpolate(buttonScale, [0, 1], [0.9, 1])})`,\n        boxShadow: `0 ${shadowSize}px ${shadowSize * 2}px rgba(0, 0, 0, 0.1)`,\n        transition: \"box-shadow 0.3s ease\",\n        width: \"100%\",\n        maxWidth: \"100%\",\n      },}\n\n      , React.createElement('svg', { viewBox: \"0 0 384 512\"   , width: \"48\", height: \"48\", fill: \"currentColor\",}\n        , React.createElement('path', { d: \"M318.7 268.7c-.2-36.7 16.4-64.4 50-84.8-18.8-26.9-47.2-41.7-84.7-44.6-35.5-2.8-74.3 20.7-88.5 20.7-15 0-49.4-19.7-76.4-19.7C63.3 141.2 4 184.8 4 273.5q0 39.3 14.4 81.2c12.8 36.7 59 126.7 107.2 125.2 25.2-.6 43-17.9 75.8-17.9 31.8 0 48.3 17.9 76.4 17.9 48.6-.7 90.4-82.5 102.6-119.3-65.2-30.7-61.7-90-61.7-91.9zm-56.6-164.2c27.3-32.4 24.8-61.9 24-72.5-24.1 1.4-52 16.4-67.9 34.9-17.5 19.8-27.8 44.3-25.6 71.9 26.1 2 49.9-11.4 69.5-34.3z\"                                           ,} )\n      ), \"Sign in with Apple\"\n\n    )\n  )\n);\n}",
    "compiledAt": "2025-09-03T19:32:29.587Z"
  },
  "carousel-text": {
    "jsCode": "const { AbsoluteFill, interpolate, useCurrentFrame, useVideoConfig } = window.Remotion;\n\nfunction CarouselText() {\n  const frame = useCurrentFrame();\n  const { width } = useVideoConfig();\n  \n  const words = ['Carousel', 'Text', 'Animation', 'Effect'];\n  const wordWidth = width / 2;\n  const totalWidth = wordWidth * words.length;\n  \n  // Create a seamless loop by using modulo\n  const loopFrame = frame % 120; // Loop every 4 seconds (120 frames)\n  \n  const movement = interpolate(\n    loopFrame,\n    [0, 120],\n    [0, -totalWidth],\n    {\n      extrapolateRight: 'clamp',\n      extrapolateLeft: 'clamp',\n    }\n  );\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        backgroundColor: 'white',\n        justifyContent: 'center',\n        alignItems: 'center',\n        overflow: 'hidden',\n      },}\n\n      , React.createElement('div', {\n        style: {\n          display: 'flex',\n          transform: `translateX(${movement}px)`,\n          gap: '60px',\n          position: 'absolute',\n        },}\n\n        , [...words, ...words].map((word, index) => (\n          React.createElement('h1', {\n            key: index,\n            style: {\n              fontSize: '120px',\n              fontFamily: 'system-ui, -apple-system, sans-serif',\n              margin: 0,\n              color: '#1a1a1a',\n              width: wordWidth,\n              textAlign: 'center',\n              whiteSpace: 'nowrap',\n            },}\n\n            , word\n          )\n        ))\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.588Z"
  },
  "ai-coding": {
    "jsCode": "const {\nAbsoluteFill,\nuseCurrentFrame,\nuseVideoConfig,\ninterpolate,\n} = window.Remotion;\n\nfunction Coding() {\nconst frame = useCurrentFrame();\n\nconst codeLines = [\n  { text: \"export const Animation: React.FC = () => {\", indent: 0, delay: 0 },\n  { text: \"const frame = useCurrentFrame();\", indent: 1, delay: 10 },\n  { text: \"return (\", indent: 1, delay: 20 },\n  { text: \"<Series>\", indent: 2, delay: 30 },\n  { text: \"<Series.Sequence durationInFrames={60}>\", indent: 3, delay: 40 },\n  { text: \"<FadeIn>\", indent: 4, delay: 50 },\n  { text: \"const progress = interpolate(\", indent: 5, delay: 60 },\n  { text: \"frame,\", indent: 6, delay: 70 },\n  { text: \"[0, 30],\", indent: 6, delay: 80 },\n  { text: \"[0, 1],\", indent: 6, delay: 90 },\n  { text: \");\", indent: 5, delay: 100 },\n  { text: \"</FadeIn>\", indent: 4, delay: 110 },\n  { text: \"</Series.Sequence>\", indent: 3, delay: 120 },\n  { text: \"</Series>\", indent: 2, delay: 130 },\n  { text: \");\", indent: 1, delay: 140 },\n  { text: \"}\", indent: 0, delay: 145 },\n];\n\nconst containerOpacity = interpolate(\n  frame,\n  [0, 10],\n  [0, 1],\n  { extrapolateRight: \"clamp\" }\n);\n\nfunction CodeLine({ text, delay, indent }) {\n  const charCount = Math.floor(\n    interpolate(frame - delay, [0, 20], [0, text.length], {\n      extrapolateRight: \"clamp\",\n    })\n  );\n\n  const opacity = interpolate(frame - delay, [0, 5], [0, 1], {\n    extrapolateRight: \"clamp\",\n  });\n\n  const colorizeToken = (token) => {\n    if (token.match(/^(Sequence|Series|interpolate|useCurrentFrame|spring)$/)) {\n      return \"#FF92FF\";\n    } else if (token.match(/^[A-Z]\\w+/)) {\n      return \"#00FFFF\";\n    } else if (token.match(/^['\"\"].*['\"\"]$/)) {\n      return \"#50FA7B\";\n    } else if (token.match(/^[{}\\[\\](),;]$/)) {\n      return \"#F8F8F2\";\n    } else if (token.match(/^\\d+$/)) {\n      return \"#FF79C6\";\n    } else if (token.match(/^[\\w]+(?=\\()/)) {\n      return \"#00B4FF\";\n    } else if (token.match(/^\\.[\\w]+/)) {\n      return \"#BD93F9\";\n    }\n    return \"#F8F8F2\";\n  };\n\n  return (\n    React.createElement('div', {\n      style: {\n        fontFamily: \"SF Mono, monospace\",\n        fontSize: \"24px\",\n        marginLeft: `${indent * 24}px`,\n        opacity,\n        height: \"36px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        color: \"#F8F8F2\",\n      },}\n\n      , text.slice(0, charCount).split(/([{}\\[\\](),;.]|\\s+)/).map((token, i) => {\n        if (token.trim() === \"\") return token;\n        const color = colorizeToken(token);\n        return (\n          React.createElement('span', { key: i, style: { color },}\n            , token\n          )\n        );\n      })\n      , frame >= delay && frame < delay + 20 && (\n        React.createElement('span', {\n          style: {\n            width: \"2px\",\n            height: \"24px\",\n            background: \"#00FFFF\",\n            display: \"inline-block\",\n            marginLeft: \"2px\",\n            boxShadow: \"0 0 8px rgba(0, 255, 255, 0.8)\",\n          },}\n        )\n      )\n    )\n  );\n}\n\nfunction CodeContainer({ children, opacity }) {\n  return (\n    React.createElement('div', {\n      style: {\n        background: \"#2A2A2A\",\n        borderRadius: \"24px\",\n        padding: \"40px\",\n        boxShadow: \"0 20px 60px rgba(0, 0, 0, 0.5)\",\n        opacity,\n        width: \"800px\",\n        position: \"relative\",\n        overflow: \"hidden\",\n      },}\n\n      , React.createElement('div', {\n        style: {\n          position: \"absolute\",\n          inset: 0,\n          backgroundImage: `linear-gradient(rgba(255, 255, 255, 0.05) 1px, transparent 1px),\n            linear-gradient(90deg, rgba(255, 255, 255, 0.05) 1px, transparent 1px)`,\n          backgroundSize: \"20px 20px\",\n          opacity: 0.2,\n        },}\n      )\n      , children\n    )\n  );\n}\n\nreturn (\n  React.createElement(AbsoluteFill, {\n    style: {\n      background: \"black\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },}\n\n    , React.createElement(CodeContainer, { opacity: containerOpacity,}\n      , codeLines.map((line, i) => (\n        React.createElement(CodeLine, {\n          key: i,\n          text: line.text,\n          delay: line.delay,\n          indent: line.indent,}\n        )\n      ))\n    )\n  )\n);\n}",
    "compiledAt": "2025-09-03T19:32:29.588Z"
  },
  "cursor-click-scene": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring } = window.Remotion;\n\nconst NewButton = ({ opacity, scale }) => {\n  return (\n    React.createElement('div', {\n      style: {\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: `translate(-50%, -50%) scale(${scale})`,\n        background: 'white',\n        padding: '48px 64px',\n        borderRadius: '32px',\n        display: 'flex',\n        alignItems: 'center',\n        gap: '24px',\n        opacity,\n        boxShadow: `\n          0 8px 32px rgba(66, 153, 225, 0.15),\n          0 0 0 1px rgba(66, 153, 225, 0.2),\n          0 0 24px rgba(66, 153, 225, 0.1),\n          0 0 48px rgba(66, 153, 225, 0.1),\n          0 0 96px rgba(66, 153, 225, 0.1)\n        `,\n      },}\n\n      , React.createElement('span', { style: { fontSize: '96px', color: '#000000' },}, \"+\")\n      , React.createElement('span', {\n        style: {\n          fontSize: '96px',\n          fontFamily: 'Inter, system-ui, -apple-system, sans-serif',\n          fontWeight: 400,\n          color: '#000000',\n        },}\n, \"New\"\n\n      )\n    )\n  );\n};\n\nconst Cursor = ({ x, y, scale, opacity }) => {\n  return (\n    React.createElement('div', {\n      style: {\n        position: 'absolute',\n        left: x,\n        top: y,\n        fontSize: '200px',\n        lineHeight: 1,\n        transform: `translate(-50%, -50%) scale(${scale * 0.5})`,\n        opacity,\n      },}\n, \"👆\"\n\n    )\n  );\n};\n\nfunction CursorClickScene() {\n  const frame = useCurrentFrame();\n  const { width, height, fps } = useVideoConfig();\n\n  const buttonProgress = 1;\n\n  // Faster arc movement: completes in 44 frames\n  const progress = interpolate(frame, [0, 44], [0, 1], {\n    extrapolateRight: 'clamp',\n    easing: (t) => 1 - Math.pow(1 - t, 2),\n  });\n\n  // Smooth arc path\n  const startX = width + 100;\n  const startY = height;\n  const endX = width / 2 + 180;\n  const endY = height / 2 + 60;\n  const controlX = (startX + endX) / 2;\n  const controlY = height / 2 - 100; // Creates smooth arc height\n\n  // Quadratic Bézier approximation\n  const bezier = (t, p0, p1, p2) =>\n    (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;\n\n  const cursorX = bezier(progress, startX, controlX, endX);\n  const cursorY = bezier(progress, startY, controlY, endY);\n\n  const clickProgress = spring({\n    frame: frame - 44,\n    fps,\n    config: { damping: 12, stiffness: 200 },\n  });\n\n  const buttonScale = interpolate(clickProgress, [0, 1], [1, 0.95], {\n    extrapolateRight: 'clamp',\n  });\n\n  const cursorScale = interpolate(clickProgress, [0, 1], [1, 0.8], {\n    extrapolateRight: 'clamp',\n  });\n\n  return (\n    React.createElement(AbsoluteFill, { style: { background: '#F8F9FA' },}\n      , React.createElement(NewButton, { opacity: buttonProgress, scale: buttonScale,} )\n      , React.createElement(Cursor, { x: cursorX, y: cursorY, scale: cursorScale, opacity: 1,} )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.589Z"
  },
  "dot-dot-dot": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame } = window.Remotion;\n\nfunction DotDotDot() {\n  const Dot = ({ cx, delay }) => {\n    const frame = useCurrentFrame();\n    const loopDuration = 30; // 1-second loop\n\n    // Ensure the frame is always positive for the modulo operation\n    const frameInLoop = (frame - delay + loopDuration) % loopDuration;\n\n    // Use a cosine wave for a perfect, smooth loop\n    const angle = (frameInLoop / loopDuration) * Math.PI * 2;\n    const scale = Math.cos(angle);\n\n    // Map the cosine wave (-1 to 1) to our desired pixel range (6 to 12)\n    const D_AMP = (12 - 6) / 2; // 3\n    const D_CENTER = (12 + 6) / 2; // 9\n    const cy = D_CENTER - D_AMP * scale;\n\n    return React.createElement('circle', { cx: cx, cy: cy, r: \"2\", fill: \"black\",} );\n  };\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        backgroundColor: 'white',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },}\n\n      , React.createElement('svg', {\n        width: \"48\",\n        height: \"48\",\n        viewBox: \"0 0 24 24\"   ,\n        style: {\n          transform: 'scale(2)',\n        },}\n\n        , React.createElement(Dot, { cx: 4, delay: 0,} )\n        , React.createElement(Dot, { cx: 12, delay: 5,} )\n        , React.createElement(Dot, { cx: 20, delay: 10,} )\n      )\n    )\n  );\n};\n",
    "compiledAt": "2025-09-03T19:32:29.589Z"
  },
  "draw-on": {
    "jsCode": "const {\n  AbsoluteFill,\n  interpolate,\n  useCurrentFrame,\n} = window.Remotion;\n\nfunction DrawOn() {\n  const frame = useCurrentFrame();\n  \n  const progress = interpolate(\n    frame,\n    [0, 45],\n    [0, 100],\n    {\n      extrapolateRight: 'clamp',\n      extrapolateLeft: 'clamp',\n    }\n  );\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        backgroundColor: 'white',\n        justifyContent: 'center',\n        alignItems: 'center',\n      },}\n\n      , React.createElement('h1', {\n        style: {\n          fontSize: '300px',\n          fontFamily: 'system-ui, -apple-system, sans-serif',\n          margin: 0,\n          WebkitTextStroke: '2px black',\n          color: 'transparent',\n          backgroundImage: `linear-gradient(90deg, black ${progress}%, transparent ${progress}%)`,\n          WebkitBackgroundClip: 'text',\n          backgroundClip: 'text',\n        },}\n, \"Draw on\"\n\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.589Z"
  },
  "dual-screen-app": {
    "jsCode": "const {\n  AbsoluteFill,\n  interpolate,\n  useCurrentFrame,\n  spring,\n} = window.Remotion;\n\nconst GradientCircle = ({ x, y, size, color1, color2, opacity, direction }) => {\n  const frame = useCurrentFrame();\n  \n  // Slow drifting motion\n  const driftX = Math.sin(frame / 180) * direction.x;\n  const driftY = Math.cos(frame / 180) * direction.y;\n\n  return (\n    React.createElement('div', {\n      style: {\n        position: \"absolute\",\n        left: x + driftX,\n        top: y + driftY,\n        width: size,\n        height: size,\n        borderRadius: \"50%\",\n        background: `radial-gradient(circle at 30% 30%, ${color1}, ${color2})`,\n        opacity: 0.6 * opacity,\n        filter: \"blur(60px)\",\n        transition: \"all 0.5s ease-out\",\n      },}\n    )\n  );\n};\n\nconst PhoneFrame = ({ opacity, children, x }) => {\n  const frame = useCurrentFrame();\n  \n  const timeProgress = spring({\n    frame,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  return (\n    React.createElement('div', {\n      style: {\n        width: \"280px\",\n        height: \"580px\",\n        background: \"white\",\n        borderRadius: \"32px\",\n        position: \"relative\",\n        overflow: \"hidden\",\n        opacity,\n        boxShadow: \"0 24px 48px rgba(0, 0, 0, 0.15)\",\n      },}\n\n      , React.createElement('div', {\n        style: {\n          height: \"36px\",\n          padding: \"0 20px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          background: \"white\",\n          position: \"relative\",\n          zIndex: 2,\n          opacity: timeProgress,\n          transform: `translateY(${interpolate(timeProgress, [0, 1], [20, 0])}px)`,\n        },}\n\n        , React.createElement('div', { style: { \n          fontSize: \"14px\",\n          fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n          fontWeight: 700,\n        },}, \"9:41\"\n\n        )\n        , React.createElement('div', { style: { fontSize: \"14px\", display: \"flex\", alignItems: \"center\", gap: \"6px\" },}\n          , React.createElement('svg', { width: \"16\", height: \"16\", viewBox: \"0 0 24 24\"   , fill: \"currentColor\",}\n            , React.createElement('path', { d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"                   ,})\n          )\n          , React.createElement('svg', { width: \"16\", height: \"16\", viewBox: \"0 0 24 24\"   , fill: \"currentColor\",}\n            , React.createElement('path', { d: \"M15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33v15.33C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V5.33C17 4.6 16.4 4 15.67 4z\"                   ,})\n          )\n        )\n      )\n\n      , children\n    )\n  );\n};\n\nconst ProfileScreen = ({ delay }) => {\n  const frame = useCurrentFrame();\n  \n  const progress = spring({\n    frame: frame - delay,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  return (\n    React.createElement('div', {\n      style: {\n        height: \"100%\",\n        background: \"#F8F9FA\",\n        padding: \"20px\",\n      },}\n\n      , React.createElement('div', {\n        style: {\n          opacity: progress,\n          transform: `translateY(${interpolate(progress, [0, 1], [20, 0])}px)`,\n        },}\n\n        , React.createElement('div', {\n          style: {\n            fontSize: \"28px\",\n            fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n            fontWeight: 700,\n            color: \"#1A1A1A\",\n            marginBottom: \"24px\",\n          },}\n, \"Profile\"\n\n        )\n\n        , React.createElement('div', {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            gap: \"12px\",\n            marginBottom: \"36px\",\n          },}\n\n          , React.createElement('div', {\n            style: {\n              width: \"100px\",\n              height: \"100px\",\n              borderRadius: \"50px\",\n              background: \"#4A90E2\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              fontSize: \"48px\",\n            },}\n\n            , React.createElement('svg', { width: \"48\", height: \"48\", viewBox: \"0 0 24 24\"   , fill: \"currentColor\",}\n              , React.createElement('path', { d: \"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"              ,})\n            )\n          )\n          , React.createElement('div', {\n            style: {\n              fontSize: \"20px\",\n              fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n              fontWeight: 700,\n              color: \"#1A1A1A\",\n            },}\n, \"Sarah Wilson\"\n\n          )\n          , React.createElement('div', {\n            style: {\n              fontSize: \"14px\",\n              fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n              color: \"#666666\",\n            },}\n, \"Product Designer\"\n\n          )\n        )\n      )\n\n      , React.createElement('div', {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: \"12px\",\n        },}\n\n        , [\n          { icon: \"key\", label: \"Account Settings\" },\n          { icon: \"bell\", label: \"Notifications\" },\n          { icon: \"lock\", label: \"Privacy & Security\" },\n          { icon: \"credit-card\", label: \"Payment Methods\" },\n          { icon: \"help-circle\", label: \"Help & Support\" },\n        ].map((item, i) => (\n          React.createElement('div', {\n            key: i,\n            style: {\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"12px\",\n              padding: \"12px\",\n              background: \"white\",\n              borderRadius: \"12px\",\n              opacity: spring({\n                frame: frame - delay - 15 - i * 5,\n                fps: 30,\n                config: { damping: 12, stiffness: 200 },\n              }),\n              transform: `translateX(${interpolate(\n                spring({\n                  frame: frame - delay - 15 - i * 5,\n                  fps: 30,\n                  config: { damping: 12, stiffness: 200 },\n                }),\n                [0, 1],\n                [50, 0]\n              )}px)`,\n            },}\n\n            , React.createElement('div', { style: { fontSize: \"20px\", color: \"#4A90E2\" },}\n              , item.icon === \"key\" && (\n                React.createElement('svg', { width: \"20\", height: \"20\", viewBox: \"0 0 24 24\"   , fill: \"currentColor\",}\n                  , React.createElement('path', { d: \"M21 2l-2 2-1.5-1.5L17 2l-1 1-1.5-1.5L13 2l-2 2-1.5-1.5L7 2 5 4v16l2 2 1.5-1.5L10 22l1-1 1.5 1.5L14 22l2-2 1.5 1.5L19 22l2-2V2z\"                  ,})\n                )\n              )\n              , item.icon === \"bell\" && (\n                React.createElement('svg', { width: \"20\", height: \"20\", viewBox: \"0 0 24 24\"   , fill: \"currentColor\",}\n                  , React.createElement('path', { d: \"M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9\"             ,})\n                  , React.createElement('path', { d: \"M10.3 21a1.94 1.94 0 0 0 3.4 0\"       ,})\n                )\n              )\n              , item.icon === \"lock\" && (\n                React.createElement('svg', { width: \"20\", height: \"20\", viewBox: \"0 0 24 24\"   , fill: \"currentColor\",}\n                  , React.createElement('rect', { width: \"18\", height: \"11\", x: \"3\", y: \"11\", rx: \"2\", ry: \"2\",})\n                  , React.createElement('circle', { cx: \"12\", cy: \"16\", r: \"1\",})\n                  , React.createElement('path', { d: \"M7 11V7a5 5 0 0 1 10 0v4\"       ,})\n                )\n              )\n              , item.icon === \"credit-card\" && (\n                React.createElement('svg', { width: \"20\", height: \"20\", viewBox: \"0 0 24 24\"   , fill: \"currentColor\",}\n                  , React.createElement('rect', { width: \"20\", height: \"14\", x: \"2\", y: \"5\", rx: \"2\",})\n                  , React.createElement('line', { x1: \"2\", x2: \"22\", y1: \"10\", y2: \"10\",})\n                )\n              )\n              , item.icon === \"help-circle\" && (\n                React.createElement('svg', { width: \"20\", height: \"20\", viewBox: \"0 0 24 24\"   , fill: \"currentColor\",}\n                  , React.createElement('circle', { cx: \"12\", cy: \"12\", r: \"10\",})\n                  , React.createElement('path', { d: \"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"          ,})\n                  , React.createElement('path', { d: \"M12 17h.01\" ,})\n                )\n              )\n            )\n            , React.createElement('div', {\n              style: {\n                fontSize: \"14px\",\n                fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n                fontWeight: 500,\n                color: \"#1A1A1A\",\n              },}\n\n              , item.label\n            )\n          )\n        ))\n      )\n    )\n  );\n};\n\nconst MessagesScreen = ({ delay }) => {\n  const frame = useCurrentFrame();\n  \n  const progress = spring({\n    frame: frame - delay,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  return (\n    React.createElement('div', {\n      style: {\n        height: \"100%\",\n        background: \"#F8F9FA\",\n        padding: \"20px\",\n      },}\n\n      , React.createElement('div', {\n        style: {\n          opacity: progress,\n          transform: `translateY(${interpolate(progress, [0, 1], [20, 0])}px)`,\n        },}\n\n        , React.createElement('div', {\n          style: {\n            fontSize: \"28px\",\n            fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n            fontWeight: 700,\n            color: \"#1A1A1A\",\n            marginBottom: \"24px\",\n          },}\n, \"Messages\"\n\n        )\n\n        , React.createElement('div', {\n          style: {\n            background: \"white\",\n            borderRadius: \"12px\",\n            padding: \"12px\",\n            marginBottom: \"24px\",\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"12px\",\n          },}\n\n          , React.createElement('svg', { width: \"20\", height: \"20\", viewBox: \"0 0 24 24\"   , fill: \"currentColor\", style: { color: \"#666666\" },}\n            , React.createElement('circle', { cx: \"11\", cy: \"11\", r: \"8\",})\n            , React.createElement('path', { d: \"m21 21-4.35-4.35\" ,})\n          )\n          , React.createElement('div', {\n            style: {\n              fontSize: \"14px\",\n              fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n              color: \"#666666\",\n              flex: 1,\n            },}\n, \"Search messages...\"\n\n          )\n        )\n      )\n\n      , React.createElement('div', {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: \"12px\",\n        },}\n\n        , [\n          { name: \"Alex Johnson\", message: \"Hey, how's the project going?\", time: \"2m ago\", avatar: \"AJ\" },\n          { name: \"Maria Garcia\", message: \"Can we meet tomorrow?\", time: \"1h ago\", avatar: \"MG\" },\n          { name: \"David Chen\", message: \"The design looks great!\", time: \"3h ago\", avatar: \"DC\" },\n          { name: \"Emma Wilson\", message: \"Thanks for the feedback\", time: \"1d ago\", avatar: \"EW\" },\n        ].map((conversation, i) => (\n          React.createElement('div', {\n            key: i,\n            style: {\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"12px\",\n              padding: \"12px\",\n              background: \"white\",\n              borderRadius: \"12px\",\n              opacity: spring({\n                frame: frame - delay - 20 - i * 5,\n                fps: 30,\n                config: { damping: 12, stiffness: 200 },\n              }),\n              transform: `translateX(${interpolate(\n                spring({\n                  frame: frame - delay - 20 - i * 5,\n                  fps: 30,\n                  config: { damping: 12, stiffness: 200 },\n                }),\n                [0, 1],\n                [50, 0]\n              )}px)`,\n            },}\n\n            , React.createElement('div', {\n              style: {\n                width: \"40px\",\n                height: \"40px\",\n                borderRadius: \"20px\",\n                background: \"#4A90E2\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                fontSize: \"14px\",\n                fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n                fontWeight: 600,\n                color: \"white\",\n              },}\n\n              , conversation.avatar\n            )\n            , React.createElement('div', { style: { flex: 1 },}\n              , React.createElement('div', {\n                style: {\n                  fontSize: \"14px\",\n                  fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n                  fontWeight: 600,\n                  color: \"#1A1A1A\",\n                  marginBottom: \"2px\",\n                },}\n\n                , conversation.name\n              )\n              , React.createElement('div', {\n                style: {\n                  fontSize: \"12px\",\n                  fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n                  color: \"#666666\",\n                },}\n\n                , conversation.message\n              )\n            )\n            , React.createElement('div', {\n              style: {\n                fontSize: \"10px\",\n                fontFamily: \"Articulate CF, system-ui, -apple-system, sans-serif\",\n                color: \"#999999\",\n              },}\n\n              , conversation.time\n            )\n          )\n        ))\n      )\n    )\n  );\n};\n\nfunction DualScreenApp() {\n  const frame = useCurrentFrame();\n  \n  const mainProgress = spring({\n    frame,\n    fps: 30,\n    config: {\n      damping: 20,\n      stiffness: 80,\n    },\n  });\n\n  const rightScreenProgress = spring({\n    frame: frame - 45,\n    fps: 30,\n    config: {\n      damping: 20,\n      stiffness: 80,\n    },\n  });\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: \"#F8F9FA\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      },}\n\n      , React.createElement(GradientCircle, {\n        x: 200,\n        y: 200,\n        size: 600,\n        color1: \"#4A90E2\",\n        color2: \"#45B7D1\",\n        opacity: mainProgress,\n        direction: { x: 100, y: 50 },}\n      )\n      , React.createElement(GradientCircle, {\n        x: 1400,\n        y: 200,\n        size: 600,\n        color1: \"#45B7D1\",\n        color2: \"#4A90E2\",\n        opacity: mainProgress,\n        direction: { x: -80, y: 120 },}\n      )\n      , React.createElement(GradientCircle, {\n        x: 800,\n        y: 800,\n        size: 600,\n        color1: \"#4A90E2\",\n        color2: \"#45B7D1\",\n        opacity: mainProgress,\n        direction: { x: 60, y: -90 },}\n      )\n\n      , React.createElement('div', {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          gap: \"120px\",\n          position: \"relative\",\n          zIndex: 1,\n        },}\n\n        , React.createElement(PhoneFrame, { opacity: mainProgress, x: 0,}\n          , React.createElement(ProfileScreen, { delay: 15,} )\n        )\n\n        , React.createElement(PhoneFrame, { opacity: rightScreenProgress, x: 0,}\n          , React.createElement(MessagesScreen, { delay: 60,} )\n        )\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.590Z"
  },
  "fade-in": {
    "jsCode": "const {\n  AbsoluteFill,\n  interpolate,\n  useCurrentFrame,\n} = window.Remotion;\n\nfunction FadeIn() {\n  const frame = useCurrentFrame();\n  \n  const opacity = interpolate(\n    frame,\n    [0, 30],\n    [0, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n    }\n  );\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        backgroundColor: 'white',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },}\n\n      , React.createElement('h1', {\n        style: {\n          fontSize: '300px',\n          fontFamily: 'system-ui, -apple-system, sans-serif',\n          opacity,\n          margin: 0,\n          color: '#000',\n          fontWeight: 'bold',\n        },}\n, \"Fade in\"\n\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.590Z"
  },
  "github-signin": {
    "jsCode": "const {\nAbsoluteFill,\nuseCurrentFrame,\nuseVideoConfig,\nspring,\ninterpolate,\n} = window.Remotion;\n\nfunction GithubSignIn() {\nconst frame = useCurrentFrame();\nconst { fps } = useVideoConfig();\n\nconst fadeIn = spring({\n  frame,\n  fps,\n  config: {\n    damping: 20,\n    stiffness: 80,\n  },\n});\n\nconst scaleIn = spring({\n  frame: frame - 15,\n  fps,\n  config: {\n    damping: 12,\n    stiffness: 200,\n  },\n});\n\nconst pulse = Math.sin(frame / 30) * 0.1 + 0.9;\n\nreturn (\n  React.createElement(AbsoluteFill, {\n    style: {\n      backgroundColor: \"white\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      padding: \"0 10%\",\n    },}\n\n    , React.createElement('div', {\n      style: {\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        width: \"90%\",\n        height: \"60%\",\n        transform: `translate(-50%, -50%) scale(${pulse})`,\n        background: \"radial-gradient(ellipse at center, rgba(0,0,0,0.05) 0%, transparent 70%)\",\n        filter: \"blur(60px)\",\n        opacity: fadeIn,\n      },}\n    )\n\n    , React.createElement('button', {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: \"20px\",\n        background: \"black\",\n        color: \"white\",\n        border: \"none\",\n        borderRadius: \"100px\",\n        padding: \"40px 60px\",\n        fontSize: \"48px\",\n        fontFamily: \"Inter, -apple-system, system-ui, sans-serif\",\n        fontWeight: 500,\n        cursor: \"pointer\",\n        opacity: fadeIn,\n        transform: `scale(${interpolate(scaleIn, [0, 1], [0.9, 1])})`,\n        boxShadow: `0 36px 72px rgba(0, 0, 0, 0.15)`,\n        width: \"100%\",\n        maxWidth: \"100%\",\n      },}\n\n      , React.createElement('svg', {\n        viewBox: \"0 0 24 24\"   ,\n        fill: \"currentColor\",\n        width: 48,\n        height: 48,}\n\n        , React.createElement('path', { d: \"M12 .5C5.65.5.5 5.66.5 12.05c0 5.1 3.29 9.42 7.86 10.96.58.11.8-.25.8-.56 0-.28-.01-1.02-.02-2-3.2.7-3.88-1.54-3.88-1.54-.52-1.33-1.28-1.68-1.28-1.68-1.05-.71.08-.7.08-.7 1.16.08 1.77 1.2 1.77 1.2 1.03 1.77 2.7 1.26 3.36.96.1-.75.4-1.26.72-1.54-2.55-.3-5.23-1.28-5.23-5.7 0-1.26.46-2.3 1.2-3.11-.12-.3-.52-1.52.11-3.16 0 0 .98-.31 3.2 1.19a11.14 11.14 0 0 1 5.82 0c2.2-1.5 3.18-1.19 3.18-1.19.64 1.64.24 2.86.12 3.16.75.81 1.2 1.85 1.2 3.11 0 4.43-2.69 5.39-5.25 5.68.42.36.77 1.08.77 2.17 0 1.56-.02 2.82-.02 3.2 0 .31.21.68.8.56A10.53 10.53 0 0 0 23.5 12.05C23.5 5.66 18.34.5 12 .5Z\"                                                               ,} )\n      ), \"Sign in with GitHub\"\n\n    )\n  )\n);\n}",
    "compiledAt": "2025-09-03T19:32:29.590Z"
  },
  "google-signin": {
    "jsCode": "const {\nAbsoluteFill,\nuseCurrentFrame,\nuseVideoConfig,\nspring,\ninterpolate,\n} = window.Remotion;\n\nfunction GoogleSignIn() {\nconst frame = useCurrentFrame();\nconst { fps } = useVideoConfig();\n\nconst fadeIn = spring({\n  frame,\n  fps,\n  config: {\n    damping: 20,\n    stiffness: 80,\n  },\n});\n\nconst buttonScale = spring({\n  frame: frame - 15,\n  fps,\n  config: {\n    damping: 12,\n    stiffness: 200,\n  },\n});\n\nconst hover = spring({\n  frame: frame - 45,\n  fps,\n  config: {\n    damping: 12,\n    stiffness: 200,\n  },\n});\n\nconst shadowSize = interpolate(hover, [0, 1], [30, 45]);\nconst pulse = Math.sin(frame / 30) * 0.1 + 0.9;\n\nreturn (\n  React.createElement(AbsoluteFill, {\n    style: {\n      backgroundColor: 'white',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: '0 10%',\n    },}\n\n    , React.createElement('div', {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        width: '90%',\n        height: '60%',\n        transform: `translate(-50%, -50%) scale(${pulse})`,\n        background: 'radial-gradient(ellipse at center, rgba(0,0,0,0.05) 0%, transparent 70%)',\n        filter: 'blur(60px)',\n        opacity: fadeIn,\n      },}\n    )\n\n    , React.createElement('div', {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        gap: 20,\n        background: 'white',\n        color: '#1a1a1a',\n        border: '2px solid #ccc',\n        borderRadius: 100,\n        padding: '40px 60px',\n        fontSize: 48,\n        fontFamily: 'Inter, sans-serif',\n        fontWeight: 500,\n        cursor: 'pointer',\n        opacity: fadeIn,\n        transform: `scale(${interpolate(buttonScale, [0, 1], [0.9, 1])})`,\n        boxShadow: `0 ${shadowSize}px ${shadowSize * 2}px rgba(0, 0, 0, 0.1)`,\n        width: '100%',\n        maxWidth: '100%',\n      },}\n\n      , React.createElement('svg', {\n        width: \"48\",\n        height: \"48\",\n        viewBox: \"0 0 256 262\"   ,\n        xmlns: \"http://www.w3.org/2000/svg\",}\n\n        , React.createElement('path', {\n          d: \"M255.68 133.49c0-11.26-.93-22.07-2.67-32.52H130v61.55h70.68c-3.06 16.52-12.28 30.51-26.18 39.89v33.03h42.32c24.75-22.8 38.86-56.4 38.86-101.95z\"      ,\n          fill: \"#4285F4\",}\n        )\n        , React.createElement('path', {\n          d: \"M130 262c35.1 0 64.56-11.66 86.08-31.6l-42.32-33.03c-11.78 7.9-26.88 12.56-43.76 12.56-33.64 0-62.15-22.71-72.34-53.2H14.59v33.59C36.2 230.82 79.91 262 130 262z\"             ,\n          fill: \"#34A853\",}\n        )\n        , React.createElement('path', {\n          d: \"M57.66 156.73c-2.77-8.23-4.36-17-4.36-26s1.59-17.77 4.36-26V71.14H14.59C5.28 88.79 0 109.1 0 130s5.28 41.21 14.59 58.86l43.07-32.13z\"          ,\n          fill: \"#FBBC05\",}\n        )\n        , React.createElement('path', {\n          d: \"M130 51.05c19.08 0 36.16 6.56 49.68 19.42l37.26-37.26C194.56 11.72 165.1 0 130 0 79.91 0 36.2 31.18 14.59 71.14l43.07 33.59C67.85 73.76 96.36 51.05 130 51.05z\"                       ,\n          fill: \"#EA4335\",}\n        )\n      ), \"Sign in with Google\"\n\n    )\n  )\n);\n}",
    "compiledAt": "2025-09-03T19:32:29.591Z"
  },
  "highlight-sweep": {
    "jsCode": "const { AbsoluteFill, interpolate, useCurrentFrame, useVideoConfig } = window.Remotion;\n\nfunction HighlightSweep() {\n  const frame = useCurrentFrame();\n  const { width, height } = useVideoConfig();\n\n  // Format detection for responsive sizing\n  const aspectRatio = width / height;\n  const isPortrait = aspectRatio < 1;\n  const isSquare = Math.abs(aspectRatio - 1) < 0.2;\n  \n  // Responsive font sizing\n  const baseFontSize = Math.min(width, height) * 0.1;\n  const fontSize = isPortrait ? baseFontSize * 0.7 : isSquare ? baseFontSize * 0.8 : baseFontSize;\n  \n  const text = \"Highlight Sweep Effect\";\n  const sweepProgress = interpolate(\n    frame,\n    [0, 45],\n    [0, 100],\n    {\n      extrapolateRight: 'clamp',\n      extrapolateLeft: 'clamp',\n    }\n  );\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        backgroundColor: 'white',\n        justifyContent: 'center',\n        alignItems: 'center',\n      },}\n\n      , React.createElement('div', { style: { position: 'relative' },}\n        , React.createElement('h1', {\n          style: {\n            fontSize: `${fontSize}px`,\n            fontFamily: 'system-ui, -apple-system, sans-serif',\n            color: '#1a1a1a',\n            margin: 0,\n            position: 'relative',\n            zIndex: 1,\n            whiteSpace: 'nowrap',\n            lineHeight: 1.1,\n            textAlign: 'center'\n          },}\n\n          , text\n        )\n        , React.createElement('div', {\n          style: {\n            position: 'absolute',\n            bottom: '10px',\n            left: 0,\n            width: `${sweepProgress}%`,\n            height: '20px',\n            background: 'linear-gradient(90deg, #4285f4 0%, #34a853 100%)',\n            transition: 'width 0.3s ease',\n            zIndex: 0,\n            borderRadius: '4px',\n          },}\n        )\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.591Z"
  },
  "knowscode": {
    "jsCode": "// src/templates/KnowsCode.tsx\nconst { AbsoluteFill, interpolate, useCurrentFrame, spring, useVideoConfig } = window.Remotion;\n\nfunction KnowsCode() {\n  const frame = useCurrentFrame();\n  const { width, height } = useVideoConfig();\n\n  // Format detection for responsive sizing\n  const aspectRatio = width / height;\n  const isPortrait = aspectRatio < 1;\n  const isSquare = Math.abs(aspectRatio - 1) < 0.2;\n  \n  // Responsive sizing to ensure text fits on one line\n  const baseFontSize = Math.min(width, height) * 0.08;\n  const fontSize = isPortrait ? baseFontSize * 0.5 : isSquare ? baseFontSize * 0.65 : baseFontSize;\n  const braceSize = fontSize * 2;\n\n  const BRACE_START = 1;\n  const TEXT_START = 5;\n\n  const braceScale = spring({\n    frame: frame - BRACE_START,\n    fps: 30,\n    config: {\n      damping: 12,\n    },\n  });\n\n  const GradientBrace = ({ isLeft, scale }) => {\n    return (\n      React.createElement('div', {\n        style: {\n          fontSize: `${braceSize}px`,\n          lineHeight: `${braceSize}px`,\n          fontFamily: 'SF Pro Display, system-ui, sans-serif',\n          background: 'linear-gradient(180deg, #FF8DC7 0%, #86A8E7 100%)',\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent',\n          transform: `scale(${scale})`,\n        },}\n\n        , isLeft ? '{' : '}'\n      )\n    );\n  };\n\n  const TypewriterText = ({ text, startFrame }) => {\n    const charCount = Math.floor(\n      interpolate(Math.max(0, frame - startFrame), [0, 30], [0, text.length], {\n        extrapolateRight: 'clamp',\n      })\n    );\n\n    const cursorVisible = Math.floor((frame - startFrame) / 15) % 2 === 0;\n\n    return (\n      React.createElement('div', {\n        style: {\n          fontSize: `${fontSize}px`,\n          lineHeight: `${fontSize}px`,\n          fontFamily: 'SF Pro Display, system-ui, sans-serif',\n          fontWeight: 'bold',\n          whiteSpace: 'nowrap',\n        },}\n\n        , text.slice(0, charCount)\n        , React.createElement('span', {\n          style: {\n            opacity: cursorVisible ? 1 : 0,\n            borderRight: '4px solid black',\n            marginLeft: '4px',\n            height: `${fontSize}px`,\n            display: 'inline-block',\n          },}\n        )\n      )\n    );\n  };\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: 'white',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },}\n\n      , React.createElement('div', { \n        style: { \n          display: 'flex', \n          alignItems: 'center', \n          gap: `${fontSize * 0.1}px`,\n          width: isPortrait ? '95%' : '80%',\n          justifyContent: 'center',\n        },}\n\n        , React.createElement(GradientBrace, { isLeft: true, scale: braceScale,} )\n        , React.createElement(TypewriterText, { text: \"Software is eating the world\"    , startFrame: TEXT_START,} )\n        , React.createElement(GradientBrace, { isLeft: false, scale: braceScale,} )\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.591Z"
  },
  "mobile-app": {
    "jsCode": "const {\n  AbsoluteFill,\n  interpolate,\n  useCurrentFrame,\n  spring,\n} = window.Remotion;\n\nconst GradientCircle = ({ x, y, size, color1, color2, opacity }) => {\n  return (\n    React.createElement('div', {\n      style: {\n        position: 'absolute',\n        left: x,\n        top: y,\n        width: size,\n        height: size,\n        borderRadius: '50%',\n        background: `radial-gradient(circle at 30% 30%, ${color1}, ${color2})`,\n        opacity: 0.6 * opacity,\n        filter: 'blur(60px)',\n      },}\n    )\n  );\n};\n\nconst PhoneFrame = ({ opacity, children }) => {\n  const frame = useCurrentFrame();\n  \n  const timeProgress = spring({\n    frame,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  return (\n    React.createElement('div', {\n      style: {\n        width: '320px',\n        height: '650px',\n        background: 'white',\n        borderRadius: '32px',\n        position: 'relative',\n        overflow: 'hidden',\n        opacity,\n        boxShadow: '0 24px 48px rgba(0, 0, 0, 0.15)',\n      },}\n\n      , React.createElement('div', {\n        style: {\n          height: '40px',\n          padding: '0 20px',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          background: 'white',\n          position: 'relative',\n          zIndex: 2,\n          opacity: timeProgress,\n          transform: `translateY(${interpolate(timeProgress, [0, 1], [20, 0])}px)`,\n        },}\n\n        , React.createElement('div', { style: { \n          fontSize: '14px',\n          fontFamily: 'Space Grotesk, system-ui, -apple-system, sans-serif',\n          fontWeight: 700,\n        },}, \"9:41\"\n\n        )\n        , React.createElement('div', { style: { fontSize: '14px' },}\n          , React.createElement('span', { style: { marginRight: '6px' },}, \"📶\")\n          , React.createElement('span', null, \"🔋\")\n        )\n      )\n\n      , children\n    )\n  );\n};\n\nconst ProfileCard = ({ delay }) => {\n  const frame = useCurrentFrame();\n  \n  const progress = spring({\n    frame: frame - delay,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  return (\n    React.createElement('div', { style: { padding: '20px' },}\n      , React.createElement('div', {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '12px',\n          marginBottom: '20px',\n          opacity: progress,\n          transform: `translateY(${interpolate(progress, [0, 1], [20, 0])}px)`,\n        },}\n\n        , React.createElement('div', {\n          style: {\n            width: '56px',\n            height: '56px',\n            borderRadius: '28px',\n            background: '#FF6B6B',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            fontSize: '28px',\n          },}\n\n          , React.createElement('svg', { width: \"28\", height: \"28\", viewBox: \"0 0 24 24\"   , fill: \"currentColor\",}\n            , React.createElement('path', { d: \"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"              ,})\n          )\n        )\n        , React.createElement('div', null\n          , React.createElement('div', {\n            style: {\n              fontSize: '20px',\n              fontFamily: 'Inter, system-ui, -apple-system, sans-serif',\n              fontWeight: 700,\n              color: '#1A1A1A',\n            },}\n, \"Adewale Taiwo\"\n\n          )\n          , React.createElement('div', {\n            style: {\n              fontSize: '14px',\n              fontFamily: 'Inter, system-ui, -apple-system, sans-serif',\n              color: '#FF6B6B',\n            },}\n, \"House Manager\"\n\n          )\n        )\n      )\n\n      , React.createElement('div', {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: '1fr 1fr',\n          gap: '12px',\n          marginBottom: '24px',\n        },}\n\n        , React.createElement('div', {\n          style: {\n            background: 'rgba(255, 107, 107, 0.1)',\n            padding: '20px',\n            borderRadius: '20px',\n            opacity: progress,\n            transform: `translateY(${interpolate(progress, [0, 1], [20, 0])}px)`,\n          },}\n\n          , React.createElement('div', {\n            style: {\n              fontSize: '12px',\n              fontFamily: 'Inter, system-ui, -apple-system, sans-serif',\n              color: '#666666',\n              marginBottom: '6px',\n            },}\n, \"Wallet Balance\"\n\n          )\n          , React.createElement('div', {\n            style: {\n              fontSize: '20px',\n              fontFamily: 'Inter, system-ui, -apple-system, sans-serif',\n              fontWeight: 700,\n              color: '#FF6B6B',\n            },}\n, \"$5046.57\"\n\n          )\n        )\n\n        , React.createElement('div', {\n          style: {\n            background: '#FF6B6B',\n            padding: '20px',\n            borderRadius: '20px',\n            color: 'white',\n            opacity: progress,\n            transform: `translateY(${interpolate(progress, [0, 1], [20, 0])}px)`,\n          },}\n\n          , React.createElement('div', {\n            style: {\n              fontSize: '12px',\n              fontFamily: 'Inter, system-ui, -apple-system, sans-serif',\n              marginBottom: '6px',\n            },}\n, \"Master Card\"\n\n          )\n          , React.createElement('div', {\n            style: {\n              fontSize: '14px',\n              fontFamily: 'Inter, system-ui, -apple-system, sans-serif',\n              fontWeight: 500,\n            },}\n, \"5999-XXXX\"\n\n          )\n        )\n      )\n    )\n  );\n};\n\nconst WorkerCard = ({ name, delay }) => {\n  const frame = useCurrentFrame();\n  \n  const progress = spring({\n    frame: frame - delay,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  return (\n    React.createElement('div', {\n      style: {\n        background: 'white',\n        padding: '12px',\n        borderRadius: '12px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        gap: '6px',\n        opacity: progress,\n        transform: `scale(${progress})`,\n        boxShadow: '0 2px 8px rgba(0, 0, 0, 0.05)',\n      },}\n\n      , React.createElement('div', {\n        style: {\n          width: '40px',\n          height: '40px',\n          borderRadius: '20px',\n          background: '#FF6B6B',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: '20px',\n        },}\n\n        , name === 'Add Workers' ? (\n          React.createElement('svg', { width: \"20\", height: \"20\", viewBox: \"0 0 24 24\"   , fill: \"currentColor\",}\n            , React.createElement('path', { d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" ,})\n          )\n        ) : (\n          React.createElement('svg', { width: \"20\", height: \"20\", viewBox: \"0 0 24 24\"   , fill: \"currentColor\",}\n            , React.createElement('path', { d: \"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"              ,})\n          )\n        )\n      )\n      , React.createElement('div', {\n        style: {\n          fontSize: '12px',\n          fontFamily: 'Inter, system-ui, -apple-system, sans-serif',\n          fontWeight: 500,\n          color: '#1A1A1A',\n          textAlign: 'center',\n        },}\n\n        , name\n      )\n    )\n  );\n};\n\nconst ServiceCard = ({ icon, title, delay }) => {\n  const frame = useCurrentFrame();\n  \n  const progress = spring({\n    frame: frame - delay,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  return (\n    React.createElement('div', {\n      style: {\n        background: 'white',\n        padding: '20px',\n        borderRadius: '20px',\n        display: 'flex',\n        alignItems: 'center',\n        gap: '12px',\n        opacity: progress,\n        transform: `translateX(${interpolate(progress, [0, 1], [50, 0])}px)`,\n        boxShadow: '0 2px 8px rgba(0, 0, 0, 0.05)',\n      },}\n\n      , React.createElement('div', { style: { fontSize: '28px', color: '#FF6B6B' },}, icon)\n      , React.createElement('div', {\n        style: {\n          fontSize: '16px',\n          fontFamily: 'Inter, system-ui, -apple-system, sans-serif',\n          fontWeight: 500,\n          color: '#1A1A1A',\n        },}\n\n        , title\n      )\n    )\n  );\n};\n\nconst SectionTitle = ({ title, delay, showAll }) => {\n  const frame = useCurrentFrame();\n  \n  const progress = spring({\n    frame: frame - delay,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  return (\n    React.createElement('div', {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        marginBottom: '12px',\n        opacity: progress,\n        transform: `translateY(${interpolate(progress, [0, 1], [20, 0])}px)`,\n      },}\n\n      , React.createElement('div', {\n        style: {\n          fontSize: '18px',\n          fontFamily: 'Inter, system-ui, -apple-system, sans-serif',\n          fontWeight: 700,\n          color: '#1A1A1A',\n        },}\n\n        , title\n      )\n      , showAll && (\n        React.createElement('div', {\n          style: {\n            fontSize: '14px',\n            fontFamily: 'Inter, system-ui, -apple-system, sans-serif',\n            color: '#FF6B6B',\n          },}\n, \"All\"\n\n        )\n      )\n    )\n  );\n};\n\nfunction MobileApp() {\n  const frame = useCurrentFrame();\n  \n  const mainProgress = spring({\n    frame,\n    fps: 30,\n    config: {\n      damping: 20,\n      stiffness: 80,\n    },\n  });\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: '#F8F9FA',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },}\n\n      , React.createElement(GradientCircle, {\n        x: 150,\n        y: 150,\n        size: 400,\n        color1: \"#FF6B6B\",\n        color2: \"#FFA07A\",\n        opacity: mainProgress,}\n      )\n      , React.createElement(GradientCircle, {\n        x: 1000,\n        y: 150,\n        size: 400,\n        color1: \"#FF8C42\",\n        color2: \"#FF6B6B\",\n        opacity: mainProgress,}\n      )\n      , React.createElement(GradientCircle, {\n        x: 600,\n        y: 600,\n        size: 400,\n        color1: \"#FFA07A\",\n        color2: \"#FF8C42\",\n        opacity: mainProgress,}\n      )\n\n      , React.createElement(PhoneFrame, { opacity: mainProgress,}\n        , React.createElement('div', {\n          style: {\n            height: '100%',\n            overflow: 'auto',\n            background: '#F8F9FA',\n          },}\n\n          , React.createElement(ProfileCard, { delay: 8,} )\n\n          , React.createElement('div', { style: { padding: '0 20px 20px' },}\n            , React.createElement(SectionTitle, { title: \"Houses\", delay: 15,} )\n            , React.createElement('div', {\n              style: {\n                display: 'grid',\n                gridTemplateColumns: 'repeat(4, 1fr)',\n                gap: '8px',\n              },}\n\n              , React.createElement(WorkerCard, { name: \"Add Workers\" , delay: 18,} )\n              , React.createElement(WorkerCard, { name: \"Tobi Lateef\" , delay: 20,} )\n              , React.createElement(WorkerCard, { name: \"Queen Needle\" , delay: 22,} )\n              , React.createElement(WorkerCard, { name: \"Joan Blessing\" , delay: 24,} )\n            )\n          )\n\n          , React.createElement('div', { style: { padding: '0 20px 20px' },}\n            , React.createElement(SectionTitle, { title: \"Services\", delay: 30, showAll: true,} )\n            , React.createElement('div', {\n              style: {\n                display: 'flex',\n                flexDirection: 'column',\n                gap: '12px',\n              },}\n\n              , React.createElement(ServiceCard, { \n                icon: \n                  React.createElement('svg', { width: \"28\", height: \"28\", viewBox: \"0 0 24 24\"   , fill: \"currentColor\",}\n                    , React.createElement('path', { d: \"M13 2.05v3.03c3.39.49 6 3.39 6 6.92 0 .9-.18 1.75-.5 2.54l2.6 1.53c.56-1.24.9-2.62.9-4.07 0-5.18-3.95-9.45-9-9.95zM12 19c-3.87 0-7-3.13-7-7 0-3.53 2.61-6.43 6-6.92V2.05c-5.06.5-9 4.76-9 9.95 0 5.52 4.47 10 9.99 10 3.31 0 6.24-1.61 8.06-4.09l-2.6-1.53C16.17 17.98 14.21 19 12 19z\"                                 ,})\n                  )\n                , \n                title: \"Electrical\", \n                delay: 32,} \n              )\n              , React.createElement(ServiceCard, { \n                icon: \n                  React.createElement('svg', { width: \"28\", height: \"28\", viewBox: \"0 0 24 24\"   , fill: \"currentColor\",}\n                    , React.createElement('path', { d: \"M22.7 19l-9.1-9.1c.9-2.3.4-5-1.5-6.9-2-2-5-2.4-7.4-1.3L9 6 6 9 1.6 4.7C.4 7.1.9 10.1 2.9 12.1c1.9 1.9 4.6 2.4 6.9 1.5l9.1 9.1c.4.4 1 .4 1.4 0l2.3-2.3c.5-.4.5-1.1.1-1.4z\"                    ,})\n                  )\n                , \n                title: \"Others\", \n                delay: 34,} \n              )\n            )\n          )\n        )\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.592Z"
  },
  "morphing-text": {
    "jsCode": "const { AbsoluteFill, interpolate, useCurrentFrame } = window.Remotion;\n\nfunction MorphingText() {\n  const frame = useCurrentFrame();\n  const text = \"MORPHING TEXT\";\n  \n  const getDistortionValue = (charIndex) => {\n    const baseDelay = charIndex * 3;\n    const wave = Math.sin((frame - baseDelay) * 0.2) * 20;\n    const progress = interpolate(\n      frame,\n      [0, 30],\n      [30, 0],\n      {\n        extrapolateRight: 'clamp',\n      }\n    );\n    \n    return Math.max(0, wave * (progress / 30));\n  };\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        backgroundColor: 'white',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontFamily: 'system-ui, -apple-system, sans-serif',\n      },}\n\n      , React.createElement('div', { style: { display: 'flex' },}\n        , text.split('').map((char, index) => {\n          const distortion = getDistortionValue(index);\n          \n          return (\n            React.createElement('span', {\n              key: index,\n              style: {\n                fontSize: '120px',\n                fontWeight: 'bold',\n                color: '#1a1a1a',\n                transform: `translateY(${distortion}px)`,\n                display: 'inline-block',\n                opacity: interpolate(\n                  frame,\n                  [0, 15],\n                  [0, 1],\n                  {\n                    extrapolateRight: 'clamp',\n                  }\n                ),\n              },}\n\n              , char === ' ' ? '\\u00A0' : char\n            )\n          );\n        })\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.592Z"
  },
  "placeholders": {
    "jsCode": "const { AbsoluteFill, useCurrentFrame, spring } = window.Remotion;\n\nfunction Placeholders() {\n  const SearchInput = ({ placeholders, opacity }) => {\n    const frame = useCurrentFrame();\n    const currentIndex = Math.floor(frame / 60) % placeholders.length;\n    const currentText = placeholders[currentIndex];\n\n    return (\n      React.createElement('div', {\n        style: {\n          width: '1200px',\n          height: '96px',\n          background: 'white',\n          borderRadius: '48px',\n          display: 'flex',\n          alignItems: 'center',\n          padding: '0 48px',\n          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',\n          position: 'relative',\n          opacity,\n        },}\n\n        , React.createElement('div', { style: { fontSize: '36px', marginRight: '24px' },}, \"🔍\")\n        , React.createElement('div', {\n          style: {\n            fontSize: '27px',\n            fontFamily: 'Inter, sans-serif',\n            color: '#999999',\n          },}\n\n          , currentText\n        )\n      )\n    );\n  };\n\n  const Title = ({ opacity }) => {\n    return (\n      React.createElement('div', {\n        style: {\n          fontSize: '72px',\n          fontFamily: 'Inter, sans-serif',\n          fontWeight: 700,\n          color: 'black',\n          marginBottom: '72px',\n          opacity,\n          textAlign: 'center',\n        },}\n, \"Ask Bazaar AI Anything\"\n\n      )\n    );\n  };\n\n  const frame = useCurrentFrame();\n\n  const mainProgress = spring({\n    frame,\n    fps: 30,\n    config: {\n      damping: 20,\n      stiffness: 80,\n    },\n  });\n\n  const placeholders = [\n    'What is the second rule of fight club',\n    \"Why do Chinese people always say 'Have you eaten yet'\",\n    'WTF is Bazaar',\n    'This is ice-tea',\n    'How to restore Neon database',\n  ];\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: 'white',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },}\n\n      , React.createElement(Title, { opacity: mainProgress,} )\n      , React.createElement(SearchInput, { placeholders: placeholders, opacity: mainProgress,} )\n    )\n  );\n};\n",
    "compiledAt": "2025-09-03T19:32:29.593Z"
  },
  "promptintro": {
    "jsCode": "const {\n  AbsoluteFill,\n  interpolate,\n  useCurrentFrame,\n  spring,\n  useVideoConfig,\n} = window.Remotion;\n\nfunction PromptIntro() {\n  const frame = useCurrentFrame();\n  const { width, height } = useVideoConfig();\n  \n  // Format detection for responsive sizing\n  const aspectRatio = width / height;\n  const isPortrait = aspectRatio < 1;\n  const isSquare = Math.abs(aspectRatio - 1) < 0.2;\n  \n  // Responsive font sizing to ensure text fits on one line\n  const baseFontSize = Math.min(width, height) * 0.04;\n  const fontSize = isPortrait ? baseFontSize * 0.6 : isSquare ? baseFontSize * 0.8 : baseFontSize;\n  const cursorHeight = fontSize;\n  \n  const text = \"Create incredible motion graphics for your app with Bazaar\";\n  const TYPING_START = 0;\n  const TYPING_DURATION = 45;\n  const BUTTON_SHOW = 45;\n  const CLICK_START = 60;\n\n  const charCount = Math.floor(\n    interpolate(\n      frame - TYPING_START,\n      [0, TYPING_DURATION],\n      [0, text.length],\n      { extrapolateRight: \"clamp\" }\n    )\n  );\n\n  const scale = spring({\n    frame: frame - CLICK_START,\n    fps: 30,\n    config: {\n      damping: 15,\n      stiffness: 80,\n    },\n  });\n\n  const finalScale = interpolate(scale, [0, 1], [1, 0.6]);\n\n  const glowIntensity = interpolate(\n    frame,\n    [0, 5, CLICK_START, CLICK_START + 15],\n    [0, 1, 1, 0],\n    { extrapolateRight: \"clamp\" }\n  );\n\n  const cursorVisible = Math.floor(frame / 15) % 2 === 0;\n  const buttonScale = spring({\n    frame: frame - 45,\n    fps: 30,\n    config: {\n      damping: 12,\n      stiffness: 200,\n    },\n  });\n\n  const pulse = Math.sin(frame / 30) * 0.1 + 0.9;\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        background: \"#000000\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        padding: \"0 10%\",\n      },}\n\n      , React.createElement('div', {\n        style: {\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          width: \"90%\",\n          height: \"60%\",\n          transform: `translate(-50%, -50%) scale(${pulse})`,\n          background: `radial-gradient(\n            ellipse at center,\n            rgba(255, 140, 0, ${0.3 * glowIntensity}) 0%,\n            rgba(255, 105, 180, ${0.2 * glowIntensity}) 50%,\n            rgba(147, 112, 219, ${0.1 * glowIntensity}) 100%\n          )`,\n          filter: \"blur(60px)\",\n          opacity: glowIntensity,\n        },}\n      )\n\n      , React.createElement('div', {\n        style: {\n          position: \"relative\",\n          width: \"100%\",\n          height: \"96px\",\n          background: \"rgba(255, 255, 255, 0.1)\",\n          borderRadius: \"9999px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          padding: \"0 48px\",\n          transform: `scale(${finalScale})`,\n          opacity: interpolate(\n            frame,\n            [0, 5, CLICK_START + 15, CLICK_START + 30],\n            [0, 1, 1, 0],\n            { extrapolateRight: \"clamp\" }\n          ),\n          boxShadow: \"0 0 0 2px rgba(255, 255, 255, 0.1)\",\n        },}\n\n        , React.createElement('div', {\n          style: {\n            flex: 1,\n            fontSize: `${fontSize}px`,\n            fontFamily: \"Inter, system-ui, sans-serif\",\n            color: text ? \"#FFFFFF\" : \"#AAAAAA\",\n            whiteSpace: \"nowrap\",\n            overflow: \"hidden\",\n          },}\n\n          , text.slice(0, charCount) || \"Ask Bazaar to create...\"\n          , text.slice(0, charCount) && cursorVisible && (\n            React.createElement('span', {\n              style: {\n                borderRight: \"3px solid #FFFFFF\",\n                marginLeft: \"3px\",\n                height: `${cursorHeight}px`,\n                display: \"inline-block\",\n              },}\n            )\n          )\n        )\n        , frame >= BUTTON_SHOW && (\n          React.createElement('div', {\n            style: {\n              width: \"60px\",\n              height: \"60px\",\n              background: \"rgba(255, 255, 255, 0.1)\",\n              borderRadius: \"50%\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              transform: `scale(${buttonScale})`,\n              cursor: \"pointer\",\n              fontSize: \"32px\",\n            },}\n, \"✨\"\n\n          )\n        )\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.593Z"
  },
  "scale-in": {
    "jsCode": "const {\n  AbsoluteFill,\n  spring,\n  useCurrentFrame,\n  useVideoConfig,\n} = window.Remotion;\n\nfunction ScaleIn() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n  \n  const scaleProgress = spring({\n    frame,\n    fps,\n    config: {\n      mass: 1,\n      damping: 12,\n      stiffness: 200,\n    }\n  });\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        backgroundColor: 'white',\n        justifyContent: 'center',\n        alignItems: 'center',\n      },}\n\n      , React.createElement('h1', {\n        style: {\n          fontSize: '300px',\n          fontFamily: 'system-ui, -apple-system, sans-serif',\n          margin: 0,\n          color: '#000',\n          fontWeight: 'bold',\n          transform: `scale(${scaleProgress})`,\n          opacity: scaleProgress,\n        },}\n, \"Scale in\"\n\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.593Z"
  },
  "slide-in": {
    "jsCode": "const {\n  AbsoluteFill,\n  spring,\n  useCurrentFrame,\n  useVideoConfig,\n} = window.Remotion;\n\nfunction SlideIn() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n  \n  const slideProgress = spring({\n    frame,\n    fps,\n    config: {\n      mass: 1,\n      damping: 15,\n      stiffness: 80,\n    }\n  });\n\n  const translateX = -1000 + (slideProgress * 1000);\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        backgroundColor: 'white',\n        justifyContent: 'center',\n        alignItems: 'center',\n      },}\n\n      , React.createElement('h1', {\n        style: {\n          fontSize: '300px',\n          fontFamily: 'system-ui, -apple-system, sans-serif',\n          margin: 0,\n          color: '#000',\n          fontWeight: 'bold',\n          transform: `translateX(${translateX}px)`,\n        },}\n, \"Slide in\"\n\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.593Z"
  },
  "tesla-stock-graph": {
    "jsCode": " function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }const { AbsoluteFill, interpolate, useCurrentFrame, spring, useVideoConfig } = window.Remotion;\n\nfunction TeslaStockGraph() {\n  const stockData = [\n    { date: 'Apr 1', price: 267.41 },\n    { date: 'Apr 2', price: 275.93 },\n    { date: 'Apr 3', price: 269.79 },\n    { date: 'Apr 4', price: 262.15 },\n    { date: 'Apr 7', price: 258.89 },\n    { date: 'Apr 8', price: 260.38 },\n    { date: 'Apr 9', price: 271.61 },\n    { date: 'Apr 10', price: 267.96 },\n    { date: 'Apr 11', price: 278.93 },\n    { date: 'Apr 14', price: 274.44 },\n    { date: 'Apr 15', price: 282.96 },\n    { date: 'Apr 16', price: 277.48 },\n    { date: 'Apr 17', price: 285.00 },\n    { date: 'Apr 21', price: 279.51 },\n    { date: 'Apr 22', price: 290.38 },\n    { date: 'Apr 23', price: 292.03 },\n  ];\n\n  const { width, height } = useVideoConfig();\n\n  function Graph({ progress }) {\n    const maxPrice = Math.max(...stockData.map(d => d.price));\n    const minPrice = Math.min(...stockData.map(d => d.price));\n    const paddedMaxPrice = maxPrice + (maxPrice - minPrice) * 0.05;\n    const paddedMinPrice = minPrice - (maxPrice - minPrice) * 0.05;\n\n    const points = stockData.map((data, i) => ({\n      x: interpolate(i, [0, stockData.length - 1], [width * 0.1, width * 0.9]),\n      y: interpolate(data.price, [paddedMinPrice, paddedMaxPrice], [height * 0.85, height * 0.15]),\n      price: data.price,\n    }));\n\n    const numSegments = points.length - 1;\n    const currentSegment = progress * numSegments;\n    const segmentIndex = Math.floor(currentSegment);\n    const segmentProgress = currentSegment - segmentIndex;\n\n    const currentPoint = points[Math.min(segmentIndex, points.length - 1)];\n    const nextPoint = points[Math.min(segmentIndex + 1, points.length - 1)];\n\n    const currentX = interpolate(segmentProgress, [0, 1], [currentPoint.x, nextPoint.x]);\n    const currentY = interpolate(segmentProgress, [0, 1], [currentPoint.y, nextPoint.y]);\n    const currentPrice = interpolate(segmentProgress, [0, 1], [currentPoint.price, nextPoint.price]);\n\n    const visiblePoints = [\n      ...points.slice(0, segmentIndex + 1),\n      { x: currentX, y: currentY, price: currentPrice }\n    ];\n\n    function createSmoothPath(points) {\n      if (points.length < 2) return '';\n      let path = `M ${_optionalChain([points, 'access', _2 => _2[0], 'optionalAccess', _3 => _3.x]) || 0} ${_optionalChain([points, 'access', _4 => _4[0], 'optionalAccess', _5 => _5.y]) || 0}`;\n      for (let i = 1; i < points.length; i++) {\n        const prev = points[i - 1];\n        const curr = points[i];\n        if (!prev || !curr) continue;\n        const c1x = prev.x + (curr.x - prev.x) * 0.5;\n        const c1y = prev.y;\n        const c2x = curr.x - (curr.x - prev.x) * 0.5;\n        const c2y = curr.y;\n        path += ` C ${c1x} ${c1y}, ${c2x} ${c2y}, ${curr.x} ${curr.y}`;\n      }\n      return path;\n    }\n\n    const pathD = createSmoothPath(visiblePoints);\n\n    return (\n      React.createElement(React.Fragment, null\n        , Array.from({ length: 8 }).map((_, i) => (\n          React.createElement('line', {\n            key: `grid-${i}`,\n            x1: width * 0.1,\n            y1: height * 0.15 + i * (height * 0.7) / 7,\n            x2: width * 0.9,\n            y2: height * 0.15 + i * (height * 0.7) / 7,\n            stroke: \"rgba(255, 255, 255, 0.1)\"   ,\n            strokeWidth: \"1\",}\n          )\n        ))\n        , Array.from({ length: 8 }).map((_, i) => {\n          const price = interpolate(i, [0, 7], [paddedMaxPrice, paddedMinPrice]);\n          return (\n            React.createElement('text', {\n              key: `price-${i}`,\n              x: width * 0.08,\n              y: height * 0.15 + i * (height * 0.7) / 7,\n              fill: \"white\",\n              fontSize: \"14\",\n              fontFamily: \"Inter, system-ui, -apple-system, sans-serif\"   ,\n              textAnchor: \"end\",\n              alignmentBaseline: \"middle\",}\n, \"$\"\n              , price.toFixed(2)\n            )\n          );\n        })\n        , stockData.map((data, i) => (\n          React.createElement('text', {\n            key: `date-${i}`,\n            x: interpolate(i, [0, stockData.length - 1], [width * 0.1, width * 0.9]),\n            y: height * 0.9,\n            fill: \"white\",\n            fontSize: \"14\",\n            fontFamily: \"Inter, system-ui, -apple-system, sans-serif\"   ,\n            textAnchor: \"middle\",}\n\n            , data.date\n          )\n        ))\n        , React.createElement('path', {\n          d: pathD,\n          fill: \"none\",\n          stroke: \"#FF3B30\",\n          strokeWidth: \"3\",\n          strokeLinecap: \"round\",\n          style: { filter: 'drop-shadow(0 0 8px rgba(255, 59, 48, 0.3))' },}\n        )\n        , progress > 0 && (\n          React.createElement('g', null\n            , React.createElement('circle', {\n              cx: currentX,\n              cy: currentY,\n              r: \"6\",\n              fill: \"#FF3B30\",\n              style: { filter: 'drop-shadow(0 0 8px rgba(255, 59, 48, 0.5))' },}\n            )\n            , React.createElement('text', {\n              x: currentX,\n              y: currentY - 20,\n              fill: \"white\",\n              fontSize: \"16\",\n              fontFamily: \"Inter, system-ui, -apple-system, sans-serif\"   ,\n              fontWeight: \"500\",\n              textAnchor: \"middle\",}\n, \"$\"\n              , currentPrice.toFixed(2)\n            )\n          )\n        )\n      )\n    );\n  }\n\n  function Title() {\n    const frame = useCurrentFrame();\n    const opacity = spring({\n      frame,\n      fps: 30,\n      config: { damping: 12, stiffness: 100 }\n    });\n    return (\n      React.createElement('text', {\n        x: width / 2,\n        y: height * 0.07,\n        fill: \"white\",\n        fontSize: \"32\",\n        fontFamily: \"Inter, system-ui, -apple-system, sans-serif\"   ,\n        fontWeight: \"700\",\n        textAnchor: \"middle\",\n        opacity: opacity,}\n, \"Tesla Stock Price - April 2025\"\n\n      )\n    );\n  }\n\n  const frame = useCurrentFrame();\n  const progress = Math.min(frame / 150, 1);\n\n  return (\n    React.createElement(AbsoluteFill, { style: { background: '#1C1C1E' },}\n      , React.createElement('svg', { width: width, height: height, style: { display: 'block' },}\n        , React.createElement(Title, null )\n        , React.createElement(Graph, { progress: progress,} )\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.595Z"
  },
  "wipe-in": {
    "jsCode": "const {\n  AbsoluteFill,\n  interpolate,\n  useCurrentFrame,\n} = window.Remotion;\n\nfunction WipeIn() {\n  const frame = useCurrentFrame();\n  \n  const progress = interpolate(\n    frame,\n    [0, 30],\n    [0, 100],\n    {\n      extrapolateRight: 'clamp',\n      extrapolateLeft: 'clamp',\n    }\n  );\n\n  const clipPath = `inset(0 ${100 - progress}% 0 0)`;\n\n  return (\n    React.createElement(AbsoluteFill, {\n      style: {\n        backgroundColor: 'white',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        overflow: 'hidden',\n      },}\n\n      , React.createElement('h1', {\n        style: {\n          fontSize: '300px',\n          fontFamily: 'system-ui, -apple-system, sans-serif',\n          margin: 0,\n          color: '#000',\n          fontWeight: 'bold',\n          clipPath,\n        },}\n, \"Wipe in\"\n\n      )\n    )\n  );\n}",
    "compiledAt": "2025-09-03T19:32:29.595Z"
  },
  "word-flip": {
    "jsCode": "const { AbsoluteFill, interpolate, useCurrentFrame } = window.Remotion;\n\nfunction WordFlip() {\n  const Typewriter = () => {\n    const frame = useCurrentFrame();\n    const staticText = \"We were born to\";\n    const words = [\"build\", \"ship\", \"create\"];\n    const currentIndex = Math.floor(frame / 90) % words.length;\n    const currentWord = words[currentIndex] || '';\n    const cycleFrame = frame % 90;\n\n    let displayText = \"\";\n    if (cycleFrame < 30) {\n      const progress = interpolate(cycleFrame, [0, 25], [0, 1], { extrapolateRight: \"clamp\" });\n      displayText = currentWord.slice(0, Math.floor(currentWord.length * progress));\n    } else if (cycleFrame < 60) {\n      displayText = currentWord;\n    } else {\n      const progress = interpolate(cycleFrame, [60, 85], [1, 0], { extrapolateRight: \"clamp\" });\n      displayText = currentWord.slice(0, Math.floor(currentWord.length * progress));\n    }\n\n    const cursorVisible = Math.floor((frame % 45) / 30);\n\n    return (\n      React.createElement('div', {\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          fontSize: '96px',\n          fontFamily: 'Inter, sans-serif',\n          fontWeight: 700,\n          color: '#1A1A1A',\n          display: 'flex',\n          alignItems: 'center',\n          gap: '16px',\n          whiteSpace: 'nowrap',\n        },}\n\n        , staticText\n        , React.createElement('span', { style: { minWidth: '400px', display: 'inline-block' },}\n          , displayText\n          , React.createElement('span', { style: { opacity: cursorVisible, color: '#1A1A1A', marginLeft: '2px' },}, \"|\")\n        )\n      )\n    );\n  };\n\n  return (\n    React.createElement(AbsoluteFill, { style: { background: 'white' },}\n      , React.createElement(Typewriter, null )\n    )\n  );\n};\n",
    "compiledAt": "2025-09-03T19:32:29.595Z"
  }
};

export function getCompiledTemplate(templateId: string): string | null {
  return COMPILED_TEMPLATES[templateId]?.jsCode ?? null;
}
